/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.01.2024 19:17:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1760;
#else
constexpr int kTensorArenaSize = 736;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,400 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0016237745294347405, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[3] = { -640, 846, -594, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00014833378372713923, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[3*16] = { 
  58, -4, 52, -96, 29, 68, 109, -26, -106, 100, -3, -89, 68, -72, 19, -43, 
  62, 80, -49, -72, -127, -7, -32, -109, -23, -71, -52, 98, -6, 36, -5, 102, 
  -101, -52, 102, 35, -105, -92, -102, -12, 103, 37, 115, -100, -78, 57, -4, -16, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 3,16 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0072953398339450359, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 2692, 3375, -377, 3153, 3845, 1897, 1218, 677, 1008, 1554, 2430, 4558, 597, 0, -583, 5080, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 4.6834866225253791e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[16*16] = { 
  9, 81, 60, 84, -14, -40, -23, 58, 4, 16, 5, -38, -47, 62, 105, -93, 
  -85, 127, -5, 87, 61, -86, -64, -17, -43, -16, -27, -5, 50, 85, 105, 46, 
  41, -7, -18, 23, -38, 1, 60, 93, 68, 6, 50, 66, 43, -41, -27, 102, 
  74, -88, 44, -3, 86, 20, -21, 58, 8, -65, -23, 98, -3, -75, -86, 57, 
  35, -17, -60, 8, -105, -122, 63, 85, -52, -22, -32, -49, -23, 109, 57, 6, 
  -20, 64, 33, 77, -48, -85, -25, 122, -55, 37, -24, -37, 60, 114, -34, -24, 
  83, 14, 19, 69, -114, -27, 19, 60, 39, -54, 39, -87, -16, 57, 47, 24, 
  53, 28, 11, -50, -94, 109, 122, 84, 34, 58, 51, 87, 45, 81, 12, 75, 
  63, -107, 75, 48, 54, 14, 91, 33, -32, -45, -52, 84, 54, -73, -124, 103, 
  97, -49, 51, 82, -74, 63, 97, 102, -13, -29, -12, -52, 7, 93, -10, 32, 
  -16, -76, -24, 35, 41, 4, 75, 14, -69, -62, -17, 23, -33, -97, -94, 55, 
  -124, 97, -48, 105, 122, 0, -76, -86, -29, -44, 28, 34, 68, -74, 56, 25, 
  -34, 48, -61, 94, -60, -42, 74, 33, 41, -12, -58, -52, -60, 93, -36, -29, 
  9, -10, -20, -34, -72, 48, -39, -33, 46, 33, -35, 2, -74, -63, -40, -58, 
  38, -5, 44, -22, -34, 29, 0, -31, -14, 62, 60, 8, -2, 5, 42, -64, 
  -25, 117, -17, -4, 91, -46, -91, -25, 3, -12, 46, 20, 7, -85, 67, 34, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 16,16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0056815086863934994, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { 7552, 32665, -5735, 30382, 29471, 789, 13537, 18458, -7042, 0, -5222, -950, -5222, 23294, 29566, 10176, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<1, float> quant5_scale = { 1, { 5.7491988627589308e-06, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[16*400] = { 
  31, 39, 6, 58, 19, 51, 74, 20, 60, 64, 87, 89, 100, 89, 73, 52, 94, 102, 95, 98, 23, 8, 18, 70, 27, 68, 18, 65, 74, 46, 25, 88, 66, 83, -29, -20, -34, 1, 60, -29, 33, 55, 59, 1, 12, 8, 39, 7, 7, 49, 38, 24, 25, -31, -104, -70, -47, -33, 11, -25, -12, -17, 48, -16, 39, 28, 8, 21, 32, 47, 46, 4, 20, -9, -61, -10, -20, -11, 4, -31, -1, 26, 25, 45, 49, 44, 16, 39, 2, 25, -4, -1, 38, 5, -25, 36, -19, 42, -2, 1, 18, 37, 32, -9, -6, 11, 15, 43, 16, -7, -8, 49, 38, 15, 18, -17, 36, 23, 43, 18, 39, 16, 23, 35, -6, 18, 15, 40, 5, 10, 11, 50, -8, 11, 10, -12, -4, 27, 5, 18, 6, 12, -24, 20, -10, -23, -19, -19, 20, -12, 8, 10, -11, -6, -13, -42, 23, 6, -3, -34, 25, 18, 23, -36, -14, 23, -12, -10, -31, -15, -7, 14, -11, 0, 15, 8, 19, -1, 14, -5, -4, -3, 6, 30, 22, -4, 14, -18, 46, 31, 7, 39, 26, -2, 49, 41, 31, 35, 34, -9, 41, 6, 28, 43, 26, 19, 52, -10, -22, -25, 3, -38, -47, -5, -46, -43, -29, -26, -17, -36, 37, -7, 22, -21, 24, 16, 30, -9, -26, -14, -19, -14, -59, -67, -2, -28, -99, -79, -45, -63, 19, 0, 49, 2, 54, 8, 37, 39, -1, 7, 20, 10, 53, 52, 64, 61, 45, 13, 30, 22, 23, -38, 12, 46, 32, 9, 35, 35, 42, 22, 5, 70, 28, 22, 99, 59, -3, 68, 30, 26, 33, 68, 46, -6, 42, -16, -6, 33, 28, 7, 2, 74, 35, 42, 39, 56, 57, 27, 33, 6, -7, -32, 36, 48, -10, 42, -5, 26, 20, 10, 3, 32, 38, 33, -12, 33, 0, 42, -2, 51, 5, 38, 53, 48, 25, 23, 40, 45, 15, 42, 17, 21, -5, 7, 50, 52, -2, -14, 52, 2, -3, -28, -42, 15, -11, -38, -36, -12, -39, 5, 22, -34, -16, -20, -13, -29, -1, -9, -3, 0, -17, -14, -40, 9, -1, -3, -4, -6, -5, -20, -13, -32, -17, -37, -42, -8, 22, 18, -1, 5, 24, 15, 5, -18, 37, 27, -13, 43, -1, -12, 11, 26, 29, -6, 40, 13, 7, 7, 1, -17, 
  -2, -48, -76, -71, -44, -51, -17, -9, -70, -1, -23, -20, -18, -44, -7, 7, -5, 16, -12, 20, 70, -39, -39, -10, -31, -40, -18, -59, -13, -35, 1, -30, -18, 35, 90, 71, 88, 78, 44, 88, 78, -23, -67, -11, -66, -61, -2, -37, -39, -5, -45, -60, -3, -21, 76, 64, 61, 12, 31, 34, 59, 46, 13, 10, -12, -6, 23, -24, -28, 12, -39, 27, 29, 9, 95, 56, 51, 10, 27, 74, 50, -16, 16, -41, 17, 8, 1, 22, -31, -25, 10, 12, -4, 26, 44, 43, 17, -1, -43, 29, 51, 29, 7, -37, 18, 7, 9, -3, -31, -10, -2, -1, -41, 32, 3, 49, -20, 10, -4, -10, 42, 24, 20, -37, 9, -4, 18, 18, -40, -31, -35, -31, 3, -39, -26, 0, 18, 2, 4, -14, 88, 39, 14, 32, 10, 13, 29, -15, 26, -17, 13, -17, -8, -12, 10, 20, 5, 9, 29, -9, 32, 41, 26, -18, 12, 21, -21, -2, -29, 28, -21, 31, -12, 5, 31, -32, -34, -6, 13, -19, 57, 31, 11, 19, 19, -25, 17, 20, -45, -3, -27, -44, -37, 18, -14, 9, -19, -17, -41, -14, 11, -66, -20, -28, -67, -61, -3, -21, -18, -6, -14, 52, 22, 46, 62, 61, 79, 63, 28, 71, 60, 9, -7, -5, -13, -52, 14, -34, 22, 2, 23, 28, 80, 102, 61, 104, 102, 112, 90, 127, 74, -24, -16, -29, -57, -54, -24, -41, -67, -32, -11, -28, -22, -49, 15, -17, 37, 14, 33, 31, 71, 91, 12, -6, -20, -8, -11, -30, 0, -36, 2, -41, -35, -12, -35, -28, -3, 18, -28, 26, 70, -22, 2, -12, -19, -24, -43, 22, -37, 14, 16, -21, -8, -32, 9, 42, 2, -59, -23, -32, 26, 81, -25, 8, -2, -12, -25, 15, -16, 4, 2, 23, 24, -18, -16, -11, -37, 15, 7, -41, 46, -22, -40, 18, -13, -45, 20, 16, 8, -26, 8, -14, -14, -14, 21, 19, -31, -38, -26, -39, 76, 32, 11, 12, 24, 27, 33, -9, 33, -9, -19, -1, 32, 0, 17, 15, -15, 21, -21, -23, 93, 22, -10, 5, 7, -8, -32, 29, -11, 28, -8, -9, 12, -17, -22, 29, 11, 27, 19, 5, 60, 2, -28, -35, -27, -42, -7, 4, -13, 22, 16, 5, 10, -13, 16, 13, -37, -33, -33, -1, 
  12, -38, -38, 6, -28, 5, 7, -29, 10, 15, 23, -10, 2, -35, -12, -34, -38, 23, 7, -15, 2, -5, 4, 12, 26, 33, -17, 33, -31, 22, 4, -15, -20, -16, -28, -17, -30, -9, -32, -31, 8, -27, 21, 34, 20, -29, 9, 8, -26, 34, 17, -25, 27, 2, 2, 12, 1, 20, 2, -18, 3, -28, -14, -10, 28, -6, 15, -6, 24, -4, 4, -22, -8, 7, -12, 31, -11, 14, 22, -20, -15, 32, 49, -11, 40, 9, 21, 37, 45, 49, 21, 44, 5, 18, 39, -9, 49, 27, 34, 4, 5, 29, 22, 29, 29, 22, 35, -8, 7, 28, -7, 17, 26, 18, 40, 27, 40, 38, 14, -13, -1, 13, 31, -25, 2, -27, -29, 36, 21, -4, 21, -12, -7, 6, -17, 9, 7, -14, -3, 24, -10, -26, 26, -24, 1, 24, 24, -20, -4, -3, -9, 38, 4, -12, 9, 38, 18, -18, -16, 23, -41, -2, -26, 18, -35, 3, -2, -4, 7, 23, -20, 6, 12, 27, 30, -8, 20, 9, -19, -37, -40, 17, 12, -13, -40, -22, -16, 14, -11, 18, -22, 17, 12, -29, -41, 9, 6, 9, -16, -27, -6, 0, 11, 16, -33, -11, -20, -26, -1, 9, -21, -12, -26, 12, 15, -8, 23, -27, 16, -37, 11, -18, 20, 11, -7, 20, 15, -23, 14, 1, -19, 26, 10, -21, -20, 23, -5, 11, -24, -20, -21, -15, 29, 2, -10, 7, -14, 6, -32, -1, 31, 21, -34, 20, -10, -21, -6, 19, 9, 3, -41, -12, 14, 0, 15, -12, 26, -8, 8, -16, -30, 25, -25, 18, 18, -3, -18, 32, -12, -7, -26, 10, 49, 47, 52, -5, 16, 12, 7, 18, 6, 41, 16, -8, 40, 40, 2, 49, 22, -9, -32, 22, 38, -1, -4, 27, 6, -7, -3, 47, 48, 20, 15, 31, 7, 47, 41, 26, 10, 0, -39, 27, -6, -8, 13, 18, -12, -25, 5, 34, -10, -27, 12, -3, -15, 18, -21, 24, 31, -17, 10, -2, 40, 26, 14, -1, -20, -12, 35, 34, 29, 41, 5, -1, -21, -12, -21, 25, 8, -23, 7, 5, -18, -31, -7, 29, -9, -32, -33, -13, 23, -4, -15, 12, 23, 22, -17, 13, -6, -34, -15, -6, -28, 12, 0, 20, -8, -6, 14, 10, -30, -9, -14, 5, 0, 21, -20, 23, -7, -43, 
  12, -28, 0, 1, 1, -27, -25, -7, 35, 26, 29, 47, 40, 64, 68, 56, 66, 58, 33, 14, 20, 5, -14, 3, 5, -44, -28, 30, 48, 27, 51, 42, 56, 80, 74, 97, 89, 52, 63, 105, 76, 10, -13, -21, -61, 3, -61, -61, -21, -41, -55, -42, -33, 17, 62, 56, 41, -2, 25, 12, 70, 80, 11, -38, -22, -19, -41, 16, 18, -34, -41, 11, 10, 17, 2, 55, -6, -23, -2, 14, 29, -19, 16, 25, -11, -18, -22, 24, -23, 8, -15, -7, 33, 54, 39, 26, -16, 7, 17, 24, 56, 99, -12, -20, 6, 2, 1, 34, -14, 22, 28, 18, 41, 37, -8, -3, -4, 29, 14, -6, 30, 16, 29, 7, 43, 1, 2, 42, 38, -17, -4, 6, -9, 18, -8, 27, 20, -2, 5, -15, 49, -12, 5, -31, -15, -31, -2, -30, 20, 12, -31, 33, 7, 2, -28, -27, 9, -10, -18, -29, 59, -12, -33, -29, -8, -15, 20, 21, -37, 12, -29, 8, -17, -24, -11, 13, 6, 2, -12, 19, 56, 19, -4, -9, -35, -21, -17, -36, 14, -24, 17, -17, 16, -14, -1, 2, -36, 13, -12, -21, 27, -53, 2, -26, -34, -44, -17, -33, -28, 7, 8, 29, 17, 31, 12, 26, 44, 11, 64, 58, 57, -31, -60, -34, -31, -34, -15, -32, 9, -17, 7, 6, 44, 41, 93, 59, 52, 27, 25, 57, 50, 11, -59, -43, -19, -44, -56, -57, -61, -18, -45, -9, 14, 35, 69, 44, 76, 34, -3, 33, 80, 86, -43, -25, -32, -15, -25, 16, -19, -1, -43, 11, 32, 32, 88, 85, 20, -1, 16, 93, 84, 45, 7, 13, -3, -15, -19, 1, -23, -19, -29, 11, -24, 13, 53, 20, 12, -11, 1, 29, 49, 82, 33, -13, 2, -21, -20, 15, 7, 9, -25, 17, 15, 49, 50, 28, -2, 28, -20, -21, 27, 70, 29, 44, 34, 5, -5, 4, 18, -1, -12, 46, -18, 22, 32, 29, 53, 18, -18, 16, 58, 40, -8, -16, -30, 22, -8, -16, 20, -27, 30, -18, 13, 22, -9, 32, 12, -8, -26, -14, 30, 19, -27, -13, 26, -37, -14, -30, -30, -4, 3, -28, -36, 1, -4, -18, 3, -8, -4, -22, 53, -22, -11, -17, 15, 19, -20, 23, 3, 0, 1, -40, 0, -35, -40, 13, -15, -32, -24, 1, 
  84, 50, 33, 55, 45, 18, 50, 18, -39, -61, -56, -85, -89, -70, -2, -73, -72, -36, -72, -69, 72, 6, 11, 48, 24, 5, -12, -37, -38, -12, -43, -36, -65, -42, 36, -78, -76, -18, -75, -81, 80, -4, 11, 52, 22, 21, 55, 2, 3, 33, 37, 22, 33, 43, 97, 101, 80, 25, 55, 59, 40, -32, -4, 32, -23, -17, 2, -15, -13, 26, 31, 40, 27, 53, 86, 48, 38, 63, 52, 75, 46, 28, 29, 36, 38, -19, 10, 46, 14, 4, 37, 5, 43, 34, 38, 23, 59, 30, -15, 49, 72, -38, 47, 45, 1, 28, 21, 39, -14, 29, 39, -14, 9, 9, -2, 62, 68, 23, -6, 15, 51, 59, 11, 43, 2, 14, -13, 17, 37, 36, 51, 7, 45, 27, 35, 25, 38, -4, 19, 43, 14, 18, -37, -29, 25, -18, 4, 24, 24, -14, 23, -5, -11, 6, -16, -35, -10, 2, -39, 27, 27, -13, 28, -4, 23, 11, 8, 6, 9, -1, 15, 31, -25, 25, 28, 9, -1, -8, 25, -19, 71, 12, 33, -11, -1, -7, 5, 27, 30, 41, 11, 41, 37, 21, 42, 48, 30, 51, 9, 16, 47, 83, 67, 22, 34, 32, 57, 54, 83, 99, 122, 122, 100, 124, 86, 69, 88, 120, 112, 80, 37, 74, 57, 22, 50, 28, 61, 44, 54, 66, 79, 101, 59, 47, -46, 80, 58, 75, 76, 63, 61, 70, 62, 14, 46, 29, 56, 13, 12, 60, 5, 48, 38, -68, -109, -78, -70, -28, 28, -40, 27, 32, -4, 25, -12, 19, -2, 13, 39, 19, 4, -55, -30, -73, -71, -54, -9, -46, -39, -99, 28, -17, 13, 37, -18, 1, 47, 17, 22, 11, 28, -32, -11, -11, -48, -9, 5, 26, -13, 33, 79, 41, -12, 49, 15, 39, 43, -2, 37, 32, 49, 47, 27, -25, -14, -11, 3, 0, 33, 30, 68, 21, 24, 18, 36, 21, 49, 15, 50, 7, 42, 48, 40, 2, -13, -22, 23, 6, 48, 24, 19, 0, -12, -21, 2, 1, 7, -36, -2, -13, 24, -26, -31, 26, -35, 8, -9, 10, -18, -8, 66, -15, 26, 4, 1, -28, -17, -13, 29, 19, -29, -6, 30, 23, 30, 6, 15, 3, 13, -3, 49, 29, 28, 3, 37, 3, 35, 28, 21, -2, 12, 12, -1, 1, 18, 35, 3, 10, 13, -7, 
  -6, 18, 38, 3, 19, 8, 26, 10, -9, 14, 3, 42, 7, 12, -17, -25, 11, 29, -3, 23, -16, 36, 40, 4, 10, 5, 27, 14, 25, 59, 49, 37, -23, -27, -37, -48, -75, -59, -17, -63, 34, 59, 41, 28, 43, 55, 29, 14, 60, 37, 55, 11, 17, 54, -5, 9, -25, -14, 18, 7, -7, -45, 31, 26, 47, 26, 2, 33, 45, 21, 26, 42, -20, 17, -29, -3, 16, -17, -2, -29, -19, 43, 11, 20, -17, 22, -16, -17, -35, 15, 16, -9, 22, 6, -44, -17, -30, -33, 8, 13, -32, -84, -38, -17, -26, -10, -5, 24, 17, -25, 26, -15, 8, -8, 5, -29, 0, -24, -39, 21, -12, -32, -19, -7, -22, -12, 25, 7, 1, -19, 0, 9, -41, -7, -24, 2, -14, -41, 14, -25, 3, -10, 1, -23, 21, 16, 5, 32, 19, 16, -35, -32, 29, -16, 27, -1, -4, 15, -28, -12, -26, 55, 43, -14, -8, -9, 3, 40, -14, 30, 28, 3, 33, -2, -19, 33, 19, -16, 32, 13, -2, 4, 4, 19, 2, 34, -15, 2, -9, -26, 16, -8, -20, -1, -24, -6, 35, 17, 25, -2, 24, -8, -8, 38, 33, 39, 7, 39, 31, -14, 24, -8, 5, 26, 24, -29, -14, 22, -16, -30, -10, 7, 37, 26, 25, 59, 37, 56, 4, 44, 12, 36, 9, -36, -19, -2, -25, -75, -47, -79, 24, 60, 64, 23, 4, 63, 3, 60, 51, 27, 29, 18, 12, 35, -10, -17, -13, -8, 29, -34, 0, -20, 0, 22, 12, 1, 11, 16, -8, 6, -7, 20, -5, 23, -15, -16, -24, 5, 25, -71, 16, 49, -11, -40, -19, -31, -35, -2, -32, -11, 8, 8, 7, 4, -11, -1, -12, 12, -10, -37, 16, -3, -36, -30, -29, 5, -13, -9, -35, -15, -22, 20, -17, 18, 2, 3, 0, -21, -41, -40, -3, -9, -1, -6, -29, -34, -19, 25, -23, -24, -11, -18, -22, -29, 21, 8, -36, -21, -15, -20, 20, 0, -28, 29, -28, -9, -2, 12, -11, 26, -23, -21, -4, -14, 0, 10, -13, 15, 7, 32, -12, -7, 8, 9, -4, -14, 22, 11, 28, -17, -14, 17, 6, 39, -16, -14, 14, 21, -12, -13, -19, -11, 12, 14, -22, -19, 16, -3, -25, 15, 4, -25, 19, -1, -10, -5, 37, 2, -11, -14, 
  56, 42, 38, 28, 16, 29, 36, 59, 53, 80, 64, 76, 73, 120, 84, 85, 105, 63, 60, 66, 9, 68, 85, 121, 97, 43, 33, 84, 38, 75, 37, 61, 30, 31, -76, 14, -54, -36, 57, -50, 22, 35, 17, 42, 78, 19, 47, 26, 75, 60, 44, 79, 12, -63, -111, -86, -86, -68, -13, -108, 18, -26, -17, 8, -7, -15, 13, -5, -12, 44, 17, 19, -13, 10, -90, -59, -17, -8, -67, -75, 35, 55, -1, 45, 31, -8, 5, 46, 20, 20, 7, 45, 1, 41, 5, 31, 30, 23, 15, 49, 46, 15, 35, -2, -2, 1, 26, 26, 46, 29, 5, 20, -6, 1, 50, -13, 0, 10, -8, 22, 5, 31, 29, 48, 37, 1, -7, 55, -1, 35, 54, 8, 22, 41, -11, -9, 3, 41, 6, 22, 44, -34, -21, -33, 3, 15, 29, 10, 22, -23, -21, 25, -22, -8, -30, -17, 24, 29, -7, 4, 4, -7, 3, -12, -17, -5, 14, -5, 20, 8, -30, 21, 29, -32, 16, 10, 25, -14, -15, 5, -7, 28, 51, 38, 14, 52, 30, 18, 16, 44, 24, 30, 41, 44, 8, 32, 16, 13, 17, 27, 69, 68, 31, 47, 54, 61, 16, 2, 28, -26, 16, -26, 0, -5, -20, -5, -68, -4, -65, -6, -7, -78, 65, 85, 84, 76, 30, -17, -47, -85, -62, -60, -80, -57, 13, -88, -99, -63, -98, -97, 46, 45, 34, 38, 61, 69, 21, 34, 71, 40, 33, 40, 15, 99, 77, 47, -18, 34, -24, 18, 26, 1, -9, 25, -2, 41, 2, 45, 8, -6, 16, 69, 73, 32, 77, 54, 49, 65, 10, 7, 27, 50, 41, 10, 24, 50, 9, 5, 39, -8, 36, 51, -12, 10, 74, 18, 28, 22, -11, 24, 5, 19, 11, 50, 14, -7, -10, 26, -10, 37, 50, 9, 16, 29, 8, 43, 17, -7, 25, 47, 48, 53, -12, -6, 19, 53, -2, 43, 49, 42, 44, 45, 46, 10, 30, 30, 41, 41, 45, 46, -6, -13, 4, 31, -2, -20, -17, -29, 26, -8, 22, -20, -2, -28, 4, -25, -4, -31, -32, 20, -3, -43, 21, -25, -6, -12, 31, 1, -14, 20, 17, -19, 3, -35, 6, -24, 18, 26, 18, 11, 16, 4, 4, 20, 11, 5, 31, 26, 34, 10, 2, 31, 49, -4, 16, 39, 60, 53, 11, 17, 
  59, 56, 62, 12, 33, 79, 76, 50, 68, 63, 65, 54, 106, 85, 106, 71, 104, 80, 100, 96, 15, 50, -3, 53, 39, 70, 69, 20, 24, 58, 49, 91, 79, 61, 10, 39, 91, 92, 88, 62, 37, 21, 2, 20, 15, 16, -10, 30, 31, 45, 5, 51, -17, -45, -101, -52, -58, -45, -12, -7, 10, 46, 15, 28, 37, 8, -20, 25, 27, 33, -15, -20, -31, -74, -114, -83, -18, 2, -40, -72, 47, -20, 8, 17, 4, -4, -19, -8, -17, 13, 5, -12, 6, 3, -53, -31, 1, -41, 40, 4, 62, 89, 11, 17, -5, 21, -14, 25, 16, 29, 35, 0, 13, -8, -28, -27, -14, 6, 45, 21, 20, 7, -7, 34, 7, 6, 13, 42, 48, 40, 12, 14, 38, 17, 45, 29, 6, 39, 26, 23, 41, 31, -15, 27, -15, 30, 8, -14, 4, 17, -4, 33, 11, 1, -2, 18, 5, 26, -15, -20, 22, 20, 3, -4, 23, -5, 31, 20, -21, 8, -5, 8, 28, 4, 19, -4, 22, -22, -13, 14, 42, 34, 46, 51, 6, 41, -6, 32, 36, 0, 22, 49, 7, 39, 31, 6, 52, 13, 2, 12, 26, 47, 3, 8, 43, 9, 7, -40, -67, -71, -87, -59, -79, -65, -29, -59, -79, -59, -36, -46, 13, -24, 1, -43, 15, -29, -14, -71, -71, -36, -75, -99, -37, -43, 66, 9, -52, -7, -82, -33, 50, -6, 39, 40, 50, 52, 0, -2, 32, 2, 12, 17, 18, 77, 78, 71, 66, 60, 30, 18, 18, 27, 24, 11, 11, -18, 7, 18, 5, -5, 46, 52, 75, 79, 117, 59, 66, 73, 61, 72, 34, 29, 39, 28, -4, -14, 19, -19, 16, -10, -22, 80, 15, 28, 76, 45, 36, 55, 27, 28, 49, -4, -13, -21, 27, 30, 3, 8, 17, 27, -19, 1, -8, 25, 15, 47, 16, 38, -20, -2, 18, 62, 8, -3, 13, -7, -5, 42, 31, -11, -13, 11, -9, 33, 32, 37, 11, -10, -3, 11, 17, -18, 14, 6, 6, -28, -6, 27, -13, 21, 5, 41, 17, -21, -2, 35, -14, 19, -16, -1, 47, 2, 32, 31, -2, -26, 24, 16, -32, -5, 8, -16, 15, -8, 15, -18, -7, -19, 29, 35, 57, 11, 4, 37, 8, 28, 6, 3, -5, 53, 46, 39, 35, 4, 43, 49, 1, 12, 48, 49, 
  7, -4, -7, -5, -11, -29, -32, 12, -8, -27, -15, 19, -11, -40, -43, 8, -27, -20, -24, 11, 3, 7, -21, 8, -16, 24, 24, 21, 2, 13, 11, -8, -27, -16, -28, 15, -39, -5, -1, -5, -16, -36, -31, -10, 21, -29, -31, -3, -15, -21, -25, 2, -33, -4, -26, -41, -31, -22, 15, 7, -29, 14, -6, 3, -30, 33, -9, -28, -5, -33, 4, 17, 33, 22, 6, 13, -35, 4, -28, 22, -10, 7, 1, 1, 13, 21, -8, 8, -28, -16, 6, 12, -7, 25, -41, -33, -18, -4, -20, -29, -28, -43, -6, -34, 22, 28, -19, -34, 2, -19, 19, -12, 11, 4, 30, -30, 13, -4, 5, -30, 19, -16, -25, 30, -8, -23, -30, 7, -6, 11, 4, -18, -13, 16, 27, 9, 2, 26, 19, -11, -6, -12, -17, -31, 5, 11, -23, -33, -19, 18, 23, -9, 7, -20, -18, 18, 2, 21, -4, 18, -42, 3, -29, -6, 18, -34, -6, 27, -23, 31, -24, 17, -8, 31, 34, 28, 5, -22, 19, -9, -39, -45, -8, 32, 23, -30, -30, -15, -18, -25, -18, -22, 10, -2, 32, -33, -18, -33, -23, -16, 8, 10, -19, -15, -25, -19, -34, -36, 18, 21, -4, -20, -29, 3, -33, -6, 8, -17, 1, 8, 15, 7, -22, -33, -33, -29, -9, -42, -39, -20, -12, -37, -26, -33, -40, -41, -33, 19, 20, 21, -11, -31, 17, 32, 31, -4, -7, -30, -11, -17, 24, 23, 20, -19, 34, -3, -38, 10, -43, 19, 16, -8, 31, -28, -32, -24, 11, -11, -14, 24, 31, -32, -9, 17, -23, 29, -16, 22, 22, -21, -28, 12, -9, 19, -10, 21, -10, -8, -33, -13, -15, -12, -29, 7, -31, -7, 25, 26, 29, 16, -15, 14, 16, -21, -29, 24, -19, -18, -6, -22, 28, -32, 10, -8, 14, 28, -33, -31, -16, -33, -42, -12, -16, -32, 22, 16, 29, -17, -3, 18, 23, 24, -3, 0, -30, -33, 30, 17, -19, 13, -8, 7, -6, -30, 29, -24, -14, -7, -15, -12, -20, 7, 5, -5, -22, 33, -11, -23, 3, 7, -37, -44, -7, -8, 1, 32, -22, 27, -5, -27, 14, 13, 4, -19, -24, 10, -13, 8, 10, 17, -30, -14, 30, 4, -14, -16, -17, -11, 21, 28, 12, -6, -1, 21, 30, -29, 7, 0, -1, 31, 
  -28, 25, 27, 30, -2, -20, -27, 10, -13, 31, -18, 7, -21, -12, 9, -34, 16, 20, -24, -24, -4, 10, 34, 31, -13, -7, -28, 27, -25, -11, 34, -9, -6, -17, 29, -1, 33, -5, -4, -33, -25, -20, 23, 3, 8, 23, -19, 9, 24, -10, 8, 13, 33, 34, -24, -14, -33, 25, 3, 19, 29, 21, -31, -16, 16, -32, -14, -4, 10, -13, 19, -4, 28, -7, -6, -30, -32, -14, 16, -26, 0, 0, 25, -4, 26, -23, 15, 30, 26, -6, 29, -25, 5, 16, -24, 31, -5, -2, 25, -20, 17, 12, -17, -30, -11, -24, -26, -7, -13, 29, 16, -6, 10, -1, 7, -9, 26, 2, 24, -24, -1, 11, 6, 30, -17, 21, 10, 0, 2, -25, 5, 5, 25, -27, -3, 14, 18, -10, -30, -31, -14, 19, -9, -23, 18, 27, -26, -25, -17, -29, 27, 19, -11, 9, -11, -18, 31, -1, 15, 26, -17, -30, -12, 17, -26, -12, -12, 31, 2, -31, 29, -26, -5, 7, 27, 26, -1, -3, -31, -33, 4, -19, 21, 10, -18, -33, -16, -16, 16, -25, -17, -31, -13, 10, 30, -27, 26, -23, 14, -14, -7, -33, 18, -33, 7, 1, -33, -25, -30, -29, -2, 3, -7, -33, -13, 22, 0, -6, 26, -27, 2, -10, -18, -11, 1, -34, 11, 12, 30, 6, 15, -18, -3, 30, 2, -7, -28, 26, 21, -33, -15, 4, -5, 28, 5, -14, -2, -29, 14, -34, 17, 12, -28, 5, 16, 13, -26, 18, 13, -18, 27, 22, -19, -28, 33, 6, -13, -25, -6, 28, 18, 29, -2, 7, 31, 7, 33, 13, -5, 29, -21, 11, -9, -3, 14, 2, 26, 33, 27, -2, -10, -15, -21, 16, -34, 31, -5, -4, 15, 17, -11, -30, 7, -11, 7, 17, 12, -2, 25, -6, 9, 4, 13, 11, -17, -2, -10, 34, 12, -24, -22, -32, -26, -22, -9, 30, 17, 29, -5, -5, 26, 34, -33, -27, 11, -8, 6, -19, 27, 6, 32, -17, 32, 31, -13, 11, 5, 11, 14, -12, -33, 17, 5, -21, -17, 8, 0, 14, -21, 22, -3, 6, 6, -19, -32, 3, -3, -8, 11, 22, -24, 32, 17, -29, -12, 30, -29, -12, 18, 3, 15, -21, -19, -33, 16, -5, -10, 7, 8, 32, 14, 5, 30, -30, -22, -2, 30, 5, 10, -2, 
  24, -18, -29, 18, 6, -27, -33, 21, -30, 11, -2, 3, -34, -40, -42, 0, 11, -28, -34, -22, -9, -24, 0, -18, -27, -29, 6, 19, -27, 24, 20, -12, 24, -10, -36, 15, 0, -25, 7, -27, -35, -12, -6, 33, -22, -10, 14, 19, -26, -31, 13, 0, -31, -29, 13, -19, -37, -26, 25, -30, 11, -15, 17, 2, 15, -7, 21, 18, 21, -22, -22, 28, 4, -9, -28, 0, -5, -5, -30, 30, 0, 1, 7, 29, 21, 15, -18, -2, 21, -21, -8, 16, -6, -32, 8, 1, 26, -16, -10, 3, -23, 12, 12, 29, -16, -15, -10, -8, 29, 3, -13, -14, -24, -32, 10, 16, 31, 33, -24, -1, -27, -28, 12, 32, 34, 28, -19, -17, 8, 24, 16, -5, 30, -17, -30, 25, -10, -16, -23, -1, 3, -41, -21, -19, 20, -10, -13, -8, -29, 28, -17, 7, 34, -9, -20, 28, -27, 9, -7, 32, 7, -36, 19, -30, -20, -26, 16, 17, -5, 17, -4, 15, 20, -14, 27, -14, 20, 31, -5, -17, -14, -4, -28, 8, -21, 14, 21, 14, -2, -24, 16, 28, 13, 0, -19, -14, -14, 26, 32, -28, 19, 3, 7, 12, -12, -11, -23, -23, -22, 0, -10, -2, -35, 19, 8, -25, 25, -19, -12, 9, 3, -22, -17, 24, 20, 9, -12, -1, -30, 0, -15, -39, 9, -39, 2, 24, -38, -6, -10, -6, 14, -17, 0, 6, -9, -8, 29, -24, 20, 24, 10, -19, 6, -12, -16, -17, 22, 9, -21, -20, 3, 23, 24, 2, 20, 25, -15, 21, -17, 25, -23, -2, 29, -4, 0, -2, 25, 17, -7, 18, -16, -34, 3, -24, -6, -15, -13, 1, 9, 23, -2, -18, 33, 3, -27, 12, -40, 23, 18, -12, -20, -15, -31, -2, -9, 22, 15, 3, 7, 4, -18, -34, 8, -8, -27, -31, 25, 20, -18, -21, -11, 7, -34, -1, 9, -31, 26, 3, 26, -8, 19, 12, 22, 1, -24, -22, 24, 12, 30, -21, -38, -19, 2, -11, -19, 3, -24, -23, 22, -23, 3, -15, -15, -8, 16, 10, -12, 7, -4, 1, 20, -34, -12, 2, -7, -16, -28, 28, -7, 6, 19, -9, 20, -29, -15, -14, 9, 10, 33, -33, -20, 3, 2, -25, 21, 2, -34, -18, -13, -13, -14, -18, 28, -11, -10, -19, -25, -5, 2, 13, 
  29, 16, 31, 51, 17, 21, 55, 41, 49, 34, 56, 49, 45, -18, 27, 22, 5, 7, -18, 4, -5, -12, 43, 13, 51, 21, 4, -11, 25, 7, -2, 2, -61, -62, -63, -30, -79, -74, -81, -80, 5, -3, 55, 38, 42, 12, 44, 41, 37, 64, 47, 39, 28, 40, -6, -9, -16, 5, -25, -22, -37, 1, -5, 26, 14, 27, 22, 25, 33, -2, 34, 38, 3, -4, 49, 46, 3, 50, -4, -10, 11, 41, 33, 9, -6, 7, 48, 33, -18, 42, -5, 28, 20, 6, 39, 27, 33, 26, -15, 25, 7, -54, 41, 17, 50, -13, -14, 15, 48, 36, 14, 6, 32, -12, 52, -10, -1, 46, 28, 41, 3, -4, 47, 54, 36, 16, 40, 47, 43, 10, 41, 9, 25, -10, 34, 22, 10, -8, 54, -8, -5, 5, -5, 8, -28, -38, -15, 16, -22, -11, 25, 2, -7, 7, -20, -11, 5, -6, -38, -23, 16, -18, -16, -27, -16, 9, 2, -10, 0, -17, -30, -12, -2, -22, 1, -7, 15, 5, 7, -6, 18, 40, 11, 1, 28, 1, 31, 16, -9, 13, 21, 44, 3, 26, 38, 41, 28, 6, 24, -3, 66, 20, 77, 75, 68, 20, 39, 39, 75, 77, 78, 50, 26, 44, 38, 84, 59, 75, 60, 80, 41, -17, 56, 10, 24, 21, 57, 56, 11, 1, -6, 25, -5, -34, -75, -5, -49, -45, -40, -33, -1, 63, 36, 38, 8, 54, 56, 15, 64, 48, 28, 27, 5, 17, -62, -44, -6, -9, -13, -9, -10, -19, 15, 12, -2, -10, 15, 8, 26, 45, 8, -21, -8, 25, -77, -9, 9, 35, 18, -15, 3, 2, 39, -19, 19, 25, 28, 14, 40, 5, 26, 36, -8, 18, -36, 16, 26, 43, 18, 26, -2, 23, 43, 6, 26, 16, 11, 21, -1, 2, 17, 46, -13, -18, -13, 15, 29, 19, 8, 21, 8, 46, 50, 54, -8, 7, 33, 36, -13, 53, 15, 14, 37, 45, 46, 5, -6, 32, 37, 25, 12, -23, -33, 0, -5, 11, 12, -20, 6, -6, 8, 18, 9, 19, 17, 4, 0, 18, -16, 17, 1, -15, -19, 29, 4, -31, 1, -12, -5, -25, 17, 19, -17, 16, 18, -4, -38, -5, 27, -34, 23, 35, 33, -6, 16, 54, 1, 38, 45, 13, 29, 57, 54, -5, -6, 27, 31, 0, 11, 58, 
  -24, 24, 5, 19, -11, 12, 12, 20, -30, -33, -36, -14, -18, 3, -19, 0, -21, -32, 21, 4, -4, -24, -3, -16, -11, 16, 23, -15, -3, -23, 8, 13, 16, -25, 17, 20, -38, 7, 2, -9, -41, 0, -11, 14, -18, 27, 28, 7, -22, 1, -4, -17, -38, -10, 33, -26, 1, 16, 21, -39, -13, 2, 21, -31, -4, -34, -21, -9, 21, -32, -23, 16, 29, 20, -15, -3, 0, 30, -31, -6, -3, -40, -15, 11, -13, 3, -17, -29, -28, -7, 15, -27, 14, -18, 18, -13, -15, -16, 27, 7, -3, -27, 17, 10, -11, 31, 7, 7, -4, -21, 1, 18, -13, -8, 33, 7, -8, 10, -32, -16, 4, 8, -25, -13, -16, -23, -20, 8, 17, -5, -1, 24, -32, 1, 32, 17, -3, -22, 9, 8, -7, 7, 12, 31, 11, -16, -21, -18, 10, -29, 19, 27, -20, 31, -4, 11, -31, 31, 2, -30, -27, 18, -11, -20, 27, 27, -10, -8, -18, 1, 18, 30, -31, 1, -30, 21, -2, 21, -21, -14, -21, -3, 26, 16, 21, -11, -20, -4, 19, -6, -2, -23, 15, -12, -15, -24, -31, 30, -1, -9, 16, -4, -30, -14, 26, -25, -23, 6, -32, -40, -7, -1, -17, -15, -16, -40, 18, 9, 16, -18, -23, -19, -11, -24, 29, -26, -12, 11, -31, 6, 17, 6, -26, -40, 11, -27, 9, 19, -31, -39, -3, 11, -14, 13, 21, -10, -14, 1, -2, 9, 5, 3, -4, 2, -21, -6, -18, -15, -26, -13, -3, 9, 27, 19, 33, -17, -13, 26, -6, -22, 23, -32, 16, -26, 1, 5, 10, -1, -36, -39, 16, -38, 1, -17, -12, -27, -22, -18, -30, -32, 8, -20, 31, -23, -3, 0, -1, -12, 28, 30, -34, -8, -29, -20, -33, -31, -23, 18, 1, -10, -20, 13, 30, 22, 9, -35, 24, 2, -17, 0, -25, 12, 17, 10, 34, 10, 27, -28, 6, 3, -3, 9, -28, 25, -14, -4, -6, 9, -14, 13, -29, 0, -22, -33, -30, 6, 20, 16, -18, -9, 2, 25, 7, -12, 28, -9, 22, -7, -13, -23, 9, -33, 14, 34, -32, 2, 30, 23, 11, -6, 7, -11, -20, 25, -13, 30, 1, -6, -33, 21, -8, -25, -29, -33, 6, 29, -23, -20, -33, -15, -7, 15, -1, -1, 2, -4, -26, 27, -30, 32, 
  25, -19, -30, -32, -10, 3, -1, -10, 28, 69, 36, 19, 25, 79, 88, 97, 61, 76, 59, 65, -8, 31, -42, -49, -46, -48, 8, 2, 12, 61, 20, 84, 83, 99, 67, 86, 114, 80, 119, 71, 8, -22, -27, -45, -1, -19, -9, -21, -50, -62, -2, -12, -51, -18, -77, 0, -31, -39, -27, 32, 77, 31, 22, -11, -27, -32, -39, 7, -41, -32, -2, -5, 7, -64, -90, -54, -51, -3, -53, -4, 68, -39, -20, -41, -7, -1, 7, 24, -26, -20, 14, -7, -39, 15, -43, -30, -37, 7, 22, -35, 28, 92, -27, -11, -5, 8, 15, -1, -35, -3, -13, -5, -7, -8, 17, -56, -24, -9, 8, 8, 31, -36, -12, -41, -42, -6, -37, 16, -16, -32, -32, -13, 21, -38, 16, -35, -17, -12, -41, -27, 27, -2, 34, 39, 20, 28, 30, 19, -14, 5, 10, -23, -15, -8, 40, 41, 24, 3, 23, 38, 58, 27, 6, -7, 21, 14, -6, 11, 24, -4, 20, 3, 31, 25, -3, 32, -19, 3, -10, 27, 34, 25, 18, 5, 3, 7, -14, 14, -23, 17, -37, -37, 12, 12, -20, -30, 5, -24, -27, -28, 7, -69, -20, -52, -40, -38, -79, -14, -50, -80, -91, -88, -66, -83, -56, -46, -67, -85, -37, -17, 35, -48, 0, -54, -8, -17, -36, -69, -26, -59, -30, -76, -25, -27, 82, 55, 30, 4, 7, 75, 48, 4, -26, -28, -61, -62, -46, -11, -6, -52, -51, -18, 4, 23, 76, 80, 85, 16, 31, 39, 30, 51, 6, -14, -11, 3, 19, 14, -6, 11, -18, 58, 31, 30, 61, 31, 45, 19, 17, 73, 37, -5, -39, -15, -28, 23, 5, -12, 16, -14, 14, 31, -37, -18, 48, -19, -23, -21, -7, -22, 52, -5, -3, 22, -42, -35, -2, 19, -38, 8, -18, 22, 3, -20, 27, -8, -8, -8, 1, -30, 52, 46, 7, 7, 22, -31, 19, -24, -34, 4, -36, -25, -43, -12, 1, 38, 11, -9, -21, -28, 21, 34, 12, -20, 23, 10, 21, 42, 6, 29, 23, 12, -21, 20, 8, 39, -12, -7, -22, -16, 62, 17, 13, -10, 16, -4, 20, 0, 4, -22, 6, -22, -27, 8, 27, 23, -27, 38, 2, -7, 17, -8, -45, -22, -16, 10, 1, 22, 11, -44, -33, 10, -34, -14, 4, 2, -30, -13, -8, -1, 
  57, -36, -59, -69, -79, -40, -55, -50, -7, -30, -13, -7, -14, 3, -4, -19, -12, 27, 41, 8, 7, -8, 0, -18, -19, -4, -13, -40, -43, 10, -46, -10, 55, 53, 80, 103, 113, 97, 84, 75, 29, -27, -60, -45, -7, -61, -60, -61, -59, -45, -63, -29, -19, -11, 89, 28, 67, 52, -25, 53, 19, 73, -30, -15, -36, 3, -10, 3, -35, -31, 23, -14, 22, 19, 112, 51, 41, 39, 33, 106, 59, -39, -41, -30, -38, -17, -2, -6, -44, 7, 19, -25, 8, -1, 73, 37, 17, 25, -31, 25, 69, 62, -10, -12, -12, -5, 11, 10, -12, -8, -39, -28, -35, 59, 50, 38, 24, -22, 12, -25, 79, 36, -50, -11, -41, -52, 0, -19, -44, -17, -48, -36, -25, 30, -9, 14, 29, -13, -3, -17, 83, 47, 18, -18, -16, 42, 40, -19, 24, -21, -7, -19, -18, -23, 21, -6, 24, 5, 32, -4, 87, -17, 15, -20, -11, 2, -30, 25, 18, -17, 34, -28, 27, 14, 12, -9, -22, -12, 33, -12, 74, -30, 10, -10, -3, 6, -27, -37, -31, -1, 12, 15, -27, 20, -30, -24, -10, 8, -38, -19, 37, -72, -54, -17, -71, -68, -37, -48, -26, 28, 19, 7, -17, 13, -4, 18, 12, 57, 54, 70, 67, 4, -19, -59, -8, -60, -49, 20, 33, 49, 31, 67, 79, 57, 60, 111, 97, 107, 94, 98, 32, -54, -62, -56, -47, -63, -51, -41, -34, -59, -3, 3, -29, -30, 29, -25, 51, 43, 11, 49, 50, 56, -12, -41, -4, -21, 5, -39, 5, 0, -23, 16, -33, -53, 56, 9, 4, -17, -12, 76, 75, 26, -2, -44, 4, -28, 14, -22, 1, -19, -24, -18, -38, -8, -10, 33, -31, -29, -32, -43, 43, 83, -12, -21, -13, -16, -12, 2, -12, -26, -9, 23, -37, 25, 38, -5, 30, -10, -27, -27, 67, 37, 11, -46, -5, 5, -42, -54, -48, -50, -23, -7, -45, -25, 23, -2, -20, -25, -8, -45, 84, 30, 31, 11, 3, 12, 25, -17, -7, 13, 5, 30, 22, 19, 31, 37, 0, 11, -13, 5, 43, 34, 6, -27, -20, 22, -28, -29, -7, -3, 36, 34, -31, -20, 16, -6, 33, -28, -21, 27, 60, 14, -22, -25, -3, -34, -5, -27, 13, 12, 13, -8, -3, -14, 12, -26, 2, -21, 14, -14, 
  27, 53, 53, 64, 26, 9, 11, 49, 72, 31, 51, 25, 26, 56, 53, 7, 55, 3, 16, 4, 29, 8, 10, 54, 43, 3, 28, 12, 15, -1, 33, 32, -7, 12, -74, -62, -58, -45, -28, -66, 8, 15, 23, 39, 47, 35, 43, 58, 58, 31, 52, 56, 63, 54, 1, 29, -23, 14, -1, -1, -12, -20, -4, 18, 34, 43, 30, 8, -7, 2, 48, 10, 40, 8, -4, 5, 31, 28, 31, -18, 15, 58, 21, -15, -9, 16, 6, -7, -4, 36, 41, -7, 13, 22, -1, -16, 30, -9, 46, -6, -11, 2, 36, 5, -13, 49, -14, 30, 3, 12, 35, 38, 7, 27, 19, 19, -17, -12, 3, -12, -17, 35, 19, 10, -2, 43, 16, 16, -2, -8, 41, 31, 3, 9, -6, 49, -15, -2, 23, 43, -27, 3, 21, 23, -3, -19, -7, -21, -9, -10, -26, 23, -12, 3, -25, 4, -17, -29, -29, -8, -2, 11, 15, -34, -7, 1, -12, -28, -22, 28, -25, 20, -4, 17, -19, -24, -1, 14, -19, 3, 43, -12, 22, 1, 50, 21, 7, 41, 3, 41, 10, 26, 44, 35, -7, 7, 58, 18, -4, 42, 9, 32, 52, 64, 33, 45, 56, 6, 15, 54, 56, 38, 49, 12, 48, 7, 7, -6, 35, 35, 21, 50, 16, 0, 22, 66, 59, 17, 52, 13, 5, 17, 4, 5, -62, -41, -35, -80, -67, -66, 29, -3, 20, 67, 55, 7, 56, 17, 21, 8, 61, 7, 14, 19, 20, 39, 6, 6, 41, 16, -8, -22, 12, 48, 14, 5, 25, 24, 6, 29, 42, 19, 23, 12, -25, 4, 46, 26, 2, -25, -9, 25, 1, -18, -3, 5, -20, 24, 45, -6, 45, 27, 15, 28, 27, -21, 32, 48, 44, 12, -10, -24, 3, -14, -17, -12, 10, -16, 22, 49, 37, 26, 10, 27, 3, 27, 3, 37, 3, 32, 42, 24, -6, 32, 1, -7, 9, 39, 3, 10, 39, 4, 46, -1, 27, 16, 43, 28, 49, 51, -3, -11, 11, -14, -22, 1, -27, -19, -5, 7, -27, -10, 9, -1, -2, -26, -26, -23, -29, 26, 9, -19, 20, -28, 22, 0, -30, -18, -26, 16, -36, 27, -36, 4, 19, 6, -18, 23, -39, 19, 41, 55, 29, 19, 57, 26, 36, 13, 36, 5, 14, 20, -8, 34, 50, 51, 46, -2, -3, 41, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 16,400 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0035406386014074087, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,16 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0082433857023715973, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,16 } };
const TfArray<1, float> quant8_scale = { 1, { 0.02033267542719841, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.071943409740924835, } };
const TfArray<1, int> quant9_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};
#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, (TfLiteIntArray*)&inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata0)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, (TfLiteIntArray*)&inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata1)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, (TfLiteIntArray*)&inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata2)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, (TfLiteIntArray*)&inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, (TfLiteIntArray*)&inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&opdata0)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, (TfLiteIntArray*)&inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&opdata1)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, (TfLiteIntArray*)&inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&opdata2)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, (TfLiteIntArray*)&inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };



static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
if (registrations[used_ops[i]].init) {
       tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[used_ops[i]].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
