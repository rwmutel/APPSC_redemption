/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.01.2024 18:05:38

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1760;
#else
constexpr int kTensorArenaSize = 736;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,400 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0016237745294347405, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[3] = { -623, 891, -723, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00012820387200918049, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[3*16] = { 
  61, 1, 56, -97, 20, 67, 108, -33, -109, 101, 6, -85, 62, -78, 20, -31, 
  63, 79, -45, -75, -127, -4, -26, -107, -21, -67, -50, 96, 0, 39, -5, 94, 
  -102, -51, 106, 32, -105, -93, -101, -16, 106, 39, 114, -103, -76, 61, -4, -11, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 3,16 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0067708659917116165, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 3064, 3472, -508, 3189, 4110, 2070, 1211, 459, 983, 1684, 2496, 4705, 702, 0, -648, 4796, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 4.2158750147791579e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[16*16] = { 
  14, 82, 65, 88, -13, -29, -20, 63, 4, 18, 6, -36, -51, 62, 107, -95, 
  -82, 127, -5, 87, 57, -77, -59, -10, -46, -17, -30, -6, 55, 95, 104, 53, 
  36, -4, -19, 25, -37, -10, 55, 95, 74, 6, 54, 71, 46, -49, -26, 107, 
  77, -90, 47, -2, 88, 6, -27, 63, 9, -71, -24, 100, -3, -71, -84, 56, 
  28, -19, -58, 3, -105, -104, 60, 83, -56, -24, -34, -48, -25, 106, 58, 8, 
  -29, 68, 36, 78, -47, -84, -32, 125, -59, 40, -26, -39, 65, 114, -40, -28, 
  83, 12, 21, 69, -118, -27, 15, 56, 43, -58, 42, -93, -17, 49, 45, 26, 
  43, 38, 12, -55, -91, 104, 120, 79, 37, 63, 55, 96, 49, 76, 18, 78, 
  66, -110, 82, 54, 54, 4, 96, 37, -34, -49, -56, 87, 59, -71, -127, 107, 
  96, -51, 56, 87, -72, 71, 95, 103, -14, -32, -13, -49, 8, 92, -10, 37, 
  -21, -75, -26, 40, 41, -13, 76, 14, -74, -67, -19, 20, -36, -95, -90, 54, 
  -123, 95, -53, 108, 123, 13, -69, -84, -31, -48, 30, 31, 73, -74, 52, 27, 
  -44, 51, -66, 97, -58, -31, 76, 29, 44, -12, -63, -54, -65, 89, -43, -31, 
  9, -11, -22, -37, -78, 52, -43, -36, 49, 35, -38, 2, -81, -68, -43, -62, 
  41, -5, 47, -23, -37, 31, 0, -34, -16, 68, 65, 9, -2, 5, 45, -69, 
  -11, 112, -18, -14, 82, -37, -82, -13, 3, -13, 49, 10, 8, -79, 60, 32, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 16,16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0052361339330673218, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { 4741, 34885, -6344, 31340, 29884, -1632, 12958, 19501, -7804, 0, -5788, -4168, -5787, 25884, 32280, 8240, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<1, float> quant5_scale = { 1, { 5.1871593313990161e-06, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[16*400] = { 
  29, 44, 7, 65, 21, 57, 81, 21, 61, 64, 89, 91, 99, 85, 72, 45, 88, 101, 91, 97, 18, 7, 14, 73, 25, 70, 15, 66, 77, 50, 27, 88, 62, 80, -18, -23, -30, 5, 58, -20, 32, 53, 61, -3, 9, 4, 38, 3, 3, 49, 38, 21, 24, -38, -90, -68, -30, -21, 10, 0, -20, -6, 53, -18, 43, 31, 9, 23, 35, 52, 51, 5, 23, -10, -49, -10, -21, -13, 25, 4, -5, 10, 27, 50, 55, 49, 17, 44, 2, 28, -5, -1, 42, 6, -23, 23, -20, 46, -3, 2, 14, 33, 36, -10, -7, 12, 17, 48, 18, -7, -9, 55, 42, 17, 20, -17, 41, 26, 48, 20, 38, 22, 25, 38, -7, 19, 16, 44, 5, 11, 12, 55, -9, 12, 11, -11, -4, 29, 5, 20, 1, 16, -27, 21, -11, -25, -20, -21, 22, -13, 9, 10, -12, -7, -14, -46, 26, 7, -2, -37, 26, 22, 24, -41, -16, 26, -14, -11, -35, -17, -7, 16, -11, 0, 17, 9, 22, -1, 16, -5, -10, -5, 7, 33, 24, -5, 16, -20, 50, 35, 8, 44, 29, -2, 55, 45, 35, 38, 38, -10, 41, 7, 31, 48, 30, 23, 59, -8, -20, -20, 11, -32, -43, 5, -42, -37, -21, -21, -8, -30, 33, -3, 19, -28, 22, 12, 28, -15, -35, -5, -11, -7, -58, -54, -3, -11, -82, -68, -34, -59, 14, 2, 50, -2, 55, 4, 36, 38, -6, 3, 17, 2, 50, 46, 52, 66, 57, 7, 32, 16, 19, -36, 13, 51, 35, 10, 39, 38, 46, 25, 6, 67, 21, 13, 94, 60, -6, 73, 29, 24, 32, 56, 51, -7, 47, -18, -7, 37, 32, 7, 2, 71, 39, 43, 31, 61, 63, 29, 37, 7, -13, -22, 40, 54, -11, 47, -5, 29, 22, 11, 3, 36, 42, 37, -13, 24, -3, 47, -3, 57, 0, 43, 58, 53, 27, 25, 44, 49, 16, 46, 18, 23, -6, 7, 55, 54, -6, -16, 57, 2, -9, -29, -46, 17, -12, -41, -39, -13, -43, 7, 24, -38, -18, -22, -14, -31, 0, -10, -3, 1, -19, -13, -45, 9, 0, -3, -5, -7, -6, -21, -14, -36, -19, -41, -46, -8, 25, 20, -1, 6, 21, 27, 5, -20, 40, 30, -14, 47, -2, -13, 12, 28, 32, -7, 45, 15, 7, 8, 1, -19, 
  -3, -50, -82, -76, -46, -55, -17, -7, -74, 1, -21, -21, -16, -47, -8, 10, -2, 19, -11, 20, 77, -43, -38, -6, -30, -40, -15, -60, -9, -35, 5, -27, -19, 37, 77, 58, 72, 67, 38, 70, 85, -23, -70, -7, -68, -63, 2, -36, -39, -1, -45, -62, 0, -19, 67, 63, 49, 6, 36, 23, 62, 24, 14, 11, -14, -7, 26, -26, -31, 14, -44, 30, 32, 9, 92, 60, 55, 11, 16, 52, 52, 4, 18, -45, 19, 10, 2, 25, -34, -27, 12, 14, -4, 27, 44, 53, 18, -1, -47, 31, 54, 13, 8, -41, 20, 8, 10, -3, -35, -11, -2, -1, -46, 35, 3, 47, -24, 11, -5, -11, 43, 19, 23, -40, 11, -4, 21, 21, -44, -33, -37, -33, 4, -43, -29, -2, 19, 4, 6, -15, 95, 43, 15, 36, 11, 14, 31, -17, 29, -19, 14, -18, -9, -14, 11, 22, 5, 10, 31, -10, 30, 41, 30, -19, 13, 23, -23, -2, -32, 32, -23, 35, -14, 6, 34, -36, -37, -6, 14, -21, 60, 29, 13, 21, 22, -27, 19, 22, -49, -3, -30, -49, -41, 20, -15, 10, -21, -18, -45, -15, 12, -71, -20, -28, -72, -66, -1, -23, -20, -9, -18, 53, 19, 44, 65, 62, 81, 64, 24, 71, 67, 8, -3, -1, -10, -53, 21, -33, 28, 2, 26, 29, 81, 105, 49, 100, 90, 106, 86, 122, 81, -24, -13, -28, -58, -55, -22, -40, -69, -31, -7, -26, -20, -47, 17, -20, 25, 12, 39, 25, 76, 75, 13, -6, -22, -9, -12, -34, 0, -39, 3, -36, -30, 0, -38, -30, -2, 24, -29, 12, 74, -12, 3, -12, -20, -26, -47, 25, -40, 17, 19, -12, -9, -23, 18, 37, 3, -58, -24, -34, 26, 78, -28, 9, -3, -13, -28, 17, -18, 4, 2, 26, 27, -20, -18, -5, -40, 17, 8, -46, 47, -33, -43, 21, -13, -49, 23, 19, 10, -28, 10, -15, -14, -15, 25, 24, -32, -41, -28, -43, 81, 35, 13, 14, 25, 29, 36, -10, 36, -10, -21, -2, 35, 0, 19, 16, -17, 23, -24, -26, 97, 19, -10, 6, 6, -10, -36, 32, -12, 31, -9, -9, 13, -18, -24, 32, 11, 30, 20, 6, 64, -4, -30, -39, -29, -47, -8, 5, -14, 24, 18, 6, 12, -14, 18, 15, -41, -36, -37, -1, 
  14, -42, -42, 7, -31, 6, 8, -33, 11, 16, 25, -11, 2, -39, -13, -37, -42, 26, 7, -16, 2, -6, 5, 13, 29, 37, -19, 36, -34, 24, 5, -16, -22, -18, -31, -19, -33, -10, -36, -35, 9, -30, 23, 37, 22, -32, 10, 8, -29, 37, 19, -27, 30, 2, 2, 13, 1, 23, 3, -20, 3, -31, -16, -12, 31, -7, 17, -7, 27, -4, 4, -24, -9, 8, -13, 34, -12, 15, 24, -23, -16, 36, 54, -13, 45, 10, 23, 41, 50, 54, 24, 49, 6, 21, 43, -10, 54, 30, 38, 5, 6, 32, 25, 32, 32, 24, 39, -9, 8, 31, -8, 19, 28, 20, 44, 30, 45, 42, 16, -15, -1, 15, 36, -27, 3, -29, -31, 41, 24, -4, 24, -12, -6, 8, -18, 11, 9, -15, -2, 27, -11, -28, 29, -26, 1, 27, 26, -23, -4, -4, -10, 42, 4, -13, 10, 42, 20, -20, -18, 25, -45, -2, -29, 20, -39, 3, -2, -5, 8, 26, -22, 6, 13, 30, 33, -9, 23, 10, -21, -41, -44, 19, 14, -15, -44, -24, -17, 16, -12, 20, -24, 19, 13, -32, -45, 10, 6, 10, -17, -30, -7, 0, 12, 18, -36, -12, -22, -29, -1, 10, -24, -13, -29, 14, 16, -9, 25, -30, 18, -41, 12, -20, 22, 12, -8, 22, 16, -25, 15, 2, -21, 29, 11, -24, -22, 26, -5, 12, -26, -23, -23, -16, 32, 2, -11, 8, -15, 7, -36, -1, 34, 24, -38, 22, -11, -24, -6, 21, 10, 3, -46, -13, 15, 0, 16, -14, 28, -8, 8, -18, -33, 28, -28, 20, 20, -3, -20, 35, -13, -8, -29, 11, 55, 52, 58, -5, 17, 13, 8, 20, 6, 45, 17, -9, 45, 44, 3, 54, 25, -9, -35, 25, 43, -1, -4, 30, 6, -8, -3, 52, 53, 22, 17, 35, 8, 52, 45, 29, 12, 0, -43, 31, -6, -8, 16, 21, -13, -26, 7, 39, -10, -28, 14, -2, -15, 21, -22, 28, 35, -17, 11, -3, 45, 29, 15, -1, -23, -13, 39, 38, 32, 46, 6, -1, -23, -13, -23, 27, 8, -25, 8, 6, -20, -34, -7, 32, -10, -35, -36, -15, 25, -4, -17, 14, 25, 24, -18, 14, -7, -38, -17, -6, -31, 13, 0, 23, -9, -6, 16, 11, -34, -10, -15, 5, 0, 24, -22, 25, -8, -48, 
  9, -31, -1, 1, 1, -31, -29, -8, 37, 26, 31, 47, 41, 65, 70, 57, 69, 59, 31, 9, 20, 4, -11, 8, 10, -44, -27, 37, 56, 32, 59, 47, 59, 84, 69, 94, 81, 45, 61, 101, 82, 12, -10, -19, -64, 7, -63, -63, -19, -41, -56, -43, -33, 22, 64, 57, 29, -6, 29, 8, 73, 62, 12, -42, -24, -21, -45, 18, 20, -37, -46, 12, 11, 18, -2, 60, -7, -26, 3, 7, 27, -5, 18, 27, -12, -20, -24, 27, -26, 10, -17, -8, 37, 58, 43, 25, -18, 8, 20, 27, 58, 90, -13, -22, 7, 2, 1, 37, -15, 25, 32, 20, 46, 41, -9, -3, -5, 33, 16, -6, 29, 8, 34, 10, 50, 4, 4, 48, 44, -17, -2, 9, -8, 22, -8, 31, 24, -1, 8, -15, 49, -14, 5, -35, -17, -35, -4, -34, 22, 13, -35, 36, 7, 1, -32, -31, 10, -11, -21, -32, 60, -19, -37, -32, -10, -18, 21, 23, -41, 13, -33, 9, -19, -27, -12, 14, 6, 2, -14, 21, 58, 14, -5, -10, -39, -23, -19, -40, 15, -27, 19, -19, 18, -16, -1, 3, -40, 14, -14, -23, 27, -60, 3, -29, -38, -50, -19, -38, -33, 5, 7, 29, 14, 30, 10, 26, 46, 8, 67, 59, 61, -35, -62, -33, -30, -34, -12, -31, 13, -15, 11, 9, 46, 44, 89, 57, 45, 19, 21, 50, 52, 15, -61, -43, -17, -44, -58, -59, -63, -15, -46, -5, 18, 43, 66, 46, 66, 29, -1, 24, 85, 68, -47, -28, -35, -16, -28, 18, -21, -1, -47, 5, 31, 34, 91, 94, 21, 0, 16, 84, 89, 53, 8, 15, -3, -16, -21, 1, -25, -20, -32, 7, -26, 21, 58, 22, 13, -11, 1, 33, 50, 87, 37, -15, 3, -23, -22, 17, 8, 10, -28, 19, 16, 54, 56, 27, -3, 32, -22, -23, 26, 65, 34, 51, 40, 8, -4, 6, 22, 1, -12, 53, -18, 26, 37, 31, 58, 21, -17, 20, 59, 44, -9, -18, -35, 24, -10, -19, 22, -31, 33, -21, 14, 24, -11, 35, 12, -9, -29, -16, 28, 15, -29, -14, 27, -43, -16, -33, -33, -6, 2, -31, -40, 1, -4, -21, 2, -9, -5, -26, 55, -25, -12, -19, 16, 21, -22, 26, 4, 1, 1, -44, 0, -39, -45, 14, -17, -35, -27, 1, 
  89, 52, 34, 58, 48, 19, 54, 18, -39, -61, -58, -84, -90, -65, 6, -70, -68, -31, -68, -64, 74, 8, 6, 48, 21, 0, -19, -44, -44, -18, -53, -37, -65, -35, 43, -65, -63, -8, -69, -75, 82, 0, 7, 52, 19, 18, 56, -3, -2, 31, 35, 19, 32, 42, 88, 107, 93, 19, 57, 43, 40, -24, -4, 36, -26, -18, 3, -17, -14, 28, 34, 44, 29, 57, 83, 50, 39, 69, 36, 55, 47, 16, 32, 40, 42, -21, 11, 51, 15, 4, 41, 6, 48, 37, 36, 33, 64, 33, -17, 54, 75, -16, 52, 50, 2, 31, 23, 44, -15, 32, 43, -16, 10, 8, -4, 58, 72, 25, -7, 17, 53, 64, 11, 46, 2, 14, -15, 17, 40, 39, 56, 7, 49, 28, 37, 22, 36, -4, 20, 47, 17, 19, -40, -31, 29, -19, 6, 28, 28, -14, 28, -4, -11, 8, -16, -36, -10, 3, -42, 31, 26, -7, 33, -2, 28, 14, 10, 8, 12, 0, 18, 36, -26, 29, 32, 11, 0, -8, 30, -20, 74, 20, 37, -13, -1, -7, 5, 30, 33, 45, 12, 46, 41, 23, 46, 53, 33, 56, 10, 18, 46, 89, 71, 21, 34, 32, 58, 55, 86, 103, 127, 125, 101, 127, 85, 65, 84, 122, 112, 78, 35, 76, 58, 19, 51, 26, 63, 44, 55, 61, 78, 102, 58, 39, -34, 78, 53, 76, 72, 72, 64, 65, 63, 10, 46, 26, 56, 9, 8, 61, 0, 53, 44, -70, -100, -84, -66, -14, 25, -26, 26, 52, -5, 28, -14, 21, -3, 14, 44, 21, 4, -49, -23, -71, -63, -56, -8, -50, -35, -83, 27, -15, 15, 41, -20, 1, 52, 19, 24, 12, 31, -24, -12, -16, -45, -16, 6, 28, -14, 36, 84, 28, -13, 54, 17, 43, 48, -2, 41, 36, 54, 52, 30, -27, -15, 3, 8, 0, 36, 33, 72, 32, 25, 19, 39, 22, 53, 16, 54, 6, 46, 52, 43, 1, -15, -19, 30, 5, 53, 26, 22, -2, -12, -22, 5, 2, 9, -39, -1, -13, 28, -27, -33, 30, -37, 10, -8, 12, -18, -7, 68, -11, 30, 6, 3, -28, -18, -14, 33, 23, -30, -6, 34, 26, 35, 9, 18, 5, 16, -2, 49, 21, 30, 3, 41, 3, 38, 30, 23, -2, 13, 13, -1, 1, 20, 38, 3, 11, 15, -8, 
  -10, 15, 37, -2, 16, 5, 24, 6, -14, 15, -1, 48, 6, 15, -19, -29, 11, 31, -3, 30, -25, 40, 38, -2, 4, -1, 23, 9, 21, 59, 48, 35, -21, -22, -10, -27, -52, -40, 0, -36, 32, 63, 39, 24, 41, 55, 26, 10, 60, 35, 55, 6, 14, 53, 4, 16, -8, -11, 16, 18, -11, -16, 34, 29, 52, 29, 3, 36, 50, 23, 29, 46, -22, 19, -17, -3, 18, -20, -3, -5, -22, 5, 12, 22, -19, 24, -18, -19, -39, 17, 17, -10, 24, 6, -49, -18, -34, -37, 9, 14, -39, -65, -42, -19, -29, -11, -5, 27, 19, -28, 29, -17, 8, -9, 5, -33, 0, -27, -44, 24, -15, -34, -21, -8, -25, -13, 27, 7, 1, -21, 0, 9, -46, -8, -27, 2, -16, -45, 16, -28, 1, -7, -7, -32, 16, 10, 0, 29, 13, 10, -45, -43, 26, -25, 24, -8, -12, 8, -38, -20, -29, 35, 33, -30, -21, -23, -10, 30, -30, 18, 17, -11, 23, -16, -36, 21, 6, -33, 22, -1, -4, 16, 4, 21, 1, 37, -17, 2, -10, -29, 18, -10, -22, -1, -27, -7, 38, 19, 28, -2, 22, -13, -15, 37, 32, 39, 2, 39, 30, -18, 22, -12, 4, 27, 23, -36, -19, 22, -19, -33, -20, 8, 34, 22, 21, 59, 34, 56, -2, 42, 7, 34, 13, -38, 12, 17, 3, -56, -35, -56, 21, 62, 64, 19, -2, 63, -3, 60, 50, 23, 25, 14, 8, 32, 1, -17, 6, -1, 28, -23, -3, 10, 0, 24, 14, 2, 13, 18, -9, 7, -7, 23, -11, 8, 1, -18, -28, 0, 28, -54, 16, 33, -12, -44, -21, -35, -39, -2, -36, -13, 9, 9, 7, -12, -12, -1, -14, 11, -11, -41, 16, 1, -40, -34, -32, 5, -15, -10, -38, -16, -25, 22, -19, 20, 3, 5, 0, -23, -46, -45, -6, -5, -2, -7, -33, -37, -21, 27, -26, -27, -12, -20, -25, -32, 23, 8, -40, -24, -16, -22, 20, 0, -39, 25, -37, -17, -9, 6, -19, 22, -33, -30, -12, -22, -7, 4, -21, 9, 1, 28, -13, -28, -6, -5, -17, -28, 10, -2, 17, -32, -29, 3, -8, 34, -33, -29, 2, 9, -28, -28, -23, -12, 13, 15, -25, -21, 17, -3, -28, 16, 5, -28, 21, -1, -11, -6, 40, 2, -12, -16, 
  59, 47, 42, 31, 17, 32, 39, 64, 54, 82, 65, 78, 71, 121, 84, 83, 102, 59, 53, 63, 5, 68, 30, 80, 60, 23, 18, 80, 30, 79, 38, 56, 20, 21, -71, 14, -52, -36, 54, -44, 22, 4, -8, 20, 59, -8, 24, 1, 55, 38, 19, 55, 4, -82, -99, -86, -72, -57, -22, -89, 17, -11, -19, 8, -8, -17, 15, -6, -13, 48, 19, 21, -15, 12, -84, -66, -18, -9, -45, -39, 38, 49, -1, 50, 35, -9, 6, 51, 22, 22, 7, 50, 1, 45, 8, 25, 33, 25, 17, 55, 48, 9, 38, -3, -2, 1, 29, 29, 51, 32, 6, 23, -7, 1, 56, -8, 0, 11, -9, 25, 3, 38, 32, 54, 41, 1, -8, 60, -1, 39, 59, 9, 25, 46, -12, -8, 4, 45, 7, 25, 44, -34, -22, -36, 3, 18, 34, 13, 26, -24, -22, 28, -23, -7, -31, -17, 28, 34, -6, 6, 5, -5, 3, -13, -18, -5, 17, -4, 23, 10, -32, 25, 34, -34, 20, 12, 30, -14, -15, 7, -11, 29, 57, 42, 15, 58, 34, 20, 17, 49, 26, 33, 46, 48, 9, 36, 17, 14, 18, 30, 75, 76, 35, 52, 61, 68, 18, 4, 34, -22, 26, -17, 10, 6, -13, 5, -62, 4, -61, 4, -14, -77, 9, 34, 46, 38, -19, -45, -66, -82, -60, -60, -83, -46, 13, -81, -85, -54, -95, -98, 45, 52, 10, 15, 40, 49, -5, 10, 51, 17, 9, 18, -5, 92, 64, 50, -11, 24, -30, 10, 26, 12, -9, 28, -2, 45, 2, 50, 8, -7, 18, 65, 70, 24, 71, 56, 50, 68, 5, 1, 28, 43, 46, 11, 27, 56, 10, 6, 43, -9, 40, 45, -14, 8, 73, 24, 31, 24, -13, 27, 3, 33, 12, 55, 16, -7, -11, 29, -11, 41, 55, 10, 18, 32, 9, 37, 17, -8, 28, 52, 51, 58, -13, -7, 21, 58, -2, 47, 54, 46, 49, 50, 51, 10, 33, 30, 43, 46, 50, 51, -10, -10, 6, 35, 0, -20, -17, -30, 31, -7, 26, -21, 0, -29, 7, -26, -3, -33, -34, 24, -1, -43, 24, -28, -5, -11, 35, 2, -14, 24, 21, -19, 5, -37, 8, -25, 21, 30, 21, 13, 14, 11, 5, 22, 13, 5, 35, 29, 37, 11, 2, 34, 55, -5, 17, 43, 66, 59, 12, 18, 
  63, 63, 69, 14, 37, 86, 83, 54, 70, 63, 66, 51, 109, 82, 108, 69, 103, 80, 99, 95, 15, 53, 0, 61, 45, 78, 76, 21, 26, 66, 56, 96, 81, 57, 11, 28, 85, 93, 85, 59, 40, 11, 5, 25, 20, 22, -7, 36, 38, 53, 10, 57, -17, -47, -93, -52, -63, -41, -13, 15, 9, 48, 17, 31, 41, 8, -22, 28, 30, 37, -17, -22, -34, -81, -115, -90, -18, 2, -24, -52, 51, -14, 9, 19, 4, -4, -21, -9, -19, 15, 6, -13, 7, 3, -54, -44, 2, -46, 45, 4, 68, 78, 12, 19, -6, 24, -15, 28, 18, 32, 39, 0, 15, -8, -31, -20, -13, 6, 50, 24, 20, 9, -8, 38, 8, 7, 15, 47, 54, 45, 13, 16, 42, 19, 50, 36, 11, 43, 30, 26, 40, 38, -16, 29, -17, 34, 8, -15, 5, 20, -5, 37, 12, 2, -2, 20, 7, 30, -16, -22, 23, 17, 3, -4, 25, -6, 34, 22, -23, 9, -5, 9, 31, 6, 22, -4, 25, -23, -14, 17, 44, 32, 51, 57, 6, 46, -6, 36, 40, 0, 24, 55, 8, 43, 35, 7, 58, 14, 3, 13, 29, 52, 4, 9, 49, 11, 11, -41, -70, -73, -89, -56, -79, -63, -25, -56, -76, -56, -30, -43, 13, -19, 4, -46, 18, -31, -14, -77, -77, -31, -77, -103, -36, -36, 61, 19, -45, 0, -82, -37, 52, 11, 46, 47, 58, 61, 3, 1, 38, 5, 16, 13, 11, 77, 69, 76, 67, 53, 35, 3, 18, 20, 26, 12, 12, -20, 8, 20, 6, -5, 51, 46, 72, 77, 117, 62, 70, 79, 61, 60, 37, 21, 44, 31, -4, -16, 21, -20, 18, -11, -24, 78, 16, 33, 76, 54, 39, 61, 31, 31, 52, 12, -14, -23, 30, 33, 3, 9, 19, 30, -21, 1, -9, 27, 16, 37, 13, 42, -22, -2, 17, 65, 9, -3, 14, -7, -5, 47, 35, -12, -14, 13, -10, 36, 36, 37, 10, -11, -3, 13, 14, -16, 16, 7, 6, -31, -6, 31, -14, 23, 6, 45, 20, -22, -1, 39, -16, 22, -17, -1, 52, -2, 35, 35, -2, -30, 27, 18, -35, -5, 10, -17, 18, -9, 17, -20, -8, -21, 32, 39, 61, 21, 5, 41, 9, 31, 7, 4, -6, 59, 51, 44, 39, 4, 47, 54, 1, 13, 54, 55, 
  8, -5, -8, -6, -12, -32, -36, 13, -8, -30, -17, 21, -12, -44, -48, 9, -30, -23, -27, 12, 3, 8, -23, 8, -18, 26, 26, 23, 2, 14, 12, -9, -30, -18, -31, 17, -43, -5, -2, -5, -18, -40, -35, -11, 23, -33, -34, -3, -17, -23, -28, 2, -37, -5, -29, -46, -35, -24, 16, 8, -32, 16, -7, 3, -33, 37, -10, -31, -5, -37, 5, 19, 36, 24, 6, 14, -39, 4, -31, 25, -11, 8, 1, 1, 14, 23, -9, 9, -31, -18, 6, 13, -8, 28, -46, -36, -20, -5, -22, -32, -31, -47, -6, -37, 24, 31, -21, -37, 2, -22, 21, -13, 13, 5, 34, -34, 15, -4, 6, -34, 21, -17, -28, 33, -9, -26, -33, 7, -6, 12, 4, -19, -14, 18, 30, 10, 2, 29, 21, -12, -6, -13, -19, -34, 6, 12, -25, -37, -21, 19, 26, -10, 8, -23, -20, 19, 2, 23, -4, 20, -46, 4, -32, -7, 20, -37, -7, 30, -26, 34, -27, 19, -9, 35, 37, 31, 6, -25, 21, -10, -43, -50, -8, 35, 26, -34, -33, -16, -20, -27, -20, -25, 11, -2, 36, -36, -20, -37, -26, -18, 9, 11, -21, -16, -28, -22, -37, -40, 20, 24, -4, -23, -32, 4, -37, -7, 8, -19, 2, 9, 17, 7, -24, -37, -37, -32, -10, -46, -43, -22, -13, -41, -29, -37, -45, -45, -37, 21, 23, 23, -12, -35, 19, 36, 35, -4, -8, -33, -12, -19, 26, 25, 22, -21, 38, -4, -43, 11, -48, 22, 18, -9, 34, -31, -35, -27, 12, -12, -16, 27, 34, -35, -10, 18, -26, 32, -18, 25, 24, -23, -31, 14, -10, 21, -11, 23, -11, -9, -37, -14, -17, -14, -33, 8, -34, -8, 28, 28, 32, 17, -16, 16, 17, -23, -32, 27, -21, -20, -6, -24, 31, -36, 12, -9, 15, 31, -36, -35, -18, -37, -46, -14, -18, -35, 24, 17, 33, -19, -3, 20, 25, 26, -4, 0, -33, -36, 33, 19, -21, 14, -9, 8, -6, -33, 32, -27, -15, -8, -17, -13, -22, 8, 5, -5, -24, 36, -12, -26, 3, 8, -41, -49, -8, -9, 1, 36, -24, 30, -6, -30, 16, 14, 4, -21, -27, 12, -14, 8, 11, 19, -33, -16, 34, 5, -15, -17, -19, -12, 24, 32, 14, -6, -1, 24, 33, -33, 8, 0, -2, 34, 
  -31, 28, 30, 33, -2, -22, -29, 12, -15, 35, -20, 8, -24, -13, 10, -37, 17, 23, -27, -27, -4, 11, 37, 34, -14, -8, -31, 30, -28, -12, 37, -10, -7, -19, 32, -1, 37, -6, -5, -36, -27, -23, 25, 3, 9, 25, -22, 10, 26, -11, 8, 14, 36, 37, -27, -16, -37, 27, 3, 21, 32, 24, -34, -17, 17, -36, -15, -5, 11, -15, 21, -5, 31, -8, -7, -33, -35, -15, 18, -29, 0, 0, 28, -4, 29, -26, 17, 33, 29, -7, 32, -27, 5, 17, -27, 34, -6, -3, 27, -22, 19, 14, -19, -33, -13, -27, -28, -7, -14, 32, 18, -7, 12, -1, 8, -10, 29, 2, 27, -27, -1, 12, 6, 33, -19, 23, 11, 0, 3, -28, 5, 6, 27, -30, -4, 15, 20, -11, -34, -34, -16, 21, -10, -25, 20, 29, -29, -28, -19, -33, 29, 21, -12, 10, -12, -20, 34, -1, 17, 29, -19, -34, -13, 19, -29, -14, -13, 35, 3, -34, 33, -29, -6, 8, 30, 29, -1, -4, -34, -36, 4, -21, 23, 11, -20, -37, -18, -17, 18, -28, -19, -34, -14, 11, 33, -30, 29, -26, 15, -16, -8, -37, 20, -36, 8, 1, -36, -28, -33, -32, -2, 3, -7, -36, -14, 24, 1, -6, 28, -30, 2, -11, -20, -13, 1, -38, 13, 13, 34, 7, 17, -20, -3, 33, 2, -8, -31, 29, 24, -37, -17, 4, -5, 31, 6, -15, -2, -32, 16, -38, 19, 14, -31, 5, 18, 15, -28, 20, 14, -20, 29, 24, -21, -31, 36, 6, -15, -28, -6, 32, 20, 32, -3, 7, 34, 8, 37, 15, -6, 32, -24, 12, -10, -3, 15, 3, 28, 37, 30, -2, -11, -16, -23, 17, -37, 35, -6, -5, 17, 19, -12, -34, 7, -13, 8, 18, 13, -2, 28, -7, 10, 4, 15, 12, -19, -3, -11, 37, 14, -27, -24, -35, -29, -24, -9, 34, 19, 32, -5, -6, 29, 37, -36, -30, 12, -8, 6, -21, 30, 6, 36, -19, 36, 34, -14, 13, 5, 12, 16, -14, -36, 19, 6, -23, -19, 9, 0, 15, -24, 24, -3, 7, 7, -21, -35, 3, -3, -9, 12, 24, -27, 36, 19, -32, -13, 34, -32, -13, 20, 3, 17, -23, -21, -36, 18, -6, -11, 8, 9, 35, 16, 6, 33, -33, -24, -2, 33, 6, 11, -3, 
  26, -19, -32, 20, 7, -29, -36, 23, -33, 13, -2, 3, -37, -44, -46, 1, 12, -31, -37, -24, -10, -27, 0, -20, -30, -32, 7, 21, -30, 27, 22, -13, 26, -11, -40, 17, 0, -28, 8, -30, -39, -13, -7, 37, -25, -11, 15, 21, -29, -35, 14, 0, -35, -32, 15, -22, -41, -28, 28, -33, 12, -17, 19, 2, 16, -7, 23, 19, 24, -24, -24, 31, 4, -10, -31, 0, -5, -6, -34, 34, 0, 2, 8, 33, 23, 17, -20, -2, 23, -23, -8, 17, -6, -35, 9, 1, 29, -18, -11, 3, -25, 14, 13, 32, -18, -16, -11, -9, 32, 3, -14, -16, -26, -36, 11, 17, 34, 37, -27, -1, -30, -31, 13, 35, 38, 31, -21, -19, 9, 27, 18, -6, 33, -19, -33, 28, -11, -18, -25, -1, 3, -46, -23, -21, 22, -11, -15, -8, -32, 31, -18, 8, 37, -10, -22, 31, -30, 10, -8, 35, 8, -40, 21, -33, -22, -29, 18, 19, -6, 19, -5, 16, 22, -16, 30, -15, 22, 34, -5, -19, -16, -4, -31, 9, -23, 15, 24, 16, -2, -27, 18, 31, 15, 0, -21, -16, -15, 29, 35, -31, 21, 4, 8, 13, -13, -12, -25, -25, -25, 1, -12, -2, -39, 21, 9, -28, 28, -21, -13, 10, 3, -24, -19, 26, 22, 10, -13, -1, -34, 0, -16, -43, 10, -43, 3, 27, -43, -6, -11, -7, 15, -19, 0, 7, -10, -9, 32, -26, 22, 26, 11, -21, 6, -13, -17, -19, 24, 10, -23, -23, 3, 25, 27, 3, 22, 28, -17, 23, -18, 28, -25, -2, 32, -5, 0, -2, 28, 19, -8, 20, -17, -37, 3, -26, -7, -17, -15, 1, 10, 26, -2, -19, 37, 4, -30, 14, -44, 26, 20, -14, -23, -16, -34, -3, -9, 24, 16, 4, 8, 5, -20, -37, 9, -9, -30, -34, 27, 22, -20, -24, -12, 8, -37, -1, 10, -35, 29, 3, 29, -9, 21, 13, 24, 1, -27, -24, 26, 14, 34, -24, -42, -21, 2, -13, -21, 3, -26, -25, 24, -26, 4, -17, -17, -9, 17, 12, -13, 7, -5, 1, 23, -38, -14, 3, -8, -17, -32, 31, -8, 7, 21, -10, 22, -32, -17, -16, 10, 11, 36, -37, -22, 4, 2, -28, 23, 2, -37, -20, -15, -14, -16, -20, 31, -12, -11, -21, -28, -6, 2, 15, 
  28, 15, 33, 54, 17, 22, 60, 44, 53, 40, 61, 58, 51, -15, 34, 27, 9, 10, -16, 11, -12, -14, 44, 10, 52, 20, 1, -16, 23, 3, -7, 0, -66, -64, -55, -16, -66, -69, -80, -72, -1, -4, 57, 38, 43, 9, 45, 42, 37, 68, 48, 39, 28, 39, -13, -8, -4, 6, -31, -25, -46, 13, -6, 29, 16, 30, 25, 28, 36, -2, 38, 42, 3, -5, 49, 48, 3, 55, -11, -13, 9, 34, 37, 10, -6, 8, 53, 37, -20, 46, -5, 31, 22, 6, 41, 29, 36, 29, -17, 28, 3, -44, 46, 19, 55, -15, -15, 17, 53, 39, 16, 7, 35, -13, 57, -13, -2, 51, 31, 45, 0, -3, 51, 60, 39, 18, 44, 52, 48, 11, 45, 9, 27, -12, 37, 23, 9, -9, 60, -9, -5, 6, -5, 10, -30, -41, -14, 19, -23, -11, 30, 4, -5, 9, -21, -10, 7, -6, -40, -24, 16, -13, -16, -29, -15, 12, 3, -10, 2, -17, -31, -11, 0, -23, 3, -6, 19, 7, 10, -5, 14, 47, 12, 1, 31, 2, 34, 17, -10, 14, 23, 48, 3, 29, 42, 45, 31, 7, 26, -4, 68, 21, 83, 81, 74, 21, 41, 42, 80, 83, 83, 52, 25, 45, 38, 88, 59, 78, 61, 84, 38, -20, 58, 7, 22, 19, 59, 58, 7, -6, -15, 18, -11, -44, -67, -4, -45, -43, -44, -24, -6, 66, 36, 38, 5, 56, 58, 12, 67, 50, 27, 26, 3, 15, -57, -49, 8, -2, -19, 4, -15, -8, 16, 13, -2, -11, 17, 9, 29, 49, 9, -21, -9, 28, -75, -9, 10, 37, 21, 2, -1, -1, 43, -21, 21, 27, 31, 16, 44, 6, 28, 42, -9, 17, -39, 16, 29, 47, 20, 29, -6, 22, 48, 7, 29, 18, 12, 24, -2, 2, 19, 51, -15, -20, -14, 17, 32, 21, 9, 23, 5, 55, 55, 59, -10, 8, 36, 40, -15, 58, 17, 15, 41, 49, 50, 6, -7, 35, 41, 28, 14, -26, -35, 2, -3, 14, 16, -21, 8, -5, 11, 22, 11, 22, 21, 7, 2, 21, -16, 21, -1, -10, -20, 33, 7, -32, 3, -12, -4, -26, 21, 22, -17, 20, 21, -2, -40, -5, 32, -36, 20, 37, 37, -6, 17, 60, 1, 42, 50, 14, 32, 64, 60, -6, -7, 30, 34, 0, 12, 65, 
  -27, 26, 6, 21, -12, 13, 14, 22, -33, -36, -40, -15, -20, 4, -21, 0, -23, -35, 23, 4, -5, -27, -3, -18, -12, 17, 25, -17, -3, -25, 9, 14, 17, -28, 19, 22, -42, 7, 2, -10, -45, -1, -12, 16, -20, 30, 31, 8, -24, 1, -5, -19, -42, -11, 36, -28, 2, 18, 23, -44, -15, 2, 23, -35, -5, -37, -23, -10, 24, -35, -25, 17, 32, 22, -17, -4, 0, 34, -35, -7, -3, -44, -16, 12, -14, 3, -19, -32, -31, -8, 17, -30, 15, -20, 20, -15, -17, -18, 30, 7, -3, -30, 18, 11, -12, 35, 8, 8, -4, -23, 1, 20, -14, -9, 36, 7, -8, 11, -35, -18, 4, 9, -28, -15, -17, -25, -23, 8, 19, -5, -1, 27, -35, 1, 35, 19, -3, -24, 10, 9, -8, 8, 14, 34, 13, -18, -23, -20, 11, -32, 21, 30, -22, 34, -4, 12, -34, 35, 2, -33, -30, 19, -12, -22, 30, 30, -11, -9, -20, 1, 20, 33, -34, 1, -33, 23, -2, 23, -23, -15, -24, -4, 28, 18, 23, -12, -22, -5, 21, -7, -2, -25, 17, -14, -17, -27, -35, 33, -1, -10, 18, -5, -34, -15, 28, -27, -25, 7, -36, -44, -8, -1, -19, -17, -17, -44, 20, 10, 18, -20, -25, -21, -12, -27, 32, -29, -13, 12, -34, 7, 19, 6, -28, -45, 12, -30, 10, 21, -34, -44, -4, 12, -16, 15, 23, -11, -15, 1, -2, 10, 5, 3, -4, 2, -24, -7, -20, -17, -29, -15, -3, 9, 29, 21, 37, -19, -15, 28, -7, -25, 26, -35, 18, -29, 1, 5, 11, -1, -40, -43, 18, -43, 1, -19, -14, -30, -24, -20, -33, -35, 9, -23, 34, -26, -4, 0, -1, -13, 31, 33, -37, -9, -32, -22, -37, -34, -25, 20, 1, -11, -22, 14, 34, 24, 10, -39, 27, 3, -19, 0, -28, 13, 19, 11, 37, 12, 30, -31, 7, 3, -4, 10, -31, 28, -16, -4, -7, 9, -15, 14, -32, 0, -25, -36, -34, 7, 22, 17, -20, -10, 2, 28, 7, -13, 32, -10, 24, -8, -14, -25, 10, -37, 15, 37, -35, 2, 33, 26, 13, -7, 8, -13, -22, 28, -14, 34, 1, -6, -36, 23, -9, -28, -32, -36, 7, 33, -25, -23, -37, -16, -7, 17, -2, -1, 3, -4, -29, 30, -34, 35, 
  27, -21, -33, -35, -10, 2, -1, -11, 27, 69, 36, 11, 21, 77, 89, 98, 58, 76, 54, 60, -7, 34, -41, -49, -46, -47, 14, 7, 18, 73, 28, 92, 84, 97, 55, 71, 99, 70, 116, 55, 11, -25, -24, -44, 4, -16, -4, -17, -49, -63, 4, -8, -51, -13, -68, 0, -48, -40, -25, 46, 84, 11, 25, -12, -30, -36, -43, 8, -46, -36, -2, -5, 8, -70, -87, -57, -54, -3, -36, 14, 73, -20, -22, -45, -7, -1, 7, 26, -29, -22, 15, -7, -44, 17, -40, -40, -39, 8, 25, -39, 31, 74, -30, -12, -6, 8, 17, -1, -39, -3, -14, -5, -7, -8, 19, -55, -24, -10, 9, 8, 33, -45, -13, -45, -46, -6, -41, 18, -18, -35, -35, -14, 24, -41, 19, -35, -15, -14, -45, -29, 26, 0, 38, 44, 23, 32, 33, 21, -14, 6, 11, -25, -17, -8, 45, 45, 28, 5, 26, 43, 62, 25, 7, -7, 22, 15, -6, 12, 27, -3, 22, 4, 34, 28, -3, 36, -21, 4, -11, 31, 37, 17, 20, 5, 3, 8, -16, 16, -25, 19, -41, -41, 14, 13, -23, -34, 6, -27, -30, -31, 9, -77, -21, -57, -44, -41, -86, -14, -53, -86, -96, -92, -68, -86, -57, -44, -65, -87, -33, -14, 42, -50, 5, -54, -3, -13, -35, -70, -23, -53, -22, -72, -21, -15, 64, 61, 27, -2, 14, 65, 53, 11, -24, -25, -62, -63, -45, -6, 0, -52, -51, -16, 7, 25, 63, 85, 76, 3, 40, 23, 33, 29, 7, -15, -12, 3, 21, 15, -6, 12, -20, 53, 24, 24, 51, 31, 48, 21, 13, 55, 39, -5, -43, -17, -31, 26, 5, -13, 18, -15, 16, 23, -41, -13, 47, -17, -26, -23, -8, -24, 56, 5, -3, 25, -47, -39, -2, 21, -42, 9, -20, 25, 3, -22, 29, -18, -11, -9, 1, -33, 56, 38, 9, 8, 24, -34, 22, -26, -37, 4, -39, -27, -48, -13, 1, 39, 9, -10, -23, -30, 20, 40, 14, -21, 25, 12, 24, 47, 8, 32, 26, 13, -23, 23, 9, 44, -13, -8, -25, -17, 68, 14, 15, -10, 17, -5, 23, 0, 5, -24, 7, -24, -29, 9, 31, 25, -31, 42, 3, -8, 17, -1, -50, -24, -18, 11, 2, 25, 13, -49, -37, 11, -37, -16, 4, 2, -34, -14, -8, -1, 
  64, -36, -61, -72, -82, -41, -56, -51, -2, -29, -9, -7, -11, 5, -4, -19, -10, 32, 46, 6, 10, -8, 6, -14, -16, 0, -10, -39, -43, 16, -47, -5, 60, 54, 64, 93, 98, 87, 80, 56, 32, -27, -61, -44, -3, -62, -61, -62, -61, -45, -65, -27, -17, -8, 84, 23, 56, 52, -26, 46, 20, 57, -33, -17, -40, 4, -11, 4, -39, -35, 25, -16, 25, 19, 110, 55, 44, 43, 31, 90, 62, -18, -46, -33, -43, -19, -2, -6, -48, 8, 21, -28, 8, -3, 77, 43, 18, 28, -35, 27, 75, 43, -11, -14, -13, -6, 13, 11, -13, -9, -43, -31, -39, 62, 53, 31, 21, -24, 13, -27, 86, 29, -54, -10, -44, -55, 2, -19, -47, -17, -52, -38, -26, 33, -11, 11, 29, -13, -2, -17, 90, 52, 19, -21, -18, 46, 43, -21, 26, -23, -9, -21, -20, -26, 22, -8, 26, 5, 35, -5, 93, -24, 17, -21, -14, 1, -33, 27, 20, -19, 37, -32, 29, 15, 13, -10, -25, -13, 36, -13, 81, -38, 11, -11, -3, 6, -30, -41, -34, -1, 13, 17, -30, 22, -33, -27, -11, 9, -42, -20, 43, -76, -55, -14, -74, -71, -36, -49, -27, 31, 22, 6, -21, 12, -5, 18, 10, 60, 55, 72, 77, 4, -16, -61, -4, -62, -49, 27, 40, 56, 37, 74, 82, 56, 45, 107, 83, 99, 89, 87, 35, -57, -63, -58, -46, -65, -52, -40, -33, -60, 1, 8, -28, -27, 27, -29, 40, 42, 15, 42, 55, 38, -14, -45, -5, -23, 5, -44, 6, 0, -26, 24, -30, -47, 57, 11, 5, -16, -13, 66, 80, 40, -2, -49, 4, -31, 16, -24, 1, -21, -27, -8, -42, 2, -9, 30, -35, -27, -36, -48, 45, 80, -13, -23, -15, -18, -13, 3, -13, -29, -10, 25, -41, 28, 42, 5, 37, -11, -30, -30, 72, 27, 14, -49, -3, 8, -45, -58, -51, -54, -24, -6, -48, -26, 27, 1, -17, -26, -7, -49, 90, 33, 34, 12, 1, 12, 27, -19, -8, 14, 6, 32, 24, 21, 33, 40, -1, 12, -15, 5, 43, 32, 7, -29, -24, 23, -32, -32, -8, -4, 39, 38, -35, -23, 18, -7, 35, -32, -24, 30, 65, 14, -25, -27, -3, -38, -5, -30, 14, 13, 15, -9, -4, -15, 14, -29, 3, -23, 15, -16, 
  26, 56, 56, 68, 26, 8, 10, 52, 77, 33, 53, 27, 26, 61, 58, 7, 59, 1, 16, 6, 25, 9, 7, 56, 43, -1, 26, 9, 13, -5, 32, 30, -8, 15, -61, -48, -38, -32, -20, -47, 3, 15, 21, 39, 48, 34, 44, 60, 60, 30, 53, 58, 66, 55, 7, 36, -10, 18, -4, 7, -18, -3, -5, 20, 38, 47, 34, 9, -8, 2, 53, 11, 44, 8, 1, 4, 33, 31, 36, -2, 13, 43, 24, -17, -10, 18, 6, -8, -4, 40, 45, -7, 14, 24, -2, -20, 32, -10, 51, -7, -17, 22, 40, 6, -14, 55, -16, 33, 3, 14, 39, 42, 8, 29, 21, 20, -19, -13, 3, -13, -23, 41, 21, 10, -3, 48, 17, 18, -2, -9, 45, 34, 3, 9, -7, 54, -18, -2, 25, 47, -31, 4, 23, 25, -3, -21, -6, -23, -10, -11, -28, 25, -12, 4, -27, 5, -18, -33, -31, -8, -4, 17, 17, -39, -6, 1, -13, -31, -24, 31, -27, 22, -4, 19, -21, -26, -1, 16, -21, 4, 43, -11, 24, 1, 55, 24, 7, 46, 3, 45, 11, 29, 48, 39, -8, 8, 64, 20, -5, 46, 5, 33, 54, 68, 34, 48, 59, 4, 13, 57, 59, 40, 52, 11, 51, 4, 4, -10, 36, 37, 16, 55, 13, -5, 20, 69, 61, 13, 52, 9, 1, 13, 4, 6, -48, -35, -20, -75, -68, -57, 27, -7, 18, 70, 57, 3, 58, 15, 19, 5, 63, 3, 11, 15, 29, 43, 21, 12, 41, 28, -13, -6, 13, 53, 16, 6, 28, 26, 7, 32, 47, 17, 22, 6, -20, 3, 50, 27, 3, -10, -13, 18, 2, -20, -3, 6, -22, 27, 50, -6, 49, 25, 17, 26, 28, -24, 35, 53, 49, 13, -15, -24, 3, -16, -19, -13, 11, -17, 25, 54, 41, 29, 11, 29, 3, 28, 3, 41, 3, 36, 43, 30, -7, 35, 1, -8, 9, 43, 3, 11, 43, 4, 50, -2, 29, 17, 47, 30, 54, 56, -4, -13, 13, -15, -23, 2, -29, -20, -5, 9, -29, -10, 10, -1, -2, -28, -27, -25, -32, 29, 9, -16, 22, -31, 25, 2, -33, -20, -29, 19, -39, 30, -40, 5, 21, 8, -19, 26, -42, 22, 41, 61, 32, 21, 63, 28, 40, 15, 40, 6, 16, 22, -9, 38, 55, 56, 51, -2, -4, 45, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 16,400 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0031945072114467621, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,16 } };
const TfArray<1, float> quant7_scale = { 1, { 0.008051503449678421, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,16 } };
const TfArray<1, float> quant8_scale = { 1, { 0.018934633582830429, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.057162236422300339, } };
const TfArray<1, int> quant9_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};
#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, (TfLiteIntArray*)&inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata0)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, (TfLiteIntArray*)&inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata1)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, (TfLiteIntArray*)&inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata2)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, (TfLiteIntArray*)&inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, (TfLiteIntArray*)&inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&opdata0)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, (TfLiteIntArray*)&inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&opdata1)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, (TfLiteIntArray*)&inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&opdata2)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, (TfLiteIntArray*)&inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };



static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
if (registrations[used_ops[i]].init) {
       tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[used_ops[i]].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
