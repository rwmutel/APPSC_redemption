
SampleCollector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e4  0800b8e4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8e4  0800b8e4  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8e4  0800b8e4  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e4  0800b8e4  0001b8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800b8ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00001734  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001904  20001904  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018e7d  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d52  00000000  00000000  000390c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015f8  00000000  00000000  0003ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010df  00000000  00000000  0003e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021c6e  00000000  00000000  0003f4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c5c0  00000000  00000000  0006115d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c13ad  00000000  00000000  0007d71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000060e4  00000000  00000000  0013eacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00144bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b81c 	.word	0x0800b81c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	0800b81c 	.word	0x0800b81c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fce1 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f853 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f9e5 	bl	800064c <MX_GPIO_Init>
  MX_DMA_Init();
 8000282:	f000 f9c5 	bl	8000610 <MX_DMA_Init>
  MX_I2C1_Init();
 8000286:	f000 f92f 	bl	80004e8 <MX_I2C1_Init>
  MX_ADC1_Init();
 800028a:	f000 f8af 	bl	80003ec <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800028e:	f00a f957 	bl	800a540 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000292:	f000 f969 	bl	8000568 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000296:	2100      	movs	r1, #0
 8000298:	481c      	ldr	r0, [pc, #112]	; (800030c <main+0x9c>)
 800029a:	f001 f8cb 	bl	8001434 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adc1_buf, buf_size);
 800029e:	2264      	movs	r2, #100	; 0x64
 80002a0:	491b      	ldr	r1, [pc, #108]	; (8000310 <main+0xa0>)
 80002a2:	481a      	ldr	r0, [pc, #104]	; (800030c <main+0x9c>)
 80002a4:	f000 ff48 	bl	8001138 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (writing) {
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <main+0xa4>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0fb      	beq.n	80002a8 <main+0x38>
	  uint32_t n = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
	  for (uint32_t i = 0; i < buf_size; i++) {
 80002b4:	2300      	movs	r3, #0
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	e012      	b.n	80002e0 <main+0x70>
        n += sprintf(&str_buf[n], "%u ", adc1_buf[i]);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a16      	ldr	r2, [pc, #88]	; (8000318 <main+0xa8>)
 80002be:	1898      	adds	r0, r3, r2
 80002c0:	4a13      	ldr	r2, [pc, #76]	; (8000310 <main+0xa0>)
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4914      	ldr	r1, [pc, #80]	; (800031c <main+0xac>)
 80002cc:	f00a fe02 	bl	800aed4 <siprintf>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4413      	add	r3, r2
 80002d8:	607b      	str	r3, [r7, #4]
	  for (uint32_t i = 0; i < buf_size; i++) {
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	2b63      	cmp	r3, #99	; 0x63
 80002e4:	d9e9      	bls.n	80002ba <main+0x4a>
	  }
	  CDC_Transmit_FS(str_buf, 5 * buf_size);
 80002e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002ea:	480b      	ldr	r0, [pc, #44]	; (8000318 <main+0xa8>)
 80002ec:	f00a f9e6 	bl	800a6bc <CDC_Transmit_FS>
	  writing = false;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <main+0xa4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 80002f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fa:	f000 fd05 	bl	8000d08 <HAL_Delay>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <main+0xb0>)
 8000306:	f002 fb59 	bl	80029bc <HAL_GPIO_WritePin>
	if (writing) {
 800030a:	e7cd      	b.n	80002a8 <main+0x38>
 800030c:	200001ec 	.word	0x200001ec
 8000310:	20000320 	.word	0x20000320
 8000314:	200005dc 	.word	0x200005dc
 8000318:	200003e8 	.word	0x200003e8
 800031c:	0800b834 	.word	0x0800b834
 8000320:	48001000 	.word	0x48001000

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09e      	sub	sp, #120	; 0x78
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f00a fdee 	bl	800af14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	463b      	mov	r3, r7
 800034a:	223c      	movs	r2, #60	; 0x3c
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f00a fde0 	bl	800af14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000354:	2303      	movs	r3, #3
 8000356:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	2310      	movs	r3, #16
 8000368:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000372:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000374:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000378:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800037e:	4618      	mov	r0, r3
 8000380:	f004 f94c 	bl	800461c <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800038a:	f000 fa63 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a8:	2101      	movs	r1, #1
 80003aa:	4618      	mov	r0, r3
 80003ac:	f005 f974 	bl	8005698 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003b6:	f000 fa4d 	bl	8000854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <SystemClock_Config+0xc4>)
 80003bc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003c6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003c8:	2300      	movs	r3, #0
 80003ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003cc:	463b      	mov	r3, r7
 80003ce:	4618      	mov	r0, r3
 80003d0:	f005 fb48 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003da:	f000 fa3b 	bl	8000854 <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	3778      	adds	r7, #120	; 0x78
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	00021020 	.word	0x00021020

080003ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	; 0x28
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003f2:	f107 031c 	add.w	r3, r7, #28
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
 800040c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800040e:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000410:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000416:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000418:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800041c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800041e:	4b31      	ldr	r3, [pc, #196]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000424:	4b2f      	ldr	r3, [pc, #188]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000426:	2201      	movs	r2, #1
 8000428:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800042a:	4b2e      	ldr	r3, [pc, #184]	; (80004e4 <MX_ADC1_Init+0xf8>)
 800042c:	2201      	movs	r2, #1
 800042e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000430:	4b2c      	ldr	r3, [pc, #176]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000432:	2200      	movs	r2, #0
 8000434:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <MX_ADC1_Init+0xf8>)
 800043a:	2200      	movs	r2, #0
 800043c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043e:	4b29      	ldr	r3, [pc, #164]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000440:	2201      	movs	r2, #1
 8000442:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800044a:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <MX_ADC1_Init+0xf8>)
 800044c:	2202      	movs	r2, #2
 800044e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000450:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000452:	2201      	movs	r2, #1
 8000454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <MX_ADC1_Init+0xf8>)
 800045a:	2204      	movs	r2, #4
 800045c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000460:	2200      	movs	r2, #0
 8000462:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000464:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000466:	2200      	movs	r2, #0
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046a:	481e      	ldr	r0, [pc, #120]	; (80004e4 <MX_ADC1_Init+0xf8>)
 800046c:	f000 fc84 	bl	8000d78 <HAL_ADC_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000476:	f000 f9ed 	bl	8000854 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	4619      	mov	r1, r3
 8000484:	4817      	ldr	r0, [pc, #92]	; (80004e4 <MX_ADC1_Init+0xf8>)
 8000486:	f001 fb31 	bl	8001aec <HAL_ADCEx_MultiModeConfigChannel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000490:	f000 f9e0 	bl	8000854 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000494:	2302      	movs	r3, #2
 8000496:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000498:	2301      	movs	r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004a0:	2307      	movs	r3, #7
 80004a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <MX_ADC1_Init+0xf8>)
 80004b2:	f001 f831 	bl	8001518 <HAL_ADC_ConfigChannel>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004bc:	f000 f9ca 	bl	8000854 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004c0:	2303      	movs	r3, #3
 80004c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004c4:	2302      	movs	r3, #2
 80004c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_ADC1_Init+0xf8>)
 80004ce:	f001 f823 	bl	8001518 <HAL_ADC_ConfigChannel>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80004d8:	f000 f9bc 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	3728      	adds	r7, #40	; 0x28
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200001ec 	.word	0x200001ec

080004e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_I2C1_Init+0x74>)
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <MX_I2C1_Init+0x78>)
 80004f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_I2C1_Init+0x74>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_I2C1_Init+0x7c>)
 80004f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_I2C1_Init+0x74>)
 8000500:	2201      	movs	r2, #1
 8000502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_I2C1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <MX_I2C1_Init+0x74>)
 8000524:	f002 fa7a 	bl	8002a1c <HAL_I2C_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800052e:	f000 f991 	bl	8000854 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <MX_I2C1_Init+0x74>)
 8000536:	f002 fb00 	bl	8002b3a <HAL_I2CEx_ConfigAnalogFilter>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000540:	f000 f988 	bl	8000854 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000544:	2100      	movs	r1, #0
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_I2C1_Init+0x74>)
 8000548:	f002 fb42 	bl	8002bd0 <HAL_I2CEx_ConfigDigitalFilter>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000552:	f000 f97f 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000280 	.word	0x20000280
 8000560:	40005400 	.word	0x40005400
 8000564:	2000090e 	.word	0x2000090e

08000568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000586:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_TIM1_Init+0xa0>)
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <MX_TIM1_Init+0xa4>)
 800058a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36000;
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_TIM1_Init+0xa0>)
 800058e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_TIM1_Init+0xa0>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25;
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_TIM1_Init+0xa0>)
 800059c:	2219      	movs	r2, #25
 800059e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_TIM1_Init+0xa0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_TIM1_Init+0xa0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_TIM1_Init+0xa0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <MX_TIM1_Init+0xa0>)
 80005b4:	f005 fc06 	bl	8005dc4 <HAL_TIM_Base_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80005be:	f000 f949 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <MX_TIM1_Init+0xa0>)
 80005d0:	f005 fe08 	bl	80061e4 <HAL_TIM_ConfigClockSource>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005da:	f000 f93b 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <MX_TIM1_Init+0xa0>)
 80005f0:	f006 f814 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005fa:	f000 f92b 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200002d4 	.word	0x200002d4
 800060c:	40012c00 	.word	0x40012c00

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_DMA_Init+0x38>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <MX_DMA_Init+0x38>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_DMA_Init+0x38>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	200b      	movs	r0, #11
 8000634:	f001 fe0d 	bl	8002252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000638:	200b      	movs	r0, #11
 800063a:	f001 fe26 	bl	800228a <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000662:	4b42      	ldr	r3, [pc, #264]	; (800076c <MX_GPIO_Init+0x120>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <MX_GPIO_Init+0x120>)
 8000668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <MX_GPIO_Init+0x120>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b3c      	ldr	r3, [pc, #240]	; (800076c <MX_GPIO_Init+0x120>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a3b      	ldr	r2, [pc, #236]	; (800076c <MX_GPIO_Init+0x120>)
 8000680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b39      	ldr	r3, [pc, #228]	; (800076c <MX_GPIO_Init+0x120>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b36      	ldr	r3, [pc, #216]	; (800076c <MX_GPIO_Init+0x120>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a35      	ldr	r2, [pc, #212]	; (800076c <MX_GPIO_Init+0x120>)
 8000698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <MX_GPIO_Init+0x120>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b30      	ldr	r3, [pc, #192]	; (800076c <MX_GPIO_Init+0x120>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a2f      	ldr	r2, [pc, #188]	; (800076c <MX_GPIO_Init+0x120>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <MX_GPIO_Init+0x120>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <MX_GPIO_Init+0x120>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a29      	ldr	r2, [pc, #164]	; (800076c <MX_GPIO_Init+0x120>)
 80006c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_GPIO_Init+0x120>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006da:	2200      	movs	r2, #0
 80006dc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006e0:	4823      	ldr	r0, [pc, #140]	; (8000770 <MX_GPIO_Init+0x124>)
 80006e2:	f002 f96b 	bl	80029bc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 80006e6:	2336      	movs	r3, #54	; 0x36
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	481d      	ldr	r0, [pc, #116]	; (8000770 <MX_GPIO_Init+0x124>)
 80006fc:	f001 ffcc 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000700:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000704:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <MX_GPIO_Init+0x124>)
 800071a:	f001 ffbd 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800071e:	2301      	movs	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000722:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f001 ffaf 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800073a:	2320      	movs	r3, #32
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 ffa2 	bl	8002698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2006      	movs	r0, #6
 800075a:	f001 fd7a 	bl	8002252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800075e:	2006      	movs	r0, #6
 8000760:	f001 fd93 	bl	800228a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	48001000 	.word	0x48001000

08000774 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop_DMA(hadc);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 fdf7 	bl	8001370 <HAL_ADC_Stop_DMA>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <HAL_ADC_ConvCpltCallback+0x34>)
 800078a:	f002 f917 	bl	80029bc <HAL_GPIO_WritePin>
    writing = true;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_ADC_ConvCpltCallback+0x38>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <HAL_ADC_ConvCpltCallback+0x34>)
 800079c:	f002 f90e 	bl	80029bc <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	48001000 	.word	0x48001000
 80007ac:	200005dc 	.word	0x200005dc

080007b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_Pin && waiting_btn == true){
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10a      	bne.n	80007d6 <HAL_GPIO_EXTI_Callback+0x26>
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_TIM_Base_Start_IT(&htim1);
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80007ca:	f005 fb53 	bl	8005e74 <HAL_TIM_Base_Start_IT>
		waiting_btn = false;
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	e001      	b.n	80007da <HAL_GPIO_EXTI_Callback+0x2a>
	}
	else{
		__NOP();
 80007d6:	bf00      	nop
	}
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000000 	.word	0x20000000
 80007e8:	200002d4 	.word	0x200002d4

080007ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET && htim == &htim1){
 80007f4:	2101      	movs	r1, #1
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f002 f8c7 	bl	800298c <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d117      	bne.n	8000834 <HAL_TIM_PeriodElapsedCallback+0x48>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a0d      	ldr	r2, [pc, #52]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d113      	bne.n	8000834 <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_TIM_Base_Stop_IT(&htim1);
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800080e:	f005 fb9b 	bl	8005f48 <HAL_TIM_Base_Stop_IT>
		waiting_btn = true;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
		writing = false;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000826:	f002 f8c9 	bl	80029bc <HAL_GPIO_WritePin>
		HAL_ADC_Start_DMA(&hadc1,adc1_buf, buf_size);
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000830:	f000 fc82 	bl	8001138 <HAL_ADC_Start_DMA>
	}
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200002d4 	.word	0x200002d4
 8000840:	20000000 	.word	0x20000000
 8000844:	200005dc 	.word	0x200005dc
 8000848:	48001000 	.word	0x48001000
 800084c:	20000320 	.word	0x20000320
 8000850:	200001ec 	.word	0x200001ec

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x44>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f001 fcd0 	bl	800223c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008c8:	d14c      	bne.n	8000964 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <HAL_ADC_MspInit+0xc4>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a27      	ldr	r2, [pc, #156]	; (800096c <HAL_ADC_MspInit+0xc4>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <HAL_ADC_MspInit+0xc4>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <HAL_ADC_MspInit+0xc4>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <HAL_ADC_MspInit+0xc4>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <HAL_ADC_MspInit+0xc4>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008fa:	2306      	movs	r3, #6
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f001 fec2 	bl	8002698 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_ADC_MspInit+0xcc>)
 8000918:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 800092e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000932:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 8000936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 800093e:	2220      	movs	r2, #32
 8000940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 800094a:	f001 fcb8 	bl	80022be <HAL_DMA_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000954:	f7ff ff7e 	bl	8000854 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_ADC_MspInit+0xc8>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000
 8000970:	2000023c 	.word	0x2000023c
 8000974:	40020008 	.word	0x40020008

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_I2C_MspInit+0x7c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d127      	bne.n	80009ea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80009b2:	23c0      	movs	r3, #192	; 0xc0
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b6:	2312      	movs	r3, #18
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c2:	2304      	movs	r3, #4
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <HAL_I2C_MspInit+0x84>)
 80009ce:	f001 fe63 	bl	8002698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400

08000a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_TIM_Base_MspInit+0x74>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2018      	movs	r0, #24
 8000a30:	f001 fc0f 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000a34:	2018      	movs	r0, #24
 8000a36:	f001 fc28 	bl	800228a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f001 fc07 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a44:	2019      	movs	r0, #25
 8000a46:	f001 fc20 	bl	800228a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	201a      	movs	r0, #26
 8000a50:	f001 fbff 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a54:	201a      	movs	r0, #26
 8000a56:	f001 fc18 	bl	800228a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	201b      	movs	r0, #27
 8000a60:	f001 fbf7 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a64:	201b      	movs	r0, #27
 8000a66:	f001 fc10 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40012c00 	.word	0x40012c00
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8fe 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f001 ff89 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ae6:	f001 fcc9 	bl	800247c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000023c 	.word	0x2000023c

08000af4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000afa:	f002 f9ad 	bl	8002e58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200012b0 	.word	0x200012b0

08000b08 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000b0e:	f005 fa4a 	bl	8005fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002d4 	.word	0x200002d4

08000b1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b22:	f005 fa40 	bl	8005fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200002d4 	.word	0x200002d4

08000b30 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b36:	f005 fa36 	bl	8005fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200002d4 	.word	0x200002d4

08000b44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM1_CC_IRQHandler+0x10>)
 8000b4a:	f005 fa2c 	bl	8005fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200002d4 	.word	0x200002d4

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f00a f9cc 	bl	800af24 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000a000 	.word	0x2000a000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	200005e0 	.word	0x200005e0
 8000bc0:	20001908 	.word	0x20001908

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f00a f98b 	bl	800af30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fb29 	bl	8000270 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000c2c:	0800b8ec 	.word	0x0800b8ec
  ldr r2, =_sbss
 8000c30:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000c34:	20001904 	.word	0x20001904

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f001 faf5 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe02 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fb0d 	bl	80022a6 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f001 fad5 	bl	8002252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	2000000c 	.word	0x2000000c
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	200005e4 	.word	0x200005e4

08000cf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200005e4 	.word	0x200005e4

08000d08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09a      	sub	sp, #104	; 0x68
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e1c9      	b.n	800112c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d176      	bne.n	8000e98 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d152      	bne.n	8000e58 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fd6b 	bl	80008a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d13b      	bne.n	8000e58 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f001 f83f 	bl	8001e64 <ADC_Disable>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12f      	bne.n	8000e58 <HAL_ADC_Init+0xe0>
 8000df8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d12b      	bne.n	8000e58 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e08:	f023 0302 	bic.w	r3, r3, #2
 8000e0c:	f043 0202 	orr.w	r2, r3, #2
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e22:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e32:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e34:	4b86      	ldr	r3, [pc, #536]	; (8001050 <HAL_ADC_Init+0x2d8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a86      	ldr	r2, [pc, #536]	; (8001054 <HAL_ADC_Init+0x2dc>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9a      	lsrs	r2, r3, #18
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e4a:	e002      	b.n	8000e52 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f9      	bne.n	8000e4c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d007      	beq.n	8000e76 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e74:	d110      	bne.n	8000e98 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f023 0312 	bic.w	r3, r3, #18
 8000e7e:	f043 0210 	orr.w	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f043 0201 	orr.w	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 8136 	bne.w	8001112 <HAL_ADC_Init+0x39a>
 8000ea6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8131 	bne.w	8001112 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8129 	bne.w	8001112 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ec8:	f043 0202 	orr.w	r2, r3, #2
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed8:	d004      	beq.n	8000ee4 <HAL_ADC_Init+0x16c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a5e      	ldr	r2, [pc, #376]	; (8001058 <HAL_ADC_Init+0x2e0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d101      	bne.n	8000ee8 <HAL_ADC_Init+0x170>
 8000ee4:	4b5d      	ldr	r3, [pc, #372]	; (800105c <HAL_ADC_Init+0x2e4>)
 8000ee6:	e000      	b.n	8000eea <HAL_ADC_Init+0x172>
 8000ee8:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <HAL_ADC_Init+0x2e8>)
 8000eea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef4:	d102      	bne.n	8000efc <HAL_ADC_Init+0x184>
 8000ef6:	4b58      	ldr	r3, [pc, #352]	; (8001058 <HAL_ADC_Init+0x2e0>)
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e01a      	b.n	8000f32 <HAL_ADC_Init+0x1ba>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a55      	ldr	r2, [pc, #340]	; (8001058 <HAL_ADC_Init+0x2e0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d103      	bne.n	8000f0e <HAL_ADC_Init+0x196>
 8000f06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e011      	b.n	8000f32 <HAL_ADC_Init+0x1ba>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a54      	ldr	r2, [pc, #336]	; (8001064 <HAL_ADC_Init+0x2ec>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d102      	bne.n	8000f1e <HAL_ADC_Init+0x1a6>
 8000f18:	4b53      	ldr	r3, [pc, #332]	; (8001068 <HAL_ADC_Init+0x2f0>)
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e009      	b.n	8000f32 <HAL_ADC_Init+0x1ba>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a51      	ldr	r2, [pc, #324]	; (8001068 <HAL_ADC_Init+0x2f0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_ADC_Init+0x1b6>
 8000f28:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <HAL_ADC_Init+0x2ec>)
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e001      	b.n	8000f32 <HAL_ADC_Init+0x1ba>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d108      	bne.n	8000f52 <HAL_ADC_Init+0x1da>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <HAL_ADC_Init+0x1da>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f52:	2300      	movs	r3, #0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11c      	bne.n	8000f92 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f58:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d010      	beq.n	8000f80 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d107      	bne.n	8000f7a <HAL_ADC_Init+0x202>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Init+0x202>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_ADC_Init+0x204>
 8000f7a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d108      	bne.n	8000f92 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f90:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7e5b      	ldrb	r3, [r3, #25]
 8000f96:	035b      	lsls	r3, r3, #13
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f9c:	2a01      	cmp	r2, #1
 8000f9e:	d002      	beq.n	8000fa6 <HAL_ADC_Init+0x22e>
 8000fa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa4:	e000      	b.n	8000fa8 <HAL_ADC_Init+0x230>
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d11b      	bne.n	8000ffe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7e5b      	ldrb	r3, [r3, #25]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	045a      	lsls	r2, r3, #17
 8000fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	663b      	str	r3, [r7, #96]	; 0x60
 8000fe0:	e00d      	b.n	8000ffe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fea:	f043 0220 	orr.w	r2, r3, #32
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	2b01      	cmp	r3, #1
 8001004:	d03a      	beq.n	800107c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_ADC_Init+0x2ec>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d004      	beq.n	800101a <HAL_ADC_Init+0x2a2>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_ADC_Init+0x2f0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d128      	bne.n	800106c <HAL_ADC_Init+0x2f4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001022:	d012      	beq.n	800104a <HAL_ADC_Init+0x2d2>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800102c:	d00a      	beq.n	8001044 <HAL_ADC_Init+0x2cc>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001036:	d002      	beq.n	800103e <HAL_ADC_Init+0x2c6>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	e018      	b.n	8001070 <HAL_ADC_Init+0x2f8>
 800103e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001042:	e015      	b.n	8001070 <HAL_ADC_Init+0x2f8>
 8001044:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001048:	e012      	b.n	8001070 <HAL_ADC_Init+0x2f8>
 800104a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800104e:	e00f      	b.n	8001070 <HAL_ADC_Init+0x2f8>
 8001050:	20000004 	.word	0x20000004
 8001054:	431bde83 	.word	0x431bde83
 8001058:	50000100 	.word	0x50000100
 800105c:	50000300 	.word	0x50000300
 8001060:	50000700 	.word	0x50000700
 8001064:	50000400 	.word	0x50000400
 8001068:	50000500 	.word	0x50000500
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001074:	4313      	orrs	r3, r2
 8001076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001078:	4313      	orrs	r3, r2
 800107a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b00      	cmp	r3, #0
 8001088:	d114      	bne.n	80010b4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001098:	f023 0302 	bic.w	r3, r3, #2
 800109c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7e1b      	ldrb	r3, [r3, #24]
 80010a2:	039a      	lsls	r2, r3, #14
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4313      	orrs	r3, r2
 80010ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010b0:	4313      	orrs	r3, r2
 80010b2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_ADC_Init+0x3bc>)
 80010bc:	4013      	ands	r3, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010c4:	430b      	orrs	r3, r1
 80010c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10c      	bne.n	80010ea <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f023 010f 	bic.w	r1, r3, #15
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	1e5a      	subs	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
 80010e8:	e007      	b.n	80010fa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 020f 	bic.w	r2, r2, #15
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f023 0303 	bic.w	r3, r3, #3
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
 8001110:	e00a      	b.n	8001128 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f023 0312 	bic.w	r3, r3, #18
 800111a:	f043 0210 	orr.w	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800112c:	4618      	mov	r0, r3
 800112e:	3768      	adds	r7, #104	; 0x68
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	fff0c007 	.word	0xfff0c007

08001138 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80f7 	bne.w	8001346 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_Start_DMA+0x2e>
 8001162:	2302      	movs	r3, #2
 8001164:	e0f2      	b.n	800134c <HAL_ADC_Start_DMA+0x214>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001176:	d004      	beq.n	8001182 <HAL_ADC_Start_DMA+0x4a>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_ADC_Start_DMA+0x21c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d109      	bne.n	8001196 <HAL_ADC_Start_DMA+0x5e>
 8001182:	4b75      	ldr	r3, [pc, #468]	; (8001358 <HAL_ADC_Start_DMA+0x220>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	e008      	b.n	80011a8 <HAL_ADC_Start_DMA+0x70>
 8001196:	4b71      	ldr	r3, [pc, #452]	; (800135c <HAL_ADC_Start_DMA+0x224>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf0c      	ite	eq
 80011a2:	2301      	moveq	r3, #1
 80011a4:	2300      	movne	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80c5 	beq.w	8001338 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fdf4 	bl	8001d9c <ADC_Enable>
 80011b4:	4603      	mov	r3, r0
 80011b6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 80b7 	bne.w	800132e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011dc:	d004      	beq.n	80011e8 <HAL_ADC_Start_DMA+0xb0>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a5c      	ldr	r2, [pc, #368]	; (8001354 <HAL_ADC_Start_DMA+0x21c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d106      	bne.n	80011f6 <HAL_ADC_Start_DMA+0xbe>
 80011e8:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_ADC_Start_DMA+0x220>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d010      	beq.n	8001216 <HAL_ADC_Start_DMA+0xde>
 80011f4:	e005      	b.n	8001202 <HAL_ADC_Start_DMA+0xca>
 80011f6:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_ADC_Start_DMA+0x224>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_ADC_Start_DMA+0xde>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800120a:	d004      	beq.n	8001216 <HAL_ADC_Start_DMA+0xde>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a53      	ldr	r2, [pc, #332]	; (8001360 <HAL_ADC_Start_DMA+0x228>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d115      	bne.n	8001242 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d036      	beq.n	800129e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001238:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001240:	e02d      	b.n	800129e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001256:	d004      	beq.n	8001262 <HAL_ADC_Start_DMA+0x12a>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a3d      	ldr	r2, [pc, #244]	; (8001354 <HAL_ADC_Start_DMA+0x21c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10a      	bne.n	8001278 <HAL_ADC_Start_DMA+0x140>
 8001262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	e008      	b.n	800128a <HAL_ADC_Start_DMA+0x152>
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_ADC_Start_DMA+0x228>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001296:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012aa:	d106      	bne.n	80012ba <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	f023 0206 	bic.w	r2, r3, #6
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012cc:	4a25      	ldr	r2, [pc, #148]	; (8001364 <HAL_ADC_Start_DMA+0x22c>)
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d4:	4a24      	ldr	r2, [pc, #144]	; (8001368 <HAL_ADC_Start_DMA+0x230>)
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	4a23      	ldr	r2, [pc, #140]	; (800136c <HAL_ADC_Start_DMA+0x234>)
 80012de:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	221c      	movs	r2, #28
 80012e6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0210 	orr.w	r2, r2, #16
 80012f6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3340      	adds	r3, #64	; 0x40
 8001312:	4619      	mov	r1, r3
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f001 f818 	bl	800234c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0204 	orr.w	r2, r2, #4
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	e00d      	b.n	800134a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001336:	e008      	b.n	800134a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001344:	e001      	b.n	800134a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001346:	2302      	movs	r3, #2
 8001348:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800134a:	7dfb      	ldrb	r3, [r7, #23]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	50000100 	.word	0x50000100
 8001358:	50000300 	.word	0x50000300
 800135c:	50000700 	.word	0x50000700
 8001360:	50000400 	.word	0x50000400
 8001364:	08001cd1 	.word	0x08001cd1
 8001368:	08001d4b 	.word	0x08001d4b
 800136c:	08001d67 	.word	0x08001d67

08001370 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_ADC_Stop_DMA+0x1a>
 8001386:	2302      	movs	r3, #2
 8001388:	e050      	b.n	800142c <HAL_ADC_Stop_DMA+0xbc>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001392:	216c      	movs	r1, #108	; 0x6c
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fdcb 	bl	8001f30 <ADC_ConversionStop>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d13e      	bne.n	8001422 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d10f      	bne.n	80013e0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 f820 	bl	800240a <HAL_DMA_Abort>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0210 	bic.w	r2, r2, #16
 80013ee:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fd34 	bl	8001e64 <ADC_Disable>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e002      	b.n	8001408 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fd2e 	bl	8001e64 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADCEx_Calibration_Start+0x1c>
 800144c:	2302      	movs	r3, #2
 800144e:	e05f      	b.n	8001510 <HAL_ADCEx_Calibration_Start+0xdc>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fd03 	bl	8001e64 <ADC_Disable>
 800145e:	4603      	mov	r3, r0
 8001460:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d14e      	bne.n	8001506 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800147c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001492:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014a2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80014a4:	f7ff fc24 	bl	8000cf0 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014aa:	e01c      	b.n	80014e6 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014ac:	f7ff fc20 	bl	8000cf0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d915      	bls.n	80014e6 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014c8:	d10d      	bne.n	80014e6 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f023 0312 	bic.w	r3, r3, #18
 80014d2:	f043 0210 	orr.w	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e014      	b.n	8001510 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014f4:	d0da      	beq.n	80014ac <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001518:	b480      	push	{r7}
 800151a:	b09b      	sub	sp, #108	; 0x6c
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_ADC_ConfigChannel+0x22>
 8001536:	2302      	movs	r3, #2
 8001538:	e2c8      	b.n	8001acc <HAL_ADC_ConfigChannel+0x5b4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	f040 82ac 	bne.w	8001aaa <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b04      	cmp	r3, #4
 8001558:	d81c      	bhi.n	8001594 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	461a      	mov	r2, r3
 800156e:	231f      	movs	r3, #31
 8001570:	4093      	lsls	r3, r2
 8001572:	43db      	mvns	r3, r3
 8001574:	4019      	ands	r1, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa00 f203 	lsl.w	r2, r0, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
 8001592:	e063      	b.n	800165c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d81e      	bhi.n	80015da <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	3b1e      	subs	r3, #30
 80015b0:	221f      	movs	r2, #31
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4019      	ands	r1, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	3b1e      	subs	r3, #30
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
 80015d8:	e040      	b.n	800165c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b0e      	cmp	r3, #14
 80015e0:	d81e      	bhi.n	8001620 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	3b3c      	subs	r3, #60	; 0x3c
 80015f6:	221f      	movs	r2, #31
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4019      	ands	r1, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	3b3c      	subs	r3, #60	; 0x3c
 8001612:	fa00 f203 	lsl.w	r2, r0, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
 800161e:	e01d      	b.n	800165c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	3b5a      	subs	r3, #90	; 0x5a
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	4019      	ands	r1, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3b5a      	subs	r3, #90	; 0x5a
 8001650:	fa00 f203 	lsl.w	r2, r0, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80e5 	bne.w	8001836 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b09      	cmp	r3, #9
 8001672:	d91c      	bls.n	80016ae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6999      	ldr	r1, [r3, #24]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	3b1e      	subs	r3, #30
 8001686:	2207      	movs	r2, #7
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6898      	ldr	r0, [r3, #8]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	3b1e      	subs	r3, #30
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	e019      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4019      	ands	r1, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6898      	ldr	r0, [r3, #8]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	fa00 f203 	lsl.w	r2, r0, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	3b01      	subs	r3, #1
 8001700:	2b03      	cmp	r3, #3
 8001702:	d84f      	bhi.n	80017a4 <HAL_ADC_ConfigChannel+0x28c>
 8001704:	a201      	add	r2, pc, #4	; (adr r2, 800170c <HAL_ADC_ConfigChannel+0x1f4>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	0800171d 	.word	0x0800171d
 8001710:	0800173f 	.word	0x0800173f
 8001714:	08001761 	.word	0x08001761
 8001718:	08001783 	.word	0x08001783
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001722:	4b99      	ldr	r3, [pc, #612]	; (8001988 <HAL_ADC_ConfigChannel+0x470>)
 8001724:	4013      	ands	r3, r2
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	0691      	lsls	r1, r2, #26
 800172c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800172e:	430a      	orrs	r2, r1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800173a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800173c:	e07b      	b.n	8001836 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001744:	4b90      	ldr	r3, [pc, #576]	; (8001988 <HAL_ADC_ConfigChannel+0x470>)
 8001746:	4013      	ands	r3, r2
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	0691      	lsls	r1, r2, #26
 800174e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001750:	430a      	orrs	r2, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800175c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800175e:	e06a      	b.n	8001836 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_ADC_ConfigChannel+0x470>)
 8001768:	4013      	ands	r3, r2
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	0691      	lsls	r1, r2, #26
 8001770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001772:	430a      	orrs	r2, r1
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800177e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001780:	e059      	b.n	8001836 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001788:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <HAL_ADC_ConfigChannel+0x470>)
 800178a:	4013      	ands	r3, r2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	0691      	lsls	r1, r2, #26
 8001792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001794:	430a      	orrs	r2, r1
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017a0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017a2:	e048      	b.n	8001836 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	069b      	lsls	r3, r3, #26
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017c6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	069b      	lsls	r3, r3, #26
 80017d8:	429a      	cmp	r2, r3
 80017da:	d107      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ea:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	069b      	lsls	r3, r3, #26
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800180e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	069b      	lsls	r3, r3, #26
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001832:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001834:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x33e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x33e>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_ADC_ConfigChannel+0x340>
 8001856:	2300      	movs	r3, #0
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 8131 	bne.w	8001ac0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d00f      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43da      	mvns	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	400a      	ands	r2, r1
 8001880:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001884:	e049      	b.n	800191a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d91c      	bls.n	80018e2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6999      	ldr	r1, [r3, #24]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1b      	subs	r3, #27
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	3b1b      	subs	r3, #27
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	619a      	str	r2, [r3, #24]
 80018e0:	e01b      	b.n	800191a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6959      	ldr	r1, [r3, #20]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	2207      	movs	r2, #7
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4019      	ands	r1, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6898      	ldr	r0, [r3, #8]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001922:	d004      	beq.n	800192e <HAL_ADC_ConfigChannel+0x416>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_ADC_ConfigChannel+0x474>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x41a>
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_ADC_ConfigChannel+0x478>)
 8001930:	e000      	b.n	8001934 <HAL_ADC_ConfigChannel+0x41c>
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_ADC_ConfigChannel+0x47c>)
 8001934:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b10      	cmp	r3, #16
 800193c:	d105      	bne.n	800194a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800193e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001946:	2b00      	cmp	r3, #0
 8001948:	d015      	beq.n	8001976 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800194e:	2b11      	cmp	r3, #17
 8001950:	d105      	bne.n	800195e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001962:	2b12      	cmp	r3, #18
 8001964:	f040 80ac 	bne.w	8001ac0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 80a5 	bne.w	8001ac0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197e:	d10b      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x480>
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_ADC_ConfigChannel+0x474>)
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e023      	b.n	80019ce <HAL_ADC_ConfigChannel+0x4b6>
 8001986:	bf00      	nop
 8001988:	83fff000 	.word	0x83fff000
 800198c:	50000100 	.word	0x50000100
 8001990:	50000300 	.word	0x50000300
 8001994:	50000700 	.word	0x50000700
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <HAL_ADC_ConfigChannel+0x5c0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d103      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x492>
 80019a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e011      	b.n	80019ce <HAL_ADC_ConfigChannel+0x4b6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <HAL_ADC_ConfigChannel+0x5c4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d102      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x4a2>
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_ADC_ConfigChannel+0x5c8>)
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e009      	b.n	80019ce <HAL_ADC_ConfigChannel+0x4b6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a48      	ldr	r2, [pc, #288]	; (8001ae0 <HAL_ADC_ConfigChannel+0x5c8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x4b2>
 80019c4:	4b45      	ldr	r3, [pc, #276]	; (8001adc <HAL_ADC_ConfigChannel+0x5c4>)
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e001      	b.n	80019ce <HAL_ADC_ConfigChannel+0x4b6>
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x4d6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x4d6>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x4d8>
 80019ee:	2300      	movs	r3, #0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d150      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x4fe>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x4fe>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x500>
 8001a16:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d13c      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b10      	cmp	r3, #16
 8001a22:	d11d      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x548>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a2c:	d118      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a38:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9a      	lsrs	r2, r3, #18
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a5e:	e02e      	b.n	8001abe <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b11      	cmp	r3, #17
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x568>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a70:	d106      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a7e:	e01e      	b.n	8001abe <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b12      	cmp	r3, #18
 8001a86:	d11a      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a92:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a94:	e013      	b.n	8001abe <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f043 0220 	orr.w	r2, r3, #32
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001aa8:	e00a      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001abc:	e000      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001abe:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ac8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	376c      	adds	r7, #108	; 0x6c
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	50000100 	.word	0x50000100
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	50000500 	.word	0x50000500
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b099      	sub	sp, #100	; 0x64
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b04:	d102      	bne.n	8001b0c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b06:	4b6d      	ldr	r3, [pc, #436]	; (8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	e01a      	b.n	8001b42 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6a      	ldr	r2, [pc, #424]	; (8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d103      	bne.n	8001b1e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001b16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	e011      	b.n	8001b42 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a67      	ldr	r2, [pc, #412]	; (8001cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d102      	bne.n	8001b2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	e009      	b.n	8001b42 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a64      	ldr	r2, [pc, #400]	; (8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d102      	bne.n	8001b3e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	e001      	b.n	8001b42 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0b0      	b.n	8001cae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e0a9      	b.n	8001cae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 808d 	bne.w	8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8086 	bne.w	8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b88:	d004      	beq.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001b94:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001b96:	e000      	b.n	8001b9a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001b9a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d040      	beq.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb6:	035b      	lsls	r3, r3, #13
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bbe:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001be0:	2300      	movs	r3, #0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d15c      	bne.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001c02:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d14b      	bne.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c10:	f023 030f 	bic.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	6811      	ldr	r1, [r2, #0]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6892      	ldr	r2, [r2, #8]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c22:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c24:	e03c      	b.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c30:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001c52:	2300      	movs	r3, #0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d123      	bne.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001c74:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c82:	f023 030f 	bic.w	r3, r3, #15
 8001c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c88:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c8a:	e009      	b.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ca0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3764      	adds	r7, #100	; 0x64
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	50000100 	.word	0x50000100
 8001cc0:	50000400 	.word	0x50000400
 8001cc4:	50000500 	.word	0x50000500
 8001cc8:	50000300 	.word	0x50000300
 8001ccc:	50000700 	.word	0x50000700

08001cd0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d126      	bne.n	8001d38 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d115      	bne.n	8001d30 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7fe fd1f 	bl	8000774 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d36:	e004      	b.n	8001d42 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f7fe fff9 	bl	8000d50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f043 0204 	orr.w	r2, r3, #4
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7fe ffe9 	bl	8000d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <ADC_Enable+0x2c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <ADC_Enable+0x2c>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <ADC_Enable+0x2e>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d143      	bne.n	8001e56 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <ADC_Enable+0xc4>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f043 0210 	orr.w	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e02f      	b.n	8001e58 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e08:	f7fe ff72 	bl	8000cf0 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e0e:	e01b      	b.n	8001e48 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e10:	f7fe ff6e 	bl	8000cf0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d914      	bls.n	8001e48 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d00d      	beq.n	8001e48 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e007      	b.n	8001e58 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d1dc      	bne.n	8001e10 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	8000003f 	.word	0x8000003f

08001e64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <ADC_Disable+0x2c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <ADC_Disable+0x2c>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <ADC_Disable+0x2e>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d047      	beq.n	8001f26 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030d 	and.w	r3, r3, #13
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10f      	bne.n	8001ec4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0202 	orr.w	r2, r2, #2
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe ff18 	bl	8000cf0 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ec2:	e029      	b.n	8001f18 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0210 	orr.w	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e023      	b.n	8001f28 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ee0:	f7fe ff06 	bl	8000cf0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d914      	bls.n	8001f18 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10d      	bne.n	8001f18 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0210 	orr.w	r2, r3, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d0dc      	beq.n	8001ee0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 809b 	beq.w	800208c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f64:	d12a      	bne.n	8001fbc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d126      	bne.n	8001fbc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d122      	bne.n	8001fbc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001f76:	230c      	movs	r3, #12
 8001f78:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f7a:	e014      	b.n	8001fa6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4a46      	ldr	r2, [pc, #280]	; (8002098 <ADC_ConversionStop+0x168>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d90d      	bls.n	8001fa0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0210 	orr.w	r2, r3, #16
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e076      	b.n	800208e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d1e3      	bne.n	8001f7c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b60      	cmp	r3, #96	; 0x60
 8001fc0:	d015      	beq.n	8001fee <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d10e      	bne.n	8001fee <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d107      	bne.n	8001fee <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0210 	orr.w	r2, r2, #16
 8001fec:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d015      	beq.n	8002020 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d10e      	bne.n	8002020 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b60      	cmp	r3, #96	; 0x60
 8002024:	d005      	beq.n	8002032 <ADC_ConversionStop+0x102>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b6c      	cmp	r3, #108	; 0x6c
 800202a:	d105      	bne.n	8002038 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800202c:	230c      	movs	r3, #12
 800202e:	617b      	str	r3, [r7, #20]
        break;
 8002030:	e005      	b.n	800203e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002032:	2308      	movs	r3, #8
 8002034:	617b      	str	r3, [r7, #20]
        break;
 8002036:	e002      	b.n	800203e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002038:	2304      	movs	r3, #4
 800203a:	617b      	str	r3, [r7, #20]
        break;
 800203c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800203e:	f7fe fe57 	bl	8000cf0 <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002044:	e01b      	b.n	800207e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002046:	f7fe fe53 	bl	8000cf0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b0b      	cmp	r3, #11
 8002052:	d914      	bls.n	800207e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e007      	b.n	800208e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1dc      	bne.n	8002046 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	000993ff 	.word	0x000993ff

0800209c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff3e 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff8e 	bl	8002190 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff31 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa2 	bl	80021f8 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e037      	b.n	8002344 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f97a 	bl	8002620 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}  
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_DMA_Start_IT+0x20>
 8002368:	2302      	movs	r3, #2
 800236a:	e04a      	b.n	8002402 <HAL_DMA_Start_IT+0xb6>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800237a:	2b01      	cmp	r3, #1
 800237c:	d13a      	bne.n	80023f4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2202      	movs	r2, #2
 8002382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f90d 	bl	80025c2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 020e 	orr.w	r2, r2, #14
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e00f      	b.n	80023e2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 020a 	orr.w	r2, r2, #10
 80023d0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0204 	bic.w	r2, r2, #4
 80023e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e005      	b.n	8002400 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
 80023fe:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002400:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002418:	2b02      	cmp	r3, #2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e020      	b.n	8002470 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 020e 	bic.w	r2, r2, #14
 800243c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2204      	movs	r2, #4
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d024      	beq.n	80024ee <HAL_DMA_IRQHandler+0x72>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01f      	beq.n	80024ee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	2104      	movs	r1, #4
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06a      	beq.n	80025ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80024ec:	e065      	b.n	80025ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2202      	movs	r2, #2
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_IRQHandler+0xdc>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d027      	beq.n	8002558 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 020a 	bic.w	r2, r2, #10
 8002524:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	2102      	movs	r1, #2
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d035      	beq.n	80025ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002556:	e030      	b.n	80025ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2208      	movs	r2, #8
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d028      	beq.n	80025ba <HAL_DMA_IRQHandler+0x13e>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d023      	beq.n	80025ba <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020e 	bic.w	r2, r2, #14
 8002580:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
    }
  }
}  
 80025b8:	e7ff      	b.n	80025ba <HAL_DMA_IRQHandler+0x13e>
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d108      	bne.n	8002602 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002600:	e007      	b.n	8002612 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	60da      	str	r2, [r3, #12]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <DMA_CalcBaseAndBitshift+0x60>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d80f      	bhi.n	8002654 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <DMA_CalcBaseAndBitshift+0x64>)
 800263c:	4413      	add	r3, r2
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <DMA_CalcBaseAndBitshift+0x68>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <DMA_CalcBaseAndBitshift+0x6c>)
 8002650:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002652:	e00e      	b.n	8002672 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <DMA_CalcBaseAndBitshift+0x70>)
 800265c:	4413      	add	r3, r2
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <DMA_CalcBaseAndBitshift+0x68>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <DMA_CalcBaseAndBitshift+0x74>)
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40020407 	.word	0x40020407
 8002684:	bffdfff8 	.word	0xbffdfff8
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	40020000 	.word	0x40020000
 8002690:	bffdfbf8 	.word	0xbffdfbf8
 8002694:	40020400 	.word	0x40020400

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a6:	e154      	b.n	8002952 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4013      	ands	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8146 	beq.w	800294c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d005      	beq.n	80026d8 <HAL_GPIO_Init+0x40>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d130      	bne.n	800273a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270e:	2201      	movs	r2, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0201 	and.w	r2, r3, #1
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b03      	cmp	r3, #3
 8002744:	d017      	beq.n	8002776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d123      	bne.n	80027ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	6939      	ldr	r1, [r7, #16]
 80027c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0203 	and.w	r2, r3, #3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80a0 	beq.w	800294c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280c:	4b58      	ldr	r3, [pc, #352]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002824:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_GPIO_Init+0x2dc>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800284e:	d019      	beq.n	8002884 <HAL_GPIO_Init+0x1ec>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a49      	ldr	r2, [pc, #292]	; (8002978 <HAL_GPIO_Init+0x2e0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <HAL_GPIO_Init+0x1e8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a48      	ldr	r2, [pc, #288]	; (800297c <HAL_GPIO_Init+0x2e4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00d      	beq.n	800287c <HAL_GPIO_Init+0x1e4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a47      	ldr	r2, [pc, #284]	; (8002980 <HAL_GPIO_Init+0x2e8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <HAL_GPIO_Init+0x1e0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_GPIO_Init+0x2ec>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_GPIO_Init+0x1dc>
 8002870:	2304      	movs	r3, #4
 8002872:	e008      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002874:	2305      	movs	r3, #5
 8002876:	e006      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002878:	2303      	movs	r3, #3
 800287a:	e004      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 800287c:	2302      	movs	r3, #2
 800287e:	e002      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002884:	2300      	movs	r3, #0
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	4093      	lsls	r3, r2
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002896:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_GPIO_Init+0x2dc>)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a4:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028c8:	4a2f      	ldr	r2, [pc, #188]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028f2:	4a25      	ldr	r2, [pc, #148]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800291c:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f aea3 	bne.w	80026a8 <HAL_GPIO_Init+0x10>
  }
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00
 8002984:	48001000 	.word	0x48001000
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e001      	b.n	80029ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fed0 	bl	80007b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e081      	b.n	8002b32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd ff98 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e006      	b.n	8002aa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d104      	bne.n	8002ab6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69d9      	ldr	r1, [r3, #28]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d138      	bne.n	8002bc2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e032      	b.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2224      	movs	r2, #36	; 0x24
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
  }
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d139      	bne.n	8002c5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e033      	b.n	8002c5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	af06      	add	r7, sp, #24
 8002c6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0c4      	b.n	8002e04 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f007 fe4a 	bl	800a928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 fd70 	bl	8006786 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e040      	b.n	8002d2e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3303      	adds	r3, #3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3338      	adds	r3, #56	; 0x38
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	333c      	adds	r3, #60	; 0x3c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	3340      	adds	r3, #64	; 0x40
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3b9      	bcc.n	8002cac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e044      	b.n	8002dc8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3b5      	bcc.n	8002d3e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	687e      	ldr	r6, [r7, #4]
 8002dda:	466d      	mov	r5, sp
 8002ddc:	f106 0410 	add.w	r4, r6, #16
 8002de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	1d33      	adds	r3, r6, #4
 8002dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f003 fce5 	bl	80067bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_PCD_Start+0x16>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e016      	b.n	8002e50 <HAL_PCD_Start+0x44>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fc92 	bl	8006758 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e34:	2101      	movs	r1, #1
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f008 f814 	bl	800ae64 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f005 ff52 	bl	8008cea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 ff4b 	bl	8008d00 <USB_ReadInterrupts>
 8002e6a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fab2 	bl	80033e0 <PCD_EP_ISR_Handler>

    return;
 8002e7c:	e0bd      	b.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f007 fde2 	bl	800aa6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f8a9 	bl	8003000 <HAL_PCD_SetAddress>

    return;
 8002eae:	e0a4      	b.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00c      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ed2:	e092      	b.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00c      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ef6:	e080      	b.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d027      	beq.n	8002f52 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0204 	bic.w	r2, r2, #4
 8002f14:	b292      	uxth	r2, r2
 8002f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0208 	bic.w	r2, r2, #8
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f007 fdd2 	bl	800aadc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f50:	e053      	b.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d027      	beq.n	8002fac <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f86:	b292      	uxth	r2, r2
 8002f88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0204 	orr.w	r2, r2, #4
 8002f9e:	b292      	uxth	r2, r2
 8002fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f007 fd7f 	bl	800aaa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002faa:	e026      	b.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00f      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f007 fd3d 	bl	800aa4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fd4:	e011      	b.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00c      	beq.n	8002ffa <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ff8:	bf00      	nop
  }
}
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_PCD_SetAddress+0x1a>
 8003016:	2302      	movs	r3, #2
 8003018:	e013      	b.n	8003042 <HAL_PCD_SetAddress+0x42>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f005 fe45 	bl	8008cc2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	4608      	mov	r0, r1
 8003054:	4611      	mov	r1, r2
 8003056:	461a      	mov	r2, r3
 8003058:	4603      	mov	r3, r0
 800305a:	70fb      	strb	r3, [r7, #3]
 800305c:	460b      	mov	r3, r1
 800305e:	803b      	strh	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da0e      	bge.n	800308e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	705a      	strb	r2, [r3, #1]
 800308c:	e00e      	b.n	80030ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 0207 	and.w	r2, r3, #7
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030b8:	883a      	ldrh	r2, [r7, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	78ba      	ldrb	r2, [r7, #2]
 80030c2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030c4:	78bb      	ldrb	r3, [r7, #2]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d102      	bne.n	80030d0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_PCD_EP_Open+0x94>
 80030da:	2302      	movs	r3, #2
 80030dc:	e00e      	b.n	80030fc <HAL_PCD_EP_Open+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fb87 	bl	8006800 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80030fa:	7afb      	ldrb	r3, [r7, #11]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da0e      	bge.n	8003136 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	705a      	strb	r2, [r3, #1]
 8003134:	e00e      	b.n	8003154 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 0207 	and.w	r2, r3, #7
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_PCD_EP_Close+0x6a>
 800316a:	2302      	movs	r3, #2
 800316c:	e00e      	b.n	800318c <HAL_PCD_EP_Close+0x88>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68f9      	ldr	r1, [r7, #12]
 800317c:	4618      	mov	r0, r3
 800317e:	f003 ff03 	bl	8006f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	460b      	mov	r3, r1
 80031a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	7afb      	ldrb	r3, [r7, #11]
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d4:	7afb      	ldrb	r3, [r7, #11]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6979      	ldr	r1, [r7, #20]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 f8bb 	bl	8007362 <USB_EPStartXfer>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	f003 0207 	and.w	r2, r3, #7
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003218:	681b      	ldr	r3, [r3, #0]
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	460b      	mov	r3, r1
 8003234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4413      	add	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2201      	movs	r2, #1
 8003270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003272:	7afb      	ldrb	r3, [r7, #11]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	b2da      	uxtb	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6979      	ldr	r1, [r7, #20]
 8003284:	4618      	mov	r0, r3
 8003286:	f004 f86c 	bl	8007362 <USB_EPStartXfer>

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 0207 	and.w	r2, r3, #7
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d901      	bls.n	80032b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e03e      	b.n	8003330 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da0e      	bge.n	80032d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	705a      	strb	r2, [r3, #1]
 80032d6:	e00c      	b.n	80032f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_PCD_EP_SetStall+0x7e>
 800330e:	2302      	movs	r3, #2
 8003310:	e00e      	b.n	8003330 <HAL_PCD_EP_SetStall+0x9c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	4618      	mov	r0, r3
 8003322:	f005 fbcf 	bl	8008ac4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 020f 	and.w	r2, r3, #15
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d901      	bls.n	8003356 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e040      	b.n	80033d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335a:	2b00      	cmp	r3, #0
 800335c:	da0e      	bge.n	800337c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	705a      	strb	r2, [r3, #1]
 800337a:	e00e      	b.n	800339a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 0207 	and.w	r2, r3, #7
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_PCD_EP_ClrStall+0x82>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e00e      	b.n	80033d8 <HAL_PCD_EP_ClrStall+0xa0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f005 fbcc 	bl	8008b66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b096      	sub	sp, #88	; 0x58
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033e8:	e3bf      	b.n	8003b6a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003404:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 8179 	bne.w	8003700 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800340e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d152      	bne.n	80034c0 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	81fb      	strh	r3, [r7, #14]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3328      	adds	r3, #40	; 0x28
 8003442:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344c:	b29b      	uxth	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	3302      	adds	r3, #2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	441a      	add	r2, r3
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800347e:	2100      	movs	r1, #0
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f007 faca 	bl	800aa1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 836b 	beq.w	8003b6a <PCD_EP_ISR_Handler+0x78a>
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8366 	bne.w	8003b6a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b292      	uxth	r2, r2
 80034b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034be:	e354      	b.n	8003b6a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034c6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d034      	beq.n	8003548 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	3306      	adds	r3, #6
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003508:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003516:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800351c:	b29b      	uxth	r3, r3
 800351e:	f005 fc45 	bl	8008dac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29a      	uxth	r2, r3
 800352a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800352e:	4013      	ands	r3, r2
 8003530:	823b      	strh	r3, [r7, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	8a3a      	ldrh	r2, [r7, #16]
 8003538:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800353c:	b292      	uxth	r2, r2
 800353e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f007 fa3d 	bl	800a9c0 <HAL_PCD_SetupStageCallback>
 8003546:	e310      	b.n	8003b6a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003548:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800354c:	2b00      	cmp	r3, #0
 800354e:	f280 830c 	bge.w	8003b6a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29a      	uxth	r2, r3
 800355a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800355e:	4013      	ands	r3, r2
 8003560:	83fb      	strh	r3, [r7, #30]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	8bfa      	ldrh	r2, [r7, #30]
 8003568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800356c:	b292      	uxth	r2, r2
 800356e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003578:	b29b      	uxth	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	3306      	adds	r3, #6
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800359c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d019      	beq.n	80035d8 <PCD_EP_ISR_Handler+0x1f8>
 80035a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b2:	6959      	ldr	r1, [r3, #20]
 80035b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f005 fbf5 	bl	8008dac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	441a      	add	r2, r3
 80035cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035d0:	2100      	movs	r1, #0
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f007 fa06 	bl	800a9e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 82bd 	bne.w	8003b6a <PCD_EP_ISR_Handler+0x78a>
 80035f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035fc:	f000 82b5 	beq.w	8003b6a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4413      	add	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800362a:	b29a      	uxth	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b3e      	cmp	r3, #62	; 0x3e
 8003636:	d91d      	bls.n	8003674 <PCD_EP_ISR_Handler+0x294>
 8003638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
 8003640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <PCD_EP_ISR_Handler+0x272>
 800364c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364e:	3b01      	subs	r3, #1
 8003650:	647b      	str	r3, [r7, #68]	; 0x44
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29a      	uxth	r2, r3
 8003658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365a:	b29b      	uxth	r3, r3
 800365c:	029b      	lsls	r3, r3, #10
 800365e:	b29b      	uxth	r3, r3
 8003660:	4313      	orrs	r3, r2
 8003662:	b29b      	uxth	r3, r3
 8003664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366c:	b29a      	uxth	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	801a      	strh	r2, [r3, #0]
 8003672:	e026      	b.n	80036c2 <PCD_EP_ISR_Handler+0x2e2>
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <PCD_EP_ISR_Handler+0x2b2>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800368a:	b29a      	uxth	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	801a      	strh	r2, [r3, #0]
 8003690:	e017      	b.n	80036c2 <PCD_EP_ISR_Handler+0x2e2>
 8003692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
 800369a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <PCD_EP_ISR_Handler+0x2cc>
 80036a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a8:	3301      	adds	r3, #1
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b29a      	uxth	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	827b      	strh	r3, [r7, #18]
 80036d4:	8a7b      	ldrh	r3, [r7, #18]
 80036d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036da:	827b      	strh	r3, [r7, #18]
 80036dc:	8a7b      	ldrh	r3, [r7, #18]
 80036de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036e2:	827b      	strh	r3, [r7, #18]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	8a7b      	ldrh	r3, [r7, #18]
 80036ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8013      	strh	r3, [r2, #0]
 80036fe:	e234      	b.n	8003b6a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003714:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003718:	2b00      	cmp	r3, #0
 800371a:	f280 80fc 	bge.w	8003916 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29a      	uxth	r2, r3
 8003730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003734:	4013      	ands	r3, r2
 8003736:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800374c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003750:	b292      	uxth	r2, r2
 8003752:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003754:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800376a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376c:	7b1b      	ldrb	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d125      	bne.n	80037be <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	3306      	adds	r3, #6
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800379a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800379e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8092 	beq.w	80038cc <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ae:	6959      	ldr	r1, [r3, #20]
 80037b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b2:	88da      	ldrh	r2, [r3, #6]
 80037b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037b8:	f005 faf8 	bl	8008dac <USB_ReadPMA>
 80037bc:	e086      	b.n	80038cc <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c0:	78db      	ldrb	r3, [r3, #3]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d10a      	bne.n	80037dc <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037ca:	461a      	mov	r2, r3
 80037cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f9d9 	bl	8003b86 <HAL_PCD_EP_DB_Receive>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80037da:	e077      	b.n	80038cc <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800380c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800381c:	b29b      	uxth	r3, r3
 800381e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003842:	b29b      	uxth	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	3302      	adds	r3, #2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003862:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003866:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d02e      	beq.n	80038cc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003874:	6959      	ldr	r1, [r3, #20]
 8003876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003878:	891a      	ldrh	r2, [r3, #8]
 800387a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800387e:	f005 fa95 	bl	8008dac <USB_ReadPMA>
 8003882:	e023      	b.n	80038cc <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	3306      	adds	r3, #6
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80038b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	6959      	ldr	r1, [r3, #20]
 80038c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c2:	895a      	ldrh	r2, [r3, #10]
 80038c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038c8:	f005 fa70 	bl	8008dac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038d4:	441a      	add	r2, r3
 80038d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038e2:	441a      	add	r2, r3
 80038e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <PCD_EP_ISR_Handler+0x51c>
 80038f0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80038f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d206      	bcs.n	800390a <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f007 f86e 	bl	800a9e4 <HAL_PCD_DataOutStageCallback>
 8003908:	e005      	b.n	8003916 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fd26 	bl	8007362 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8123 	beq.w	8003b6a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003924:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	441a      	add	r2, r3
 8003964:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800396c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003970:	b29b      	uxth	r3, r3
 8003972:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003976:	78db      	ldrb	r3, [r3, #3]
 8003978:	2b01      	cmp	r3, #1
 800397a:	f040 80a2 	bne.w	8003ac2 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800397e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003986:	7b1b      	ldrb	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8093 	beq.w	8003ab4 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800398e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d046      	beq.n	8003a28 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800399a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d126      	bne.n	80039f0 <PCD_EP_ISR_Handler+0x610>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	4413      	add	r3, r2
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	011a      	lsls	r2, r3, #4
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	4413      	add	r3, r2
 80039c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	801a      	strh	r2, [r3, #0]
 80039ee:	e061      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x6d4>
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d15d      	bne.n	8003ab4 <PCD_EP_ISR_Handler+0x6d4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	4413      	add	r3, r2
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	011a      	lsls	r2, r3, #4
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	4413      	add	r3, r2
 8003a1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	2200      	movs	r2, #0
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	e045      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d126      	bne.n	8003a84 <PCD_EP_ISR_Handler+0x6a4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	4413      	add	r3, r2
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	011a      	lsls	r2, r3, #4
 8003a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a56:	4413      	add	r3, r2
 8003a58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	801a      	strh	r2, [r3, #0]
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	801a      	strh	r2, [r3, #0]
 8003a82:	e017      	b.n	8003ab4 <PCD_EP_ISR_Handler+0x6d4>
 8003a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d113      	bne.n	8003ab4 <PCD_EP_ISR_Handler+0x6d4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	4413      	add	r3, r2
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	011a      	lsls	r2, r3, #4
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f006 ffad 	bl	800aa1a <HAL_PCD_DataInStageCallback>
 8003ac0:	e053      	b.n	8003b6a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ac2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d146      	bne.n	8003b5c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d907      	bls.n	8003b16 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b12:	619a      	str	r2, [r3, #24]
 8003b14:	e002      	b.n	8003b1c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f006 ff75 	bl	800aa1a <HAL_PCD_DataInStageCallback>
 8003b30:	e01b      	b.n	8003b6a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b3a:	441a      	add	r2, r3
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b48:	441a      	add	r2, r3
 8003b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b54:	4618      	mov	r0, r3
 8003b56:	f003 fc04 	bl	8007362 <USB_EPStartXfer>
 8003b5a:	e006      	b.n	8003b6a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b60:	461a      	mov	r2, r3
 8003b62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f91b 	bl	8003da0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f6ff ac37 	blt.w	80033ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3758      	adds	r7, #88	; 0x58
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b088      	sub	sp, #32
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	4613      	mov	r3, r2
 8003b92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d07e      	beq.n	8003c9c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	8b7b      	ldrh	r3, [r7, #26]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d306      	bcc.n	8003be0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	1ad2      	subs	r2, r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	619a      	str	r2, [r3, #24]
 8003bde:	e002      	b.n	8003be6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d123      	bne.n	8003c36 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	833b      	strh	r3, [r7, #24]
 8003c0a:	8b3b      	ldrh	r3, [r7, #24]
 8003c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c10:	833b      	strh	r3, [r7, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	8b3b      	ldrh	r3, [r7, #24]
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01f      	beq.n	8003c80 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	82fb      	strh	r3, [r7, #22]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	8afb      	ldrh	r3, [r7, #22]
 8003c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c80:	8b7b      	ldrh	r3, [r7, #26]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8087 	beq.w	8003d96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6959      	ldr	r1, [r3, #20]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	891a      	ldrh	r2, [r3, #8]
 8003c94:	8b7b      	ldrh	r3, [r7, #26]
 8003c96:	f005 f889 	bl	8008dac <USB_ReadPMA>
 8003c9a:	e07c      	b.n	8003d96 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3306      	adds	r3, #6
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	8b7b      	ldrh	r3, [r7, #26]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d306      	bcc.n	8003cde <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	8b7b      	ldrh	r3, [r7, #26]
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	619a      	str	r2, [r3, #24]
 8003cdc:	e002      	b.n	8003ce4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d123      	bne.n	8003d34 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	83fb      	strh	r3, [r7, #30]
 8003d08:	8bfb      	ldrh	r3, [r7, #30]
 8003d0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d0e:	83fb      	strh	r3, [r7, #30]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	8bfb      	ldrh	r3, [r7, #30]
 8003d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d11f      	bne.n	8003d7e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	83bb      	strh	r3, [r7, #28]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	8bbb      	ldrh	r3, [r7, #28]
 8003d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d7e:	8b7b      	ldrh	r3, [r7, #26]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6959      	ldr	r1, [r3, #20]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	895a      	ldrh	r2, [r3, #10]
 8003d90:	8b7b      	ldrh	r3, [r7, #26]
 8003d92:	f005 f80b 	bl	8008dac <USB_ReadPMA>
    }
  }

  return count;
 8003d96:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0a4      	sub	sp, #144	; 0x90
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 81dd 	beq.w	8004174 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d907      	bls.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003dfa:	1ad2      	subs	r2, r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	619a      	str	r2, [r3, #24]
 8003e00:	e002      	b.n	8003e08 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 80b9 	bne.w	8003f84 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d126      	bne.n	8003e68 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	4413      	add	r3, r2
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	011a      	lsls	r2, r3, #4
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e01a      	b.n	8003e9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d116      	bne.n	8003e9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	4413      	add	r3, r2
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	011a      	lsls	r2, r3, #4
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e90:	4413      	add	r3, r2
 8003e92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d126      	bne.n	8003efa <HAL_PCD_EP_DB_Transmit+0x15a>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	011a      	lsls	r2, r3, #4
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	801a      	strh	r2, [r3, #0]
 8003ef8:	e017      	b.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d113      	bne.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	4413      	add	r3, r2
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	011a      	lsls	r2, r3, #4
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2200      	movs	r2, #0
 8003f28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f006 fd72 	bl	800aa1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 82fc 	beq.w	800453a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	82fb      	strh	r3, [r7, #22]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	8afb      	ldrh	r3, [r7, #22]
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]
 8003f82:	e2da      	b.n	800453a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d021      	beq.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 82ae 	bne.w	800453a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	429a      	cmp	r2, r3
 8004004:	d30b      	bcc.n	800401e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6a1a      	ldr	r2, [r3, #32]
 8004012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	621a      	str	r2, [r3, #32]
 800401c:	e017      	b.n	800404e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d108      	bne.n	8004038 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004026:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800402a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004036:	e00a      	b.n	800404e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2200      	movs	r2, #0
 800404c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d165      	bne.n	8004122 <HAL_PCD_EP_DB_Transmit+0x382>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	4413      	add	r3, r2
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	011a      	lsls	r2, r3, #4
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	4413      	add	r3, r2
 8004078:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800407c:	63bb      	str	r3, [r7, #56]	; 0x38
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004088:	b29a      	uxth	r2, r3
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	801a      	strh	r2, [r3, #0]
 800408e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004092:	2b3e      	cmp	r3, #62	; 0x3e
 8004094:	d91d      	bls.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x332>
 8004096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	64bb      	str	r3, [r7, #72]	; 0x48
 800409e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x310>
 80040aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ac:	3b01      	subs	r3, #1
 80040ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4313      	orrs	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	801a      	strh	r2, [r3, #0]
 80040d0:	e044      	b.n	800415c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x350>
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	e035      	b.n	800415c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_PCD_EP_DB_Transmit+0x36a>
 8004104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004106:	3301      	adds	r3, #1
 8004108:	64bb      	str	r3, [r7, #72]	; 0x48
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29a      	uxth	r2, r3
 8004110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004112:	b29b      	uxth	r3, r3
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	b29b      	uxth	r3, r3
 8004118:	4313      	orrs	r3, r2
 800411a:	b29a      	uxth	r2, r3
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	e01c      	b.n	800415c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d118      	bne.n	800415c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004138:	b29b      	uxth	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	4413      	add	r3, r2
 8004140:	647b      	str	r3, [r7, #68]	; 0x44
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	011a      	lsls	r2, r3, #4
 8004148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414a:	4413      	add	r3, r2
 800414c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004150:	643b      	str	r3, [r7, #64]	; 0x40
 8004152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004156:	b29a      	uxth	r2, r3
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6959      	ldr	r1, [r3, #20]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	891a      	ldrh	r2, [r3, #8]
 8004168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416c:	b29b      	uxth	r3, r3
 800416e:	f004 fdd7 	bl	8008d20 <USB_WritePMA>
 8004172:	e1e2      	b.n	800453a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417c:	b29b      	uxth	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	3306      	adds	r3, #6
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d307      	bcc.n	80041bc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041b4:	1ad2      	subs	r2, r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	619a      	str	r2, [r3, #24]
 80041ba:	e002      	b.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2200      	movs	r2, #0
 80041c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 80c0 	bne.w	800434c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d126      	bne.n	8004222 <HAL_PCD_EP_DB_Transmit+0x482>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e8:	4413      	add	r3, r2
 80041ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	011a      	lsls	r2, r3, #4
 80041f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041f4:	4413      	add	r3, r2
 80041f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80041fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004206:	b29a      	uxth	r2, r3
 8004208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800421a:	b29a      	uxth	r2, r3
 800421c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	e01a      	b.n	8004258 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d116      	bne.n	8004258 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	667b      	str	r3, [r7, #100]	; 0x64
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004238:	b29b      	uxth	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423e:	4413      	add	r3, r2
 8004240:	667b      	str	r3, [r7, #100]	; 0x64
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	011a      	lsls	r2, r3, #4
 8004248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800424a:	4413      	add	r3, r2
 800424c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004250:	663b      	str	r3, [r7, #96]	; 0x60
 8004252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004254:	2200      	movs	r2, #0
 8004256:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	677b      	str	r3, [r7, #116]	; 0x74
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12b      	bne.n	80042be <HAL_PCD_EP_DB_Transmit+0x51e>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427a:	4413      	add	r3, r2
 800427c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	011a      	lsls	r2, r3, #4
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	4413      	add	r3, r2
 8004288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800428c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800429c:	b29a      	uxth	r2, r3
 800429e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e017      	b.n	80042ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d113      	bne.n	80042ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	4413      	add	r3, r2
 80042d6:	677b      	str	r3, [r7, #116]	; 0x74
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	011a      	lsls	r2, r3, #4
 80042de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042e6:	673b      	str	r3, [r7, #112]	; 0x70
 80042e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ea:	2200      	movs	r2, #0
 80042ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f006 fb90 	bl	800aa1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 811a 	bne.w	800453a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004320:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]
 800434a:	e0f6      	b.n	800453a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d121      	bne.n	800439a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	441a      	add	r2, r3
 8004382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 80ca 	bne.w	800453a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043ae:	441a      	add	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043bc:	441a      	add	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d30b      	bcc.n	80043e6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	621a      	str	r2, [r3, #32]
 80043e4:	e017      	b.n	8004416 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043fe:	e00a      	b.n	8004416 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2200      	movs	r2, #0
 800440c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	657b      	str	r3, [r7, #84]	; 0x54
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d165      	bne.n	80044f0 <HAL_PCD_EP_DB_Transmit+0x750>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004432:	b29b      	uxth	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004438:	4413      	add	r3, r2
 800443a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	011a      	lsls	r2, r3, #4
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	4413      	add	r3, r2
 8004446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800444a:	65bb      	str	r3, [r7, #88]	; 0x58
 800444c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004456:	b29a      	uxth	r2, r3
 8004458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004460:	2b3e      	cmp	r3, #62	; 0x3e
 8004462:	d91d      	bls.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x700>
 8004464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	66bb      	str	r3, [r7, #104]	; 0x68
 800446c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <HAL_PCD_EP_DB_Transmit+0x6de>
 8004478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447a:	3b01      	subs	r3, #1
 800447c:	66bb      	str	r3, [r7, #104]	; 0x68
 800447e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29a      	uxth	r2, r3
 8004484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004486:	b29b      	uxth	r3, r3
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	b29b      	uxth	r3, r3
 800448c:	4313      	orrs	r3, r2
 800448e:	b29b      	uxth	r3, r3
 8004490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004498:	b29a      	uxth	r2, r3
 800449a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	e041      	b.n	8004524 <HAL_PCD_EP_DB_Transmit+0x784>
 80044a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <HAL_PCD_EP_DB_Transmit+0x71e>
 80044a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e032      	b.n	8004524 <HAL_PCD_EP_DB_Transmit+0x784>
 80044be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x738>
 80044d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d4:	3301      	adds	r3, #1
 80044d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80044d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	4313      	orrs	r3, r2
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e019      	b.n	8004524 <HAL_PCD_EP_DB_Transmit+0x784>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d115      	bne.n	8004524 <HAL_PCD_EP_DB_Transmit+0x784>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004506:	4413      	add	r3, r2
 8004508:	657b      	str	r3, [r7, #84]	; 0x54
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	011a      	lsls	r2, r3, #4
 8004510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004512:	4413      	add	r3, r2
 8004514:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004518:	653b      	str	r3, [r7, #80]	; 0x50
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800451e:	b29a      	uxth	r2, r3
 8004520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004522:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	6959      	ldr	r1, [r3, #20]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	895a      	ldrh	r2, [r3, #10]
 8004530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004534:	b29b      	uxth	r3, r3
 8004536:	f004 fbf3 	bl	8008d20 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	82bb      	strh	r3, [r7, #20]
 8004556:	8abb      	ldrh	r3, [r7, #20]
 8004558:	f083 0310 	eor.w	r3, r3, #16
 800455c:	82bb      	strh	r3, [r7, #20]
 800455e:	8abb      	ldrh	r3, [r7, #20]
 8004560:	f083 0320 	eor.w	r3, r3, #32
 8004564:	82bb      	strh	r3, [r7, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	8abb      	ldrh	r3, [r7, #20]
 8004576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	b29b      	uxth	r3, r3
 8004588:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3790      	adds	r7, #144	; 0x90
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	817b      	strh	r3, [r7, #10]
 80045a2:	4613      	mov	r3, r2
 80045a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045a6:	897b      	ldrh	r3, [r7, #10]
 80045a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e009      	b.n	80045de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045ca:	897a      	ldrh	r2, [r7, #10]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045de:	893b      	ldrh	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d107      	bne.n	80045f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	80da      	strh	r2, [r3, #6]
 80045f2:	e00b      	b.n	800460c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2201      	movs	r2, #1
 80045f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b29a      	uxth	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004622:	af00      	add	r7, sp, #0
 8004624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800462c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f001 b823 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 817d 	beq.w	8004952 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004658:	4bbc      	ldr	r3, [pc, #752]	; (800494c <HAL_RCC_OscConfig+0x330>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b04      	cmp	r3, #4
 8004662:	d00c      	beq.n	800467e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004664:	4bb9      	ldr	r3, [pc, #740]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b08      	cmp	r3, #8
 800466e:	d15c      	bne.n	800472a <HAL_RCC_OscConfig+0x10e>
 8004670:	4bb6      	ldr	r3, [pc, #728]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d155      	bne.n	800472a <HAL_RCC_OscConfig+0x10e>
 800467e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004682:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004692:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_RCC_OscConfig+0x94>
 80046aa:	4ba8      	ldr	r3, [pc, #672]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	e015      	b.n	80046dc <HAL_RCC_OscConfig+0xc0>
 80046b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80046c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80046d8:	4b9c      	ldr	r3, [pc, #624]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80046e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80046e8:	fa92 f2a2 	rbit	r2, r2
 80046ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80046f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80046f4:	fab2 f282 	clz	r2, r2
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f042 0220 	orr.w	r2, r2, #32
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	f002 021f 	and.w	r2, r2, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f202 	lsl.w	r2, r1, r2
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 811f 	beq.w	8004950 <HAL_RCC_OscConfig+0x334>
 8004712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 8116 	bne.w	8004950 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	f000 bfaf 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x12e>
 800473c:	4b83      	ldr	r3, [pc, #524]	; (800494c <HAL_RCC_OscConfig+0x330>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a82      	ldr	r2, [pc, #520]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e036      	b.n	80047b8 <HAL_RCC_OscConfig+0x19c>
 800474a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x158>
 800475a:	4b7c      	ldr	r3, [pc, #496]	; (800494c <HAL_RCC_OscConfig+0x330>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a7b      	ldr	r2, [pc, #492]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b79      	ldr	r3, [pc, #484]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a78      	ldr	r2, [pc, #480]	; (800494c <HAL_RCC_OscConfig+0x330>)
 800476c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e021      	b.n	80047b8 <HAL_RCC_OscConfig+0x19c>
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x184>
 8004786:	4b71      	ldr	r3, [pc, #452]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a70      	ldr	r2, [pc, #448]	; (800494c <HAL_RCC_OscConfig+0x330>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b6e      	ldr	r3, [pc, #440]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6d      	ldr	r2, [pc, #436]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0x19c>
 80047a0:	4b6a      	ldr	r3, [pc, #424]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a69      	ldr	r2, [pc, #420]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b67      	ldr	r3, [pc, #412]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a66      	ldr	r2, [pc, #408]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047b8:	4b64      	ldr	r3, [pc, #400]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f023 020f 	bic.w	r2, r3, #15
 80047c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	495f      	ldr	r1, [pc, #380]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d059      	beq.n	8004896 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fc fa85 	bl	8000cf0 <HAL_GetTick>
 80047e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fc fa80 	bl	8000cf0 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b64      	cmp	r3, #100	; 0x64
 80047fa:	d902      	bls.n	8004802 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	f000 bf43 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
 8004802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004806:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800480e:	fa93 f3a3 	rbit	r3, r3
 8004812:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004816:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <HAL_RCC_OscConfig+0x218>
 800482e:	4b47      	ldr	r3, [pc, #284]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	e015      	b.n	8004860 <HAL_RCC_OscConfig+0x244>
 8004834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004838:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800484c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004850:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004854:	fa93 f3a3 	rbit	r3, r3
 8004858:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800485c:	4b3b      	ldr	r3, [pc, #236]	; (800494c <HAL_RCC_OscConfig+0x330>)
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004864:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004868:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800486c:	fa92 f2a2 	rbit	r2, r2
 8004870:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004874:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004878:	fab2 f282 	clz	r2, r2
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f042 0220 	orr.w	r2, r2, #32
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	f002 021f 	and.w	r2, r2, #31
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f202 	lsl.w	r2, r1, r2
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ab      	beq.n	80047ec <HAL_RCC_OscConfig+0x1d0>
 8004894:	e05d      	b.n	8004952 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7fc fa2b 	bl	8000cf0 <HAL_GetTick>
 800489a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489e:	e00a      	b.n	80048b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fc fa26 	bl	8000cf0 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b64      	cmp	r3, #100	; 0x64
 80048ae:	d902      	bls.n	80048b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	f000 bee9 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
 80048b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80048ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d102      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2cc>
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <HAL_RCC_OscConfig+0x330>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	e015      	b.n	8004914 <HAL_RCC_OscConfig+0x2f8>
 80048e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80048f4:	fa93 f3a3 	rbit	r3, r3
 80048f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004900:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004904:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <HAL_RCC_OscConfig+0x330>)
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004918:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800491c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004920:	fa92 f2a2 	rbit	r2, r2
 8004924:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004928:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800492c:	fab2 f282 	clz	r2, r2
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	f042 0220 	orr.w	r2, r2, #32
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	f002 021f 	and.w	r2, r2, #31
 800493c:	2101      	movs	r1, #1
 800493e:	fa01 f202 	lsl.w	r2, r1, r2
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ab      	bne.n	80048a0 <HAL_RCC_OscConfig+0x284>
 8004948:	e003      	b.n	8004952 <HAL_RCC_OscConfig+0x336>
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 817d 	beq.w	8004c62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004968:	4ba6      	ldr	r3, [pc, #664]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004974:	4ba3      	ldr	r3, [pc, #652]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b08      	cmp	r3, #8
 800497e:	d172      	bne.n	8004a66 <HAL_RCC_OscConfig+0x44a>
 8004980:	4ba0      	ldr	r3, [pc, #640]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d16c      	bne.n	8004a66 <HAL_RCC_OscConfig+0x44a>
 800498c:	2302      	movs	r3, #2
 800498e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800499e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <HAL_RCC_OscConfig+0x3a0>
 80049b6:	4b93      	ldr	r3, [pc, #588]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	e013      	b.n	80049e4 <HAL_RCC_OscConfig+0x3c8>
 80049bc:	2302      	movs	r3, #2
 80049be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80049ce:	2302      	movs	r3, #2
 80049d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80049d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80049d8:	fa93 f3a3 	rbit	r3, r3
 80049dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2202      	movs	r2, #2
 80049e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80049ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80049ee:	fa92 f2a2 	rbit	r2, r2
 80049f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80049f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80049fa:	fab2 f282 	clz	r2, r2
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	f042 0220 	orr.w	r2, r2, #32
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	f002 021f 	and.w	r2, r2, #31
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCC_OscConfig+0x410>
 8004a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f000 be2e 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2c:	4b75      	ldr	r3, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	21f8      	movs	r1, #248	; 0xf8
 8004a42:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a4a:	fa91 f1a1 	rbit	r1, r1
 8004a4e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004a52:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a56:	fab1 f181 	clz	r1, r1
 8004a5a:	b2c9      	uxtb	r1, r1
 8004a5c:	408b      	lsls	r3, r1
 8004a5e:	4969      	ldr	r1, [pc, #420]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a64:	e0fd      	b.n	8004c62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8088 	beq.w	8004b88 <HAL_RCC_OscConfig+0x56c>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004a8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fc f924 	bl	8000cf0 <HAL_GetTick>
 8004aa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aae:	f7fc f91f 	bl	8000cf0 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d902      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	f000 bde2 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004ad6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d102      	bne.n	8004af4 <HAL_RCC_OscConfig+0x4d8>
 8004aee:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	e013      	b.n	8004b1c <HAL_RCC_OscConfig+0x500>
 8004af4:	2302      	movs	r3, #2
 8004af6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b06:	2302      	movs	r3, #2
 8004b08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b18:	4b3a      	ldr	r3, [pc, #232]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004b22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b26:	fa92 f2a2 	rbit	r2, r2
 8004b2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004b2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004b32:	fab2 f282 	clz	r2, r2
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	f042 0220 	orr.w	r2, r2, #32
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	f002 021f 	and.w	r2, r2, #31
 8004b42:	2101      	movs	r1, #1
 8004b44:	fa01 f202 	lsl.w	r2, r1, r2
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0af      	beq.n	8004aae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b2d      	ldr	r3, [pc, #180]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	21f8      	movs	r1, #248	; 0xf8
 8004b64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b6c:	fa91 f1a1 	rbit	r1, r1
 8004b70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004b74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b78:	fab1 f181 	clz	r1, r1
 8004b7c:	b2c9      	uxtb	r1, r1
 8004b7e:	408b      	lsls	r3, r1
 8004b80:	4920      	ldr	r1, [pc, #128]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
 8004b86:	e06c      	b.n	8004c62 <HAL_RCC_OscConfig+0x646>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b92:	fa93 f3a3 	rbit	r3, r3
 8004b96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fc f89c 	bl	8000cf0 <HAL_GetTick>
 8004bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fc f897 	bl	8000cf0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f000 bd5a 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bea:	fab3 f383 	clz	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d104      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5ec>
 8004bfe:	4b01      	ldr	r3, [pc, #4]	; (8004c04 <HAL_RCC_OscConfig+0x5e8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	e015      	b.n	8004c30 <HAL_RCC_OscConfig+0x614>
 8004c04:	40021000 	.word	0x40021000
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c2c:	4bc8      	ldr	r3, [pc, #800]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2202      	movs	r2, #2
 8004c32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004c36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c3a:	fa92 f2a2 	rbit	r2, r2
 8004c3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004c42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004c46:	fab2 f282 	clz	r2, r2
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	f042 0220 	orr.w	r2, r2, #32
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	f002 021f 	and.w	r2, r2, #31
 8004c56:	2101      	movs	r1, #1
 8004c58:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1ad      	bne.n	8004bbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8110 	beq.w	8004e98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d079      	beq.n	8004d7c <HAL_RCC_OscConfig+0x760>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4bab      	ldr	r3, [pc, #684]	; (8004f54 <HAL_RCC_OscConfig+0x938>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	461a      	mov	r2, r3
 8004cae:	2301      	movs	r3, #1
 8004cb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb2:	f7fc f81d 	bl	8000cf0 <HAL_GetTick>
 8004cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fc f818 	bl	8000cf0 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d902      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	f000 bcdb 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004cec:	2202      	movs	r2, #2
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	fa93 f2a3 	rbit	r2, r3
 8004cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d10:	2202      	movs	r2, #2
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	fa93 f2a3 	rbit	r2, r3
 8004d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2c:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d38:	2102      	movs	r1, #2
 8004d3a:	6019      	str	r1, [r3, #0]
 8004d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	fa93 f1a3 	rbit	r1, r3
 8004d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d52:	6019      	str	r1, [r3, #0]
  return result;
 8004d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	fab3 f383 	clz	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2101      	movs	r1, #1
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0a0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x6a0>
 8004d7a:	e08d      	b.n	8004e98 <HAL_RCC_OscConfig+0x87c>
 8004d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	fa93 f2a3 	rbit	r2, r3
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d9e:	601a      	str	r2, [r3, #0]
  return result;
 8004da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004da8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b68      	ldr	r3, [pc, #416]	; (8004f54 <HAL_RCC_OscConfig+0x938>)
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	461a      	mov	r2, r3
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbe:	f7fb ff97 	bl	8000cf0 <HAL_GetTick>
 8004dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fb ff92 	bl	8000cf0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d902      	bls.n	8004dde <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	f000 bc55 	b.w	8005688 <HAL_RCC_OscConfig+0x106c>
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004de6:	2202      	movs	r2, #2
 8004de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	fa93 f2a3 	rbit	r2, r3
 8004df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	fa93 f2a3 	rbit	r2, r3
 8004e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2e:	2202      	movs	r2, #2
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	fa93 f2a3 	rbit	r2, r3
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004e48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4a:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e56:	2102      	movs	r1, #2
 8004e58:	6019      	str	r1, [r3, #0]
 8004e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	fa93 f1a3 	rbit	r1, r3
 8004e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e70:	6019      	str	r1, [r3, #0]
  return result;
 8004e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	fab3 f383 	clz	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d197      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 81a1 	beq.w	80051f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eca:	61d3      	str	r3, [r2, #28]
 8004ecc:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ee6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_RCC_OscConfig+0x93c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efa:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <HAL_RCC_OscConfig+0x93c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <HAL_RCC_OscConfig+0x93c>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f06:	f7fb fef3 	bl	8000cf0 <HAL_GetTick>
 8004f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	e009      	b.n	8004f24 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f10:	f7fb feee 	bl	8000cf0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b64      	cmp	r3, #100	; 0x64
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e3b1      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_RCC_OscConfig+0x93c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ef      	beq.n	8004f10 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCC_OscConfig+0x940>
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	4a02      	ldr	r2, [pc, #8]	; (8004f50 <HAL_RCC_OscConfig+0x934>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6213      	str	r3, [r2, #32]
 8004f4c:	e03c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x9ac>
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	10908120 	.word	0x10908120
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0x96a>
 8004f6c:	4bc1      	ldr	r3, [pc, #772]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	4ac0      	ldr	r2, [pc, #768]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6213      	str	r3, [r2, #32]
 8004f78:	4bbe      	ldr	r3, [pc, #760]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4abd      	ldr	r2, [pc, #756]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004f7e:	f023 0304 	bic.w	r3, r3, #4
 8004f82:	6213      	str	r3, [r2, #32]
 8004f84:	e020      	b.n	8004fc8 <HAL_RCC_OscConfig+0x9ac>
 8004f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x994>
 8004f96:	4bb7      	ldr	r3, [pc, #732]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4ab6      	ldr	r2, [pc, #728]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	6213      	str	r3, [r2, #32]
 8004fa2:	4bb4      	ldr	r3, [pc, #720]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4ab3      	ldr	r2, [pc, #716]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6213      	str	r3, [r2, #32]
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCC_OscConfig+0x9ac>
 8004fb0:	4bb0      	ldr	r3, [pc, #704]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	4aaf      	ldr	r2, [pc, #700]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6213      	str	r3, [r2, #32]
 8004fbc:	4bad      	ldr	r3, [pc, #692]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4aac      	ldr	r2, [pc, #688]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8004fc2:	f023 0304 	bic.w	r3, r3, #4
 8004fc6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8081 	beq.w	80050dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fb fe89 	bl	8000cf0 <HAL_GetTick>
 8004fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe2:	e00b      	b.n	8004ffc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe4:	f7fb fe84 	bl	8000cf0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e345      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
 8004ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005000:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005004:	2202      	movs	r2, #2
 8005006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	fa93 f2a3 	rbit	r2, r3
 8005016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005028:	2202      	movs	r2, #2
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005030:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	fa93 f2a3 	rbit	r2, r3
 800503a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005042:	601a      	str	r2, [r3, #0]
  return result;
 8005044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005048:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800504c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d102      	bne.n	8005068 <HAL_RCC_OscConfig+0xa4c>
 8005062:	4b84      	ldr	r3, [pc, #528]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	e013      	b.n	8005090 <HAL_RCC_OscConfig+0xa74>
 8005068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005070:	2202      	movs	r2, #2
 8005072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	fa93 f2a3 	rbit	r2, r3
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	4b79      	ldr	r3, [pc, #484]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005094:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005098:	2102      	movs	r1, #2
 800509a:	6011      	str	r1, [r2, #0]
 800509c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	fa92 f1a2 	rbit	r1, r2
 80050aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80050b2:	6011      	str	r1, [r2, #0]
  return result;
 80050b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	fab2 f282 	clz	r2, r2
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	f002 021f 	and.w	r2, r2, #31
 80050ce:	2101      	movs	r1, #1
 80050d0:	fa01 f202 	lsl.w	r2, r1, r2
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d084      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x9c8>
 80050da:	e07f      	b.n	80051dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050dc:	f7fb fe08 	bl	8000cf0 <HAL_GetTick>
 80050e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e4:	e00b      	b.n	80050fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fb fe03 	bl	8000cf0 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e2c4      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
 80050fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005102:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005106:	2202      	movs	r2, #2
 8005108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	fa93 f2a3 	rbit	r2, r3
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800512a:	2202      	movs	r2, #2
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005132:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	fa93 f2a3 	rbit	r2, r3
 800513c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005140:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005144:	601a      	str	r2, [r3, #0]
  return result;
 8005146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800514e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	b2db      	uxtb	r3, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f043 0302 	orr.w	r3, r3, #2
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d102      	bne.n	800516a <HAL_RCC_OscConfig+0xb4e>
 8005164:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	e013      	b.n	8005192 <HAL_RCC_OscConfig+0xb76>
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	fa93 f2a3 	rbit	r2, r3
 8005184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005188:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	4b39      	ldr	r3, [pc, #228]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005196:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800519a:	2102      	movs	r1, #2
 800519c:	6011      	str	r1, [r2, #0]
 800519e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	fa92 f1a2 	rbit	r1, r2
 80051ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80051b4:	6011      	str	r1, [r2, #0]
  return result;
 80051b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	fab2 f282 	clz	r2, r2
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	f002 021f 	and.w	r2, r2, #31
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f202 	lsl.w	r2, r1, r2
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d184      	bne.n	80050e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d105      	bne.n	80051f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e4:	4b23      	ldr	r3, [pc, #140]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	4a22      	ldr	r2, [pc, #136]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 80051ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8242 	beq.w	8005686 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <HAL_RCC_OscConfig+0xc58>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b08      	cmp	r3, #8
 800520c:	f000 8213 	beq.w	8005636 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b02      	cmp	r3, #2
 800521e:	f040 8162 	bne.w	80054e6 <HAL_RCC_OscConfig+0xeca>
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800522a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800522e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005234:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	fa93 f2a3 	rbit	r2, r3
 800523e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005242:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005246:	601a      	str	r2, [r3, #0]
  return result;
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005250:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005252:	fab3 f383 	clz	r3, r3
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800525c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	461a      	mov	r2, r3
 8005264:	2300      	movs	r3, #0
 8005266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fb fd42 	bl	8000cf0 <HAL_GetTick>
 800526c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005270:	e00c      	b.n	800528c <HAL_RCC_OscConfig+0xc70>
 8005272:	bf00      	nop
 8005274:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005278:	f7fb fd3a 	bl	8000cf0 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e1fd      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
 800528c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005290:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	fa93 f2a3 	rbit	r2, r3
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80052b0:	601a      	str	r2, [r3, #0]
  return result;
 80052b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80052ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d102      	bne.n	80052d6 <HAL_RCC_OscConfig+0xcba>
 80052d0:	4bb0      	ldr	r3, [pc, #704]	; (8005594 <HAL_RCC_OscConfig+0xf78>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	e027      	b.n	8005326 <HAL_RCC_OscConfig+0xd0a>
 80052d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	fa93 f2a3 	rbit	r2, r3
 80052f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005300:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	fa93 f2a3 	rbit	r2, r3
 8005318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	4b9c      	ldr	r3, [pc, #624]	; (8005594 <HAL_RCC_OscConfig+0xf78>)
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800532a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800532e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005332:	6011      	str	r1, [r2, #0]
 8005334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005338:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	fa92 f1a2 	rbit	r1, r2
 8005342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005346:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800534a:	6011      	str	r1, [r2, #0]
  return result;
 800534c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005350:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	fab2 f282 	clz	r2, r2
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	f042 0220 	orr.w	r2, r2, #32
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	f002 021f 	and.w	r2, r2, #31
 8005366:	2101      	movs	r1, #1
 8005368:	fa01 f202 	lsl.w	r2, r1, r2
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d182      	bne.n	8005278 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005372:	4b88      	ldr	r3, [pc, #544]	; (8005594 <HAL_RCC_OscConfig+0xf78>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800537a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	430b      	orrs	r3, r1
 8005394:	497f      	ldr	r1, [pc, #508]	; (8005594 <HAL_RCC_OscConfig+0xf78>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
 800539a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80053a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	fa93 f2a3 	rbit	r2, r3
 80053b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053be:	601a      	str	r2, [r3, #0]
  return result;
 80053c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ca:	fab3 f383 	clz	r3, r3
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	461a      	mov	r2, r3
 80053dc:	2301      	movs	r3, #1
 80053de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fb fc86 	bl	8000cf0 <HAL_GetTick>
 80053e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053e8:	e009      	b.n	80053fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ea:	f7fb fc81 	bl	8000cf0 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e144      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
 80053fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005402:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800540a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005410:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	fa93 f2a3 	rbit	r2, r3
 800541a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005422:	601a      	str	r2, [r3, #0]
  return result;
 8005424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005428:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800542c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_RCC_OscConfig+0xe2c>
 8005442:	4b54      	ldr	r3, [pc, #336]	; (8005594 <HAL_RCC_OscConfig+0xf78>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	e027      	b.n	8005498 <HAL_RCC_OscConfig+0xe7c>
 8005448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	fa93 f2a3 	rbit	r2, r3
 8005464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005468:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005472:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005480:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	fa93 f2a3 	rbit	r2, r3
 800548a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_RCC_OscConfig+0xf78>)
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800549c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80054a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054a4:	6011      	str	r1, [r2, #0]
 80054a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	fa92 f1a2 	rbit	r1, r2
 80054b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054bc:	6011      	str	r1, [r2, #0]
  return result;
 80054be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	fab2 f282 	clz	r2, r2
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	f042 0220 	orr.w	r2, r2, #32
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	f002 021f 	and.w	r2, r2, #31
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f202 	lsl.w	r2, r1, r2
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d082      	beq.n	80053ea <HAL_RCC_OscConfig+0xdce>
 80054e4:	e0cf      	b.n	8005686 <HAL_RCC_OscConfig+0x106a>
 80054e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80054ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	fa93 f2a3 	rbit	r2, r3
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800550a:	601a      	str	r2, [r3, #0]
  return result;
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005514:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fb fbe0 	bl	8000cf0 <HAL_GetTick>
 8005530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005534:	e009      	b.n	800554a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005536:	f7fb fbdb 	bl	8000cf0 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e09e      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
 800554a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	fa93 f2a3 	rbit	r2, r3
 8005566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800556e:	601a      	str	r2, [r3, #0]
  return result;
 8005570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005574:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005578:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d104      	bne.n	8005598 <HAL_RCC_OscConfig+0xf7c>
 800558e:	4b01      	ldr	r3, [pc, #4]	; (8005594 <HAL_RCC_OscConfig+0xf78>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	e029      	b.n	80055e8 <HAL_RCC_OscConfig+0xfcc>
 8005594:	40021000 	.word	0x40021000
 8005598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80055a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	fa93 f2a3 	rbit	r2, r3
 80055b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80055c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	fa93 f2a3 	rbit	r2, r3
 80055da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	4b2b      	ldr	r3, [pc, #172]	; (8005694 <HAL_RCC_OscConfig+0x1078>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80055f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055f4:	6011      	str	r1, [r2, #0]
 80055f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	fa92 f1a2 	rbit	r1, r2
 8005604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005608:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800560c:	6011      	str	r1, [r2, #0]
  return result;
 800560e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005612:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	fab2 f282 	clz	r2, r2
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	f042 0220 	orr.w	r2, r2, #32
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	f002 021f 	and.w	r2, r2, #31
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f202 	lsl.w	r2, r1, r2
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d180      	bne.n	8005536 <HAL_RCC_OscConfig+0xf1a>
 8005634:	e027      	b.n	8005686 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e01e      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_RCC_OscConfig+0x1078>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005652:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005656:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800565a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	429a      	cmp	r2, r3
 8005668:	d10b      	bne.n	8005682 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800566a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800566e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800567e:	429a      	cmp	r2, r3
 8005680:	d001      	beq.n	8005686 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40021000 	.word	0x40021000

08005698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b09e      	sub	sp, #120	; 0x78
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e162      	b.n	8005976 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b0:	4b90      	ldr	r3, [pc, #576]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d910      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056be:	4b8d      	ldr	r3, [pc, #564]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 0207 	bic.w	r2, r3, #7
 80056c6:	498b      	ldr	r1, [pc, #556]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	4b89      	ldr	r3, [pc, #548]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e14a      	b.n	8005976 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	497f      	ldr	r1, [pc, #508]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80dc 	beq.w	80058c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d13c      	bne.n	800578e <HAL_RCC_ClockConfig+0xf6>
 8005714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005718:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005724:	fab3 f383 	clz	r3, r3
 8005728:	b2db      	uxtb	r3, r3
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d102      	bne.n	800573e <HAL_RCC_ClockConfig+0xa6>
 8005738:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	e00f      	b.n	800575e <HAL_RCC_ClockConfig+0xc6>
 800573e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005742:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	667b      	str	r3, [r7, #100]	; 0x64
 800574c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005750:	663b      	str	r3, [r7, #96]	; 0x60
 8005752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800575a:	4b67      	ldr	r3, [pc, #412]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005762:	65ba      	str	r2, [r7, #88]	; 0x58
 8005764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005766:	fa92 f2a2 	rbit	r2, r2
 800576a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800576c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800576e:	fab2 f282 	clz	r2, r2
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	f042 0220 	orr.w	r2, r2, #32
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	f002 021f 	and.w	r2, r2, #31
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f202 	lsl.w	r2, r1, r2
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d17b      	bne.n	8005882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e0f3      	b.n	8005976 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d13c      	bne.n	8005810 <HAL_RCC_ClockConfig+0x178>
 8005796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800579a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579e:	fa93 f3a3 	rbit	r3, r3
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a6:	fab3 f383 	clz	r3, r3
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d102      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x128>
 80057ba:	4b4f      	ldr	r3, [pc, #316]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	e00f      	b.n	80057e0 <HAL_RCC_ClockConfig+0x148>
 80057c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c8:	fa93 f3a3 	rbit	r3, r3
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
 80057ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d2:	643b      	str	r3, [r7, #64]	; 0x40
 80057d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80057e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e8:	fa92 f2a2 	rbit	r2, r2
 80057ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80057ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f0:	fab2 f282 	clz	r2, r2
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	f042 0220 	orr.w	r2, r2, #32
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	f002 021f 	and.w	r2, r2, #31
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f202 	lsl.w	r2, r1, r2
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d13a      	bne.n	8005882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0b2      	b.n	8005976 <HAL_RCC_ClockConfig+0x2de>
 8005810:	2302      	movs	r3, #2
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	fa93 f3a3 	rbit	r3, r3
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581e:	fab3 f383 	clz	r3, r3
 8005822:	b2db      	uxtb	r3, r3
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d102      	bne.n	8005838 <HAL_RCC_ClockConfig+0x1a0>
 8005832:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	e00d      	b.n	8005854 <HAL_RCC_ClockConfig+0x1bc>
 8005838:	2302      	movs	r3, #2
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	fa93 f3a3 	rbit	r3, r3
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	2302      	movs	r3, #2
 8005846:	623b      	str	r3, [r7, #32]
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	fa93 f3a3 	rbit	r3, r3
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	4b29      	ldr	r3, [pc, #164]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2202      	movs	r2, #2
 8005856:	61ba      	str	r2, [r7, #24]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	fa92 f2a2 	rbit	r2, r2
 800585e:	617a      	str	r2, [r7, #20]
  return result;
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	fab2 f282 	clz	r2, r2
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	f042 0220 	orr.w	r2, r2, #32
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	f002 021f 	and.w	r2, r2, #31
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f202 	lsl.w	r2, r1, r2
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e079      	b.n	8005976 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f023 0203 	bic.w	r2, r3, #3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	491a      	ldr	r1, [pc, #104]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005894:	f7fb fa2c 	bl	8000cf0 <HAL_GetTick>
 8005898:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589c:	f7fb fa28 	bl	8000cf0 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e061      	b.n	8005976 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_RCC_ClockConfig+0x260>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 020c 	and.w	r2, r3, #12
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d1eb      	bne.n	800589c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d214      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 0207 	bic.w	r2, r3, #7
 80058da:	4906      	ldr	r1, [pc, #24]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	4313      	orrs	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <HAL_RCC_ClockConfig+0x25c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e040      	b.n	8005976 <HAL_RCC_ClockConfig+0x2de>
 80058f4:	40022000 	.word	0x40022000
 80058f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005908:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <HAL_RCC_ClockConfig+0x2e8>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	491a      	ldr	r1, [pc, #104]	; (8005980 <HAL_RCC_ClockConfig+0x2e8>)
 8005916:	4313      	orrs	r3, r2
 8005918:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005926:	4b16      	ldr	r3, [pc, #88]	; (8005980 <HAL_RCC_ClockConfig+0x2e8>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4912      	ldr	r1, [pc, #72]	; (8005980 <HAL_RCC_ClockConfig+0x2e8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800593a:	f000 f829 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 800593e:	4601      	mov	r1, r0
 8005940:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <HAL_RCC_ClockConfig+0x2e8>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005948:	22f0      	movs	r2, #240	; 0xf0
 800594a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	fa92 f2a2 	rbit	r2, r2
 8005952:	60fa      	str	r2, [r7, #12]
  return result;
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	fab2 f282 	clz	r2, r2
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	40d3      	lsrs	r3, r2
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <HAL_RCC_ClockConfig+0x2ec>)
 8005960:	5cd3      	ldrb	r3, [r2, r3]
 8005962:	fa21 f303 	lsr.w	r3, r1, r3
 8005966:	4a08      	ldr	r2, [pc, #32]	; (8005988 <HAL_RCC_ClockConfig+0x2f0>)
 8005968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_RCC_ClockConfig+0x2f4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7fb f97a 	bl	8000c68 <HAL_InitTick>
  
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3778      	adds	r7, #120	; 0x78
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000
 8005984:	0800b880 	.word	0x0800b880
 8005988:	20000004 	.word	0x20000004
 800598c:	20000008 	.word	0x20000008

08005990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	b08b      	sub	sp, #44	; 0x2c
 8005994:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80059aa:	4b29      	ldr	r3, [pc, #164]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d002      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x30>
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d003      	beq.n	80059c6 <HAL_RCC_GetSysClockFreq+0x36>
 80059be:	e03c      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059c0:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 80059c2:	623b      	str	r3, [r7, #32]
      break;
 80059c4:	e03c      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80059cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80059d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	fa92 f2a2 	rbit	r2, r2
 80059d8:	607a      	str	r2, [r7, #4]
  return result;
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	fab2 f282 	clz	r2, r2
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	40d3      	lsrs	r3, r2
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xc8>)
 80059e6:	5cd3      	ldrb	r3, [r2, r3]
 80059e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80059ea:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	220f      	movs	r2, #15
 80059f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	fa92 f2a2 	rbit	r2, r2
 80059fc:	60fa      	str	r2, [r7, #12]
  return result;
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	fab2 f282 	clz	r2, r2
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	40d3      	lsrs	r3, r2
 8005a08:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a18:	4a0e      	ldr	r2, [pc, #56]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	e004      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	623b      	str	r3, [r7, #32]
      break;
 8005a38:	e002      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a3c:	623b      	str	r3, [r7, #32]
      break;
 8005a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a40:	6a3b      	ldr	r3, [r7, #32]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	372c      	adds	r7, #44	; 0x2c
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
 8005a54:	007a1200 	.word	0x007a1200
 8005a58:	0800b890 	.word	0x0800b890
 8005a5c:	0800b8a0 	.word	0x0800b8a0
 8005a60:	003d0900 	.word	0x003d0900

08005a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b092      	sub	sp, #72	; 0x48
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80d4 	beq.w	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a88:	4b4e      	ldr	r3, [pc, #312]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10e      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a94:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	4a4a      	ldr	r2, [pc, #296]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	61d3      	str	r3, [r2, #28]
 8005aa0:	4b48      	ldr	r3, [pc, #288]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab2:	4b45      	ldr	r3, [pc, #276]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d118      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005abe:	4b42      	ldr	r3, [pc, #264]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a41      	ldr	r2, [pc, #260]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aca:	f7fb f911 	bl	8000cf0 <HAL_GetTick>
 8005ace:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad2:	f7fb f90d 	bl	8000cf0 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b64      	cmp	r3, #100	; 0x64
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e169      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005af0:	4b34      	ldr	r3, [pc, #208]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8084 	beq.w	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d07c      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b10:	4b2c      	ldr	r3, [pc, #176]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	fa93 f3a3 	rbit	r3, r3
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b2a:	fab3 f383 	clz	r3, r3
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	fa93 f3a3 	rbit	r3, r3
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4e:	fab3 f383 	clz	r3, r3
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d04b      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fb f8bd 	bl	8000cf0 <HAL_GetTick>
 8005b76:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b78:	e00a      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7a:	f7fb f8b9 	bl	8000cf0 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e113      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005b90:	2302      	movs	r3, #2
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	fa93 f3a3 	rbit	r3, r3
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	623b      	str	r3, [r7, #32]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	fa93 f3a3 	rbit	r3, r3
 8005ba6:	61fb      	str	r3, [r7, #28]
  return result;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005baa:	fab3 f383 	clz	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d108      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005bbe:	4b01      	ldr	r3, [pc, #4]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	e00d      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40007000 	.word	0x40007000
 8005bcc:	10908100 	.word	0x10908100
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	fa93 f3a3 	rbit	r3, r3
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	4b78      	ldr	r3, [pc, #480]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2202      	movs	r2, #2
 8005be2:	613a      	str	r2, [r7, #16]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	fa92 f2a2 	rbit	r2, r2
 8005bea:	60fa      	str	r2, [r7, #12]
  return result;
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	fab2 f282 	clz	r2, r2
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	f002 021f 	and.w	r2, r2, #31
 8005bfe:	2101      	movs	r1, #1
 8005c00:	fa01 f202 	lsl.w	r2, r1, r2
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0b7      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005c0a:	4b6d      	ldr	r3, [pc, #436]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	496a      	ldr	r1, [pc, #424]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d105      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c24:	4b66      	ldr	r3, [pc, #408]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	4a65      	ldr	r2, [pc, #404]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c3c:	4b60      	ldr	r3, [pc, #384]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	f023 0203 	bic.w	r2, r3, #3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	495d      	ldr	r1, [pc, #372]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c5a:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	4956      	ldr	r1, [pc, #344]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c78:	4b51      	ldr	r3, [pc, #324]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	494e      	ldr	r1, [pc, #312]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c96:	4b4a      	ldr	r3, [pc, #296]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	f023 0210 	bic.w	r2, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	4947      	ldr	r1, [pc, #284]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005cb4:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	493f      	ldr	r1, [pc, #252]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cd2:	4b3b      	ldr	r3, [pc, #236]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	f023 0220 	bic.w	r2, r3, #32
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	4938      	ldr	r1, [pc, #224]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cf0:	4b33      	ldr	r3, [pc, #204]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	4930      	ldr	r1, [pc, #192]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d008      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d0e:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	4929      	ldr	r1, [pc, #164]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d2c:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4921      	ldr	r1, [pc, #132]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	491a      	ldr	r1, [pc, #104]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	4912      	ldr	r1, [pc, #72]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d008      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d86:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	490b      	ldr	r1, [pc, #44]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db0:	4903      	ldr	r1, [pc, #12]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3748      	adds	r7, #72	; 0x48
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000

08005dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e049      	b.n	8005e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fa fe08 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f000 fae0 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d001      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e04a      	b.n	8005f22 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_TIM_Base_Start_IT+0xbc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d018      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb6:	d013      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00e      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d009      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a19      	ldr	r2, [pc, #100]	; (8005f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d115      	bne.n	8005f0c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b06      	cmp	r3, #6
 8005ef0:	d015      	beq.n	8005f1e <HAL_TIM_Base_Start_IT+0xaa>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef8:	d011      	beq.n	8005f1e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0201 	orr.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0a:	e008      	b.n	8005f1e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e000      	b.n	8005f20 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40000400 	.word	0x40000400
 8005f38:	40000800 	.word	0x40000800
 8005f3c:	40013400 	.word	0x40013400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	00010007 	.word	0x00010007

08005f48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0201 	bic.w	r2, r2, #1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a1a      	ldr	r2, [r3, #32]
 8005f66:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10f      	bne.n	8005f90 <HAL_TIM_Base_Stop_IT+0x48>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	f240 4344 	movw	r3, #1092	; 0x444
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_Base_Stop_IT+0x48>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d122      	bne.n	8006002 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d11b      	bne.n	8006002 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0202 	mvn.w	r2, #2
 8005fd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9ce 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8005fee:	e005      	b.n	8005ffc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f9c0 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9d1 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d122      	bne.n	8006056 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d11b      	bne.n	8006056 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0204 	mvn.w	r2, #4
 8006026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f9a4 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8006042:	e005      	b.n	8006050 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f996 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f9a7 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b08      	cmp	r3, #8
 8006062:	d122      	bne.n	80060aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b08      	cmp	r3, #8
 8006070:	d11b      	bne.n	80060aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f06f 0208 	mvn.w	r2, #8
 800607a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2204      	movs	r2, #4
 8006080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f97a 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 8006096:	e005      	b.n	80060a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f96c 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f97d 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d122      	bne.n	80060fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d11b      	bne.n	80060fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f06f 0210 	mvn.w	r2, #16
 80060ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2208      	movs	r2, #8
 80060d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f950 	bl	800638a <HAL_TIM_IC_CaptureCallback>
 80060ea:	e005      	b.n	80060f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f942 	bl	8006376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f953 	bl	800639e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10e      	bne.n	800612a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b01      	cmp	r3, #1
 8006118:	d107      	bne.n	800612a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f06f 0201 	mvn.w	r2, #1
 8006122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fa fb61 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d10e      	bne.n	8006156 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d107      	bne.n	8006156 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800614e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 faed 	bl	8006730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006164:	d10e      	bne.n	8006184 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d107      	bne.n	8006184 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800617c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fae0 	bl	8006744 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d10e      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d107      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f901 	bl	80063b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d10e      	bne.n	80061dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d107      	bne.n	80061dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0220 	mvn.w	r2, #32
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 faa0 	bl	800671c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_TIM_ConfigClockSource+0x1c>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e0b6      	b.n	800636e <HAL_TIM_ConfigClockSource+0x18a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623c:	d03e      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0xd8>
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006242:	f200 8087 	bhi.w	8006354 <HAL_TIM_ConfigClockSource+0x170>
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624a:	f000 8086 	beq.w	800635a <HAL_TIM_ConfigClockSource+0x176>
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006252:	d87f      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
 8006254:	2b70      	cmp	r3, #112	; 0x70
 8006256:	d01a      	beq.n	800628e <HAL_TIM_ConfigClockSource+0xaa>
 8006258:	2b70      	cmp	r3, #112	; 0x70
 800625a:	d87b      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
 800625c:	2b60      	cmp	r3, #96	; 0x60
 800625e:	d050      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x11e>
 8006260:	2b60      	cmp	r3, #96	; 0x60
 8006262:	d877      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
 8006264:	2b50      	cmp	r3, #80	; 0x50
 8006266:	d03c      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0xfe>
 8006268:	2b50      	cmp	r3, #80	; 0x50
 800626a:	d873      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d058      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x13e>
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d86f      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
 8006274:	2b30      	cmp	r3, #48	; 0x30
 8006276:	d064      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15e>
 8006278:	2b30      	cmp	r3, #48	; 0x30
 800627a:	d86b      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
 800627c:	2b20      	cmp	r3, #32
 800627e:	d060      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15e>
 8006280:	2b20      	cmp	r3, #32
 8006282:	d867      	bhi.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d05c      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15e>
 8006288:	2b10      	cmp	r3, #16
 800628a:	d05a      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x15e>
 800628c:	e062      	b.n	8006354 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800629e:	f000 f99d 	bl	80065dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	609a      	str	r2, [r3, #8]
      break;
 80062ba:	e04f      	b.n	800635c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062cc:	f000 f986 	bl	80065dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062de:	609a      	str	r2, [r3, #8]
      break;
 80062e0:	e03c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	461a      	mov	r2, r3
 80062f0:	f000 f8fa 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2150      	movs	r1, #80	; 0x50
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f953 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8006300:	e02c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800630e:	461a      	mov	r2, r3
 8006310:	f000 f919 	bl	8006546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2160      	movs	r1, #96	; 0x60
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f943 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8006320:	e01c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	461a      	mov	r2, r3
 8006330:	f000 f8da 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2140      	movs	r1, #64	; 0x40
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f933 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8006340:	e00c      	b.n	800635c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f000 f92a 	bl	80065a6 <TIM_ITRx_SetConfig>
      break;
 8006352:	e003      	b.n	800635c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
      break;
 8006358:	e000      	b.n	800635c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800635a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a3c      	ldr	r2, [pc, #240]	; (80064cc <TIM_Base_SetConfig+0x104>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a39      	ldr	r2, [pc, #228]	; (80064d0 <TIM_Base_SetConfig+0x108>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a38      	ldr	r2, [pc, #224]	; (80064d4 <TIM_Base_SetConfig+0x10c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a37      	ldr	r2, [pc, #220]	; (80064d8 <TIM_Base_SetConfig+0x110>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2d      	ldr	r2, [pc, #180]	; (80064cc <TIM_Base_SetConfig+0x104>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01b      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006420:	d017      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <TIM_Base_SetConfig+0x108>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <TIM_Base_SetConfig+0x10c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a28      	ldr	r2, [pc, #160]	; (80064d8 <TIM_Base_SetConfig+0x110>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a27      	ldr	r2, [pc, #156]	; (80064dc <TIM_Base_SetConfig+0x114>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a26      	ldr	r2, [pc, #152]	; (80064e0 <TIM_Base_SetConfig+0x118>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a25      	ldr	r2, [pc, #148]	; (80064e4 <TIM_Base_SetConfig+0x11c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a10      	ldr	r2, [pc, #64]	; (80064cc <TIM_Base_SetConfig+0x104>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00f      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a11      	ldr	r2, [pc, #68]	; (80064d8 <TIM_Base_SetConfig+0x110>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a10      	ldr	r2, [pc, #64]	; (80064dc <TIM_Base_SetConfig+0x114>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <TIM_Base_SetConfig+0x118>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a0e      	ldr	r2, [pc, #56]	; (80064e4 <TIM_Base_SetConfig+0x11c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d103      	bne.n	80064b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	615a      	str	r2, [r3, #20]
}
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40000400 	.word	0x40000400
 80064d4:	40000800 	.word	0x40000800
 80064d8:	40013400 	.word	0x40013400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800

080064e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f023 0201 	bic.w	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 030a 	bic.w	r3, r3, #10
 8006524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006546:	b480      	push	{r7}
 8006548:	b087      	sub	sp, #28
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f023 0210 	bic.w	r2, r3, #16
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	031b      	lsls	r3, r3, #12
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f043 0307 	orr.w	r3, r3, #7
 80065c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	609a      	str	r2, [r3, #8]
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	021a      	lsls	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	431a      	orrs	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4313      	orrs	r3, r2
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e063      	b.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800666e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d018      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a6:	d013      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00e      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a17      	ldr	r2, [pc, #92]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d009      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d004      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10c      	bne.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40014000 	.word	0x40014000

0800671c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006768:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800676c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	b29a      	uxth	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800678e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006792:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	43db      	mvns	r3, r3
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	4013      	ands	r3, r2
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067bc:	b084      	sub	sp, #16
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	f107 0014 	add.w	r0, r7, #20
 80067ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	b004      	add	sp, #16
 80067fc:	4770      	bx	lr
	...

08006800 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006800:	b480      	push	{r7}
 8006802:	b09d      	sub	sp, #116	; 0x74
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	78db      	ldrb	r3, [r3, #3]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d81f      	bhi.n	8006872 <USB_ActivateEndpoint+0x72>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <USB_ActivateEndpoint+0x38>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006849 	.word	0x08006849
 800683c:	08006865 	.word	0x08006865
 8006840:	0800687b 	.word	0x0800687b
 8006844:	08006857 	.word	0x08006857
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006848:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800684c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006850:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006854:	e012      	b.n	800687c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006856:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800685a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800685e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006862:	e00b      	b.n	800687c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800686c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006870:	e004      	b.n	800687c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006878:	e000      	b.n	800687c <USB_ActivateEndpoint+0x7c>
      break;
 800687a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800688a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b6:	b21a      	sxth	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	b21b      	sxth	r3, r3
 80068be:	4313      	orrs	r3, r2
 80068c0:	b21b      	sxth	r3, r3
 80068c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80068d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 8178 	bne.w	8006be2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 8084 	beq.w	8006a04 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006906:	b29b      	uxth	r3, r3
 8006908:	461a      	mov	r2, r3
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	011a      	lsls	r2, r3, #4
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	88db      	ldrh	r3, [r3, #6]
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	b29b      	uxth	r3, r3
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	827b      	strh	r3, [r7, #18]
 800693e:	8a7b      	ldrh	r3, [r7, #18]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <USB_ActivateEndpoint+0x180>
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	823b      	strh	r3, [r7, #16]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	8a3b      	ldrh	r3, [r7, #16]
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	78db      	ldrb	r3, [r3, #3]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d020      	beq.n	80069ca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	81bb      	strh	r3, [r7, #12]
 80069a0:	89bb      	ldrh	r3, [r7, #12]
 80069a2:	f083 0320 	eor.w	r3, r3, #32
 80069a6:	81bb      	strh	r3, [r7, #12]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	89bb      	ldrh	r3, [r7, #12]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]
 80069c8:	e2d5      	b.n	8006f76 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	81fb      	strh	r3, [r7, #14]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
 8006a02:	e2b8      	b.n	8006f76 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	633b      	str	r3, [r7, #48]	; 0x30
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	4413      	add	r3, r2
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	011a      	lsls	r2, r3, #4
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	88db      	ldrh	r3, [r3, #6]
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	4413      	add	r3, r2
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	011a      	lsls	r2, r3, #4
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	4413      	add	r3, r2
 8006a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b3e      	cmp	r3, #62	; 0x3e
 8006a72:	d91d      	bls.n	8006ab0 <USB_ActivateEndpoint+0x2b0>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <USB_ActivateEndpoint+0x28e>
 8006a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	029b      	lsls	r3, r3, #10
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e026      	b.n	8006afe <USB_ActivateEndpoint+0x2fe>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <USB_ActivateEndpoint+0x2ce>
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e017      	b.n	8006afe <USB_ActivateEndpoint+0x2fe>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <USB_ActivateEndpoint+0x2e8>
 8006ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	029b      	lsls	r3, r3, #10
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01b      	beq.n	8006b4e <USB_ActivateEndpoint+0x34e>
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	843b      	strh	r3, [r7, #32]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	8c3b      	ldrh	r3, [r7, #32]
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d124      	bne.n	8006ba0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	83bb      	strh	r3, [r7, #28]
 8006b6e:	8bbb      	ldrh	r3, [r7, #28]
 8006b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b74:	83bb      	strh	r3, [r7, #28]
 8006b76:	8bbb      	ldrh	r3, [r7, #28]
 8006b78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b7c:	83bb      	strh	r3, [r7, #28]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8bbb      	ldrh	r3, [r7, #28]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
 8006b9e:	e1ea      	b.n	8006f76 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	83fb      	strh	r3, [r7, #30]
 8006bb8:	8bfb      	ldrh	r3, [r7, #30]
 8006bba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bbe:	83fb      	strh	r3, [r7, #30]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	8bfb      	ldrh	r3, [r7, #30]
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
 8006be0:	e1c9      	b.n	8006f76 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d11e      	bne.n	8006c28 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	441a      	add	r2, r3
 8006c0e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]
 8006c26:	e01d      	b.n	8006c64 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	441a      	add	r2, r3
 8006c4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c74:	4413      	add	r3, r2
 8006c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	011a      	lsls	r2, r3, #4
 8006c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	891b      	ldrh	r3, [r3, #8]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca8:	4413      	add	r3, r2
 8006caa:	657b      	str	r3, [r7, #84]	; 0x54
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	011a      	lsls	r2, r3, #4
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006cba:	653b      	str	r3, [r7, #80]	; 0x50
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	895b      	ldrh	r3, [r3, #10]
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 8093 	bne.w	8006dfc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ce6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01b      	beq.n	8006d2a <USB_ActivateEndpoint+0x52a>
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	441a      	add	r2, r3
 8006d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <USB_ActivateEndpoint+0x57a>
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d98:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006da0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8013      	strh	r3, [r2, #0]
 8006dfa:	e0bc      	b.n	8006f76 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01d      	beq.n	8006e54 <USB_ActivateEndpoint+0x654>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006e64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01d      	beq.n	8006eac <USB_ActivateEndpoint+0x6ac>
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	441a      	add	r2, r3
 8006e94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	78db      	ldrb	r3, [r3, #3]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d024      	beq.n	8006efe <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ece:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ed2:	f083 0320 	eor.w	r3, r3, #32
 8006ed6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
 8006efc:	e01d      	b.n	8006f3a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006f76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3774      	adds	r7, #116	; 0x74
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop

08006f88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b08d      	sub	sp, #52	; 0x34
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	7b1b      	ldrb	r3, [r3, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 808e 	bne.w	80070b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d044      	beq.n	800702e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	81bb      	strh	r3, [r7, #12]
 8006fb2:	89bb      	ldrh	r3, [r7, #12]
 8006fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01b      	beq.n	8006ff4 <USB_DeactivateEndpoint+0x6c>
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	817b      	strh	r3, [r7, #10]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	441a      	add	r2, r3
 8006fde:	897b      	ldrh	r3, [r7, #10]
 8006fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700a:	813b      	strh	r3, [r7, #8]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	893b      	ldrh	r3, [r7, #8]
 8007018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007028:	b29b      	uxth	r3, r3
 800702a:	8013      	strh	r3, [r2, #0]
 800702c:	e192      	b.n	8007354 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	827b      	strh	r3, [r7, #18]
 800703c:	8a7b      	ldrh	r3, [r7, #18]
 800703e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01b      	beq.n	800707e <USB_DeactivateEndpoint+0xf6>
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	823b      	strh	r3, [r7, #16]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	8a3b      	ldrh	r3, [r7, #16]
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	81fb      	strh	r3, [r7, #14]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]
 80070b6:	e14d      	b.n	8007354 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 80a5 	bne.w	800720c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	843b      	strh	r3, [r7, #32]
 80070d0:	8c3b      	ldrh	r3, [r7, #32]
 80070d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01b      	beq.n	8007112 <USB_DeactivateEndpoint+0x18a>
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	83fb      	strh	r3, [r7, #30]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	8bfb      	ldrh	r3, [r7, #30]
 80070fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800710a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710e:	b29b      	uxth	r3, r3
 8007110:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	83bb      	strh	r3, [r7, #28]
 8007120:	8bbb      	ldrh	r3, [r7, #28]
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01b      	beq.n	8007162 <USB_DeactivateEndpoint+0x1da>
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	837b      	strh	r3, [r7, #26]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	441a      	add	r2, r3
 800714c:	8b7b      	ldrh	r3, [r7, #26]
 800714e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800715e:	b29b      	uxth	r3, r3
 8007160:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007178:	833b      	strh	r3, [r7, #24]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	8b3b      	ldrh	r3, [r7, #24]
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	82fb      	strh	r3, [r7, #22]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	441a      	add	r2, r3
 80071bc:	8afb      	ldrh	r3, [r7, #22]
 80071be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e8:	82bb      	strh	r3, [r7, #20]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	8abb      	ldrh	r3, [r7, #20]
 80071f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007206:	b29b      	uxth	r3, r3
 8007208:	8013      	strh	r3, [r2, #0]
 800720a:	e0a3      	b.n	8007354 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800721a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800721c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01b      	beq.n	800725c <USB_DeactivateEndpoint+0x2d4>
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	b29b      	uxth	r3, r3
 800725a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	857b      	strh	r3, [r7, #42]	; 0x2a
 800726a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01b      	beq.n	80072ac <USB_DeactivateEndpoint+0x324>
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	b29b      	uxth	r3, r3
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728a:	853b      	strh	r3, [r7, #40]	; 0x28
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	441a      	add	r2, r3
 8007296:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	441a      	add	r2, r3
 8007306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007318:	b29b      	uxth	r3, r3
 800731a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	847b      	strh	r3, [r7, #34]	; 0x22
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	441a      	add	r2, r3
 800733e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3734      	adds	r7, #52	; 0x34
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b0c2      	sub	sp, #264	; 0x108
 8007366:	af00      	add	r7, sp, #0
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007370:	6018      	str	r0, [r3, #0]
 8007372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800737c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b01      	cmp	r3, #1
 800738a:	f040 86b7 	bne.w	80080fc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d908      	bls.n	80073bc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80073aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073ba:	e007      	b.n	80073cc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80073bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80073cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	7b1b      	ldrb	r3, [r3, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d13a      	bne.n	8007452 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6959      	ldr	r1, [r3, #20]
 80073e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	88da      	ldrh	r2, [r3, #6]
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007402:	6800      	ldr	r0, [r0, #0]
 8007404:	f001 fc8c 	bl	8008d20 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4413      	add	r3, r2
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	011a      	lsls	r2, r3, #4
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4413      	add	r3, r2
 800743e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	f000 be1f 	b.w	8008090 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	78db      	ldrb	r3, [r3, #3]
 800745e:	2b02      	cmp	r3, #2
 8007460:	f040 8462 	bne.w	8007d28 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	f240 83df 	bls.w	8007c40 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074da:	b29b      	uxth	r3, r3
 80074dc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80074de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6a1a      	ldr	r2, [r3, #32]
 80074ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 81c7 	beq.w	80078b2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	633b      	str	r3, [r7, #48]	; 0x30
 8007530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d177      	bne.n	8007630 <USB_EPStartXfer+0x2ce>
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	4413      	add	r3, r2
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	011a      	lsls	r2, r3, #4
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	4413      	add	r3, r2
 8007576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007586:	b29a      	uxth	r2, r3
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007590:	2b3e      	cmp	r3, #62	; 0x3e
 8007592:	d921      	bls.n	80075d8 <USB_EPStartXfer+0x276>
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <USB_EPStartXfer+0x252>
 80075aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075ae:	3b01      	subs	r3, #1
 80075b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075be:	b29b      	uxth	r3, r3
 80075c0:	029b      	lsls	r3, r3, #10
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4313      	orrs	r3, r2
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	e050      	b.n	800767a <USB_EPStartXfer+0x318>
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <USB_EPStartXfer+0x294>
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e041      	b.n	800767a <USB_EPStartXfer+0x318>
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <USB_EPStartXfer+0x2b4>
 800760c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007610:	3301      	adds	r3, #1
 8007612:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29a      	uxth	r2, r3
 800761c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007620:	b29b      	uxth	r3, r3
 8007622:	029b      	lsls	r3, r3, #10
 8007624:	b29b      	uxth	r3, r3
 8007626:	4313      	orrs	r3, r2
 8007628:	b29a      	uxth	r2, r3
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	e024      	b.n	800767a <USB_EPStartXfer+0x318>
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d11c      	bne.n	800767a <USB_EPStartXfer+0x318>
 8007640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764e:	b29b      	uxth	r3, r3
 8007650:	461a      	mov	r2, r3
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	4413      	add	r3, r2
 8007656:	633b      	str	r3, [r7, #48]	; 0x30
 8007658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	011a      	lsls	r2, r3, #4
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	4413      	add	r3, r2
 800766a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800766e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007674:	b29a      	uxth	r2, r3
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800767a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	895b      	ldrh	r3, [r3, #10]
 8007686:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800768a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6959      	ldr	r1, [r3, #20]
 8007696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769a:	b29b      	uxth	r3, r3
 800769c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076a8:	6800      	ldr	r0, [r0, #0]
 80076aa:	f001 fb39 	bl	8008d20 <USB_WritePMA>
            ep->xfer_buff += len;
 80076ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695a      	ldr	r2, [r3, #20]
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076be:	441a      	add	r2, r3
 80076c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d90f      	bls.n	8007708 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a1a      	ldr	r2, [r3, #32]
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	621a      	str	r2, [r3, #32]
 8007706:	e00e      	b.n	8007726 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	785b      	ldrb	r3, [r3, #1]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d177      	bne.n	8007826 <USB_EPStartXfer+0x4c4>
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007750:	b29b      	uxth	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	4413      	add	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	011a      	lsls	r2, r3, #4
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	4413      	add	r3, r2
 800776c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777c:	b29a      	uxth	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007786:	2b3e      	cmp	r3, #62	; 0x3e
 8007788:	d921      	bls.n	80077ce <USB_EPStartXfer+0x46c>
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <USB_EPStartXfer+0x448>
 80077a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a4:	3b01      	subs	r3, #1
 80077a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	029b      	lsls	r3, r3, #10
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4313      	orrs	r3, r2
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	e056      	b.n	800787c <USB_EPStartXfer+0x51a>
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <USB_EPStartXfer+0x48a>
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e047      	b.n	800787c <USB_EPStartXfer+0x51a>
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <USB_EPStartXfer+0x4aa>
 8007802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007806:	3301      	adds	r3, #1
 8007808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29a      	uxth	r2, r3
 8007812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b29a      	uxth	r2, r3
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e02a      	b.n	800787c <USB_EPStartXfer+0x51a>
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d122      	bne.n	800787c <USB_EPStartXfer+0x51a>
 8007836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	623b      	str	r3, [r7, #32]
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007850:	b29b      	uxth	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	4413      	add	r3, r2
 8007858:	623b      	str	r3, [r7, #32]
 800785a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	011a      	lsls	r2, r3, #4
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	4413      	add	r3, r2
 800786c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007876:	b29a      	uxth	r2, r3
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	891b      	ldrh	r3, [r3, #8]
 8007888:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800788c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6959      	ldr	r1, [r3, #20]
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789c:	b29b      	uxth	r3, r3
 800789e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	f001 fa38 	bl	8008d20 <USB_WritePMA>
 80078b0:	e3ee      	b.n	8008090 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d177      	bne.n	80079b2 <USB_EPStartXfer+0x650>
 80078c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078dc:	b29b      	uxth	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e2:	4413      	add	r3, r2
 80078e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	011a      	lsls	r2, r3, #4
 80078f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f6:	4413      	add	r3, r2
 80078f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078fc:	647b      	str	r3, [r7, #68]	; 0x44
 80078fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007908:	b29a      	uxth	r2, r3
 800790a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007912:	2b3e      	cmp	r3, #62	; 0x3e
 8007914:	d921      	bls.n	800795a <USB_EPStartXfer+0x5f8>
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	2b00      	cmp	r3, #0
 800792a:	d104      	bne.n	8007936 <USB_EPStartXfer+0x5d4>
 800792c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007930:	3b01      	subs	r3, #1
 8007932:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29a      	uxth	r2, r3
 800793c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007940:	b29b      	uxth	r3, r3
 8007942:	029b      	lsls	r3, r3, #10
 8007944:	b29b      	uxth	r3, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	b29b      	uxth	r3, r3
 800794a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007952:	b29a      	uxth	r2, r3
 8007954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e056      	b.n	8007a08 <USB_EPStartXfer+0x6a6>
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <USB_EPStartXfer+0x616>
 8007962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007970:	b29a      	uxth	r2, r3
 8007972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	e047      	b.n	8007a08 <USB_EPStartXfer+0x6a6>
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <USB_EPStartXfer+0x636>
 800798e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007992:	3301      	adds	r3, #1
 8007994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29a      	uxth	r2, r3
 800799e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	029b      	lsls	r3, r3, #10
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	e02a      	b.n	8007a08 <USB_EPStartXfer+0x6a6>
 80079b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d122      	bne.n	8007a08 <USB_EPStartXfer+0x6a6>
 80079c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	653b      	str	r3, [r7, #80]	; 0x50
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079dc:	b29b      	uxth	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e2:	4413      	add	r3, r2
 80079e4:	653b      	str	r3, [r7, #80]	; 0x50
 80079e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	011a      	lsls	r2, r3, #4
 80079f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f6:	4413      	add	r3, r2
 80079f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	891b      	ldrh	r3, [r3, #8]
 8007a14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6959      	ldr	r1, [r3, #20]
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a36:	6800      	ldr	r0, [r0, #0]
 8007a38:	f001 f972 	bl	8008d20 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695a      	ldr	r2, [r3, #20]
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4c:	441a      	add	r2, r3
 8007a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6a1a      	ldr	r2, [r3, #32]
 8007a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d90f      	bls.n	8007a96 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a86:	1ad2      	subs	r2, r2, r3
 8007a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	621a      	str	r2, [r3, #32]
 8007a94:	e00e      	b.n	8007ab4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d177      	bne.n	8007bc0 <USB_EPStartXfer+0x85e>
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8007adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af0:	4413      	add	r3, r2
 8007af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	011a      	lsls	r2, r3, #4
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	4413      	add	r3, r2
 8007b06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b20:	2b3e      	cmp	r3, #62	; 0x3e
 8007b22:	d921      	bls.n	8007b68 <USB_EPStartXfer+0x806>
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b32:	f003 031f 	and.w	r3, r3, #31
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <USB_EPStartXfer+0x7e2>
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	029b      	lsls	r3, r3, #10
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	e050      	b.n	8007c0a <USB_EPStartXfer+0x8a8>
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <USB_EPStartXfer+0x824>
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	e041      	b.n	8007c0a <USB_EPStartXfer+0x8a8>
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <USB_EPStartXfer+0x844>
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	029b      	lsls	r3, r3, #10
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	e024      	b.n	8007c0a <USB_EPStartXfer+0x8a8>
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d11c      	bne.n	8007c0a <USB_EPStartXfer+0x8a8>
 8007bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be4:	4413      	add	r3, r2
 8007be6:	643b      	str	r3, [r7, #64]	; 0x40
 8007be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	011a      	lsls	r2, r3, #4
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	895b      	ldrh	r3, [r3, #10]
 8007c16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6959      	ldr	r1, [r3, #20]
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c30:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c34:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c38:	6800      	ldr	r0, [r0, #0]
 8007c3a:	f001 f871 	bl	8008d20 <USB_WritePMA>
 8007c3e:	e227      	b.n	8008090 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ccc:	4413      	add	r3, r2
 8007cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	011a      	lsls	r2, r3, #4
 8007cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cf0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	891b      	ldrh	r3, [r3, #8]
 8007cfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6959      	ldr	r1, [r3, #20]
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d20:	6800      	ldr	r0, [r0, #0]
 8007d22:	f000 fffd 	bl	8008d20 <USB_WritePMA>
 8007d26:	e1b3      	b.n	8008090 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6a1a      	ldr	r2, [r3, #32]
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d38:	1ad2      	subs	r2, r2, r3
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 80c6 	beq.w	8007efa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	673b      	str	r3, [r7, #112]	; 0x70
 8007d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d177      	bne.n	8007e7a <USB_EPStartXfer+0xb18>
 8007d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007daa:	4413      	add	r3, r2
 8007dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	011a      	lsls	r2, r3, #4
 8007dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8007dc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dda:	2b3e      	cmp	r3, #62	; 0x3e
 8007ddc:	d921      	bls.n	8007e22 <USB_EPStartXfer+0xac0>
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <USB_EPStartXfer+0xa9c>
 8007df4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	029b      	lsls	r3, r3, #10
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	e050      	b.n	8007ec4 <USB_EPStartXfer+0xb62>
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <USB_EPStartXfer+0xade>
 8007e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	e041      	b.n	8007ec4 <USB_EPStartXfer+0xb62>
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <USB_EPStartXfer+0xafe>
 8007e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	029b      	lsls	r3, r3, #10
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	4313      	orrs	r3, r2
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e76:	801a      	strh	r2, [r3, #0]
 8007e78:	e024      	b.n	8007ec4 <USB_EPStartXfer+0xb62>
 8007e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d11c      	bne.n	8007ec4 <USB_EPStartXfer+0xb62>
 8007e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e9e:	4413      	add	r3, r2
 8007ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	011a      	lsls	r2, r3, #4
 8007eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	895b      	ldrh	r3, [r3, #10]
 8007ed0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6959      	ldr	r1, [r3, #20]
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007eea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007eee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ef2:	6800      	ldr	r0, [r0, #0]
 8007ef4:	f000 ff14 	bl	8008d20 <USB_WritePMA>
 8007ef8:	e0ca      	b.n	8008090 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d177      	bne.n	8007ffa <USB_EPStartXfer+0xc98>
 8007f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	461a      	mov	r2, r3
 8007f28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f2a:	4413      	add	r3, r2
 8007f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	011a      	lsls	r2, r3, #4
 8007f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f3e:	4413      	add	r3, r2
 8007f40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f54:	801a      	strh	r2, [r3, #0]
 8007f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f5c:	d921      	bls.n	8007fa2 <USB_EPStartXfer+0xc40>
 8007f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f62:	095b      	lsrs	r3, r3, #5
 8007f64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <USB_EPStartXfer+0xc1c>
 8007f74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	029b      	lsls	r3, r3, #10
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	e05c      	b.n	800805c <USB_EPStartXfer+0xcfa>
 8007fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <USB_EPStartXfer+0xc5e>
 8007faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	e04d      	b.n	800805c <USB_EPStartXfer+0xcfa>
 8007fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <USB_EPStartXfer+0xc7e>
 8007fd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fda:	3301      	adds	r3, #1
 8007fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	029b      	lsls	r3, r3, #10
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e030      	b.n	800805c <USB_EPStartXfer+0xcfa>
 8007ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d128      	bne.n	800805c <USB_EPStartXfer+0xcfa>
 800800a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008026:	b29b      	uxth	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800802e:	4413      	add	r3, r2
 8008030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	011a      	lsls	r2, r3, #4
 8008042:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008046:	4413      	add	r3, r2
 8008048:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800804c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800805a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	891b      	ldrh	r3, [r3, #8]
 8008068:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6959      	ldr	r1, [r3, #20]
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807c:	b29b      	uxth	r3, r3
 800807e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008082:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008086:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800808a:	6800      	ldr	r0, [r0, #0]
 800808c:	f000 fe48 	bl	8008d20 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b6:	817b      	strh	r3, [r7, #10]
 80080b8:	897b      	ldrh	r3, [r7, #10]
 80080ba:	f083 0310 	eor.w	r3, r3, #16
 80080be:	817b      	strh	r3, [r7, #10]
 80080c0:	897b      	ldrh	r3, [r7, #10]
 80080c2:	f083 0320 	eor.w	r3, r3, #32
 80080c6:	817b      	strh	r3, [r7, #10]
 80080c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	897b      	ldrh	r3, [r7, #10]
 80080e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	8013      	strh	r3, [r2, #0]
 80080f8:	f000 bcde 	b.w	8008ab8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80080fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	7b1b      	ldrb	r3, [r3, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 80bb 	bne.w	8008284 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800810e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699a      	ldr	r2, [r3, #24]
 800811a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	429a      	cmp	r2, r3
 8008128:	d917      	bls.n	800815a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	619a      	str	r2, [r3, #24]
 8008158:	e00e      	b.n	8008178 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800815a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2200      	movs	r2, #0
 8008176:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008194:	b29b      	uxth	r3, r3
 8008196:	461a      	mov	r2, r3
 8008198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800819c:	4413      	add	r3, r2
 800819e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	011a      	lsls	r2, r3, #4
 80081b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081b4:	4413      	add	r3, r2
 80081b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081d0:	801a      	strh	r2, [r3, #0]
 80081d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d6:	2b3e      	cmp	r3, #62	; 0x3e
 80081d8:	d924      	bls.n	8008224 <USB_EPStartXfer+0xec2>
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <USB_EPStartXfer+0xe98>
 80081f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081f4:	3b01      	subs	r3, #1
 80081f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29a      	uxth	r2, r3
 8008202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008206:	b29b      	uxth	r3, r3
 8008208:	029b      	lsls	r3, r3, #10
 800820a:	b29b      	uxth	r3, r3
 800820c:	4313      	orrs	r3, r2
 800820e:	b29b      	uxth	r3, r3
 8008210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	f000 bc10 	b.w	8008a44 <USB_EPStartXfer+0x16e2>
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10c      	bne.n	8008246 <USB_EPStartXfer+0xee4>
 800822c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008242:	801a      	strh	r2, [r3, #0]
 8008244:	e3fe      	b.n	8008a44 <USB_EPStartXfer+0x16e2>
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824a:	085b      	lsrs	r3, r3, #1
 800824c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <USB_EPStartXfer+0xf04>
 800825c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008260:	3301      	adds	r3, #1
 8008262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008272:	b29b      	uxth	r3, r3
 8008274:	029b      	lsls	r3, r3, #10
 8008276:	b29b      	uxth	r3, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	b29a      	uxth	r2, r3
 800827c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	e3df      	b.n	8008a44 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	2b02      	cmp	r3, #2
 8008292:	f040 8218 	bne.w	80086c6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f040 809d 	bne.w	80083e2 <USB_EPStartXfer+0x1080>
 80082a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	461a      	mov	r2, r3
 80082c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082cc:	4413      	add	r3, r2
 80082ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	011a      	lsls	r2, r3, #4
 80082e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082e4:	4413      	add	r3, r2
 80082e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b3e      	cmp	r3, #62	; 0x3e
 8008310:	d92b      	bls.n	800836a <USB_EPStartXfer+0x1008>
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 031f 	and.w	r3, r3, #31
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <USB_EPStartXfer+0xfe0>
 8008338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833c:	3b01      	subs	r3, #1
 800833e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29a      	uxth	r2, r3
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834e:	b29b      	uxth	r3, r3
 8008350:	029b      	lsls	r3, r3, #10
 8008352:	b29b      	uxth	r3, r3
 8008354:	4313      	orrs	r3, r2
 8008356:	b29b      	uxth	r3, r3
 8008358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800835c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008360:	b29a      	uxth	r2, r3
 8008362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008366:	801a      	strh	r2, [r3, #0]
 8008368:	e070      	b.n	800844c <USB_EPStartXfer+0x10ea>
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10c      	bne.n	8008394 <USB_EPStartXfer+0x1032>
 800837a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838a:	b29a      	uxth	r2, r3
 800838c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e05b      	b.n	800844c <USB_EPStartXfer+0x10ea>
 8008394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <USB_EPStartXfer+0x1062>
 80083ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083be:	3301      	adds	r3, #1
 80083c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	029b      	lsls	r3, r3, #10
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	4313      	orrs	r3, r2
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	e034      	b.n	800844c <USB_EPStartXfer+0x10ea>
 80083e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d12c      	bne.n	800844c <USB_EPStartXfer+0x10ea>
 80083f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840e:	b29b      	uxth	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008416:	4413      	add	r3, r2
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800841c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	011a      	lsls	r2, r3, #4
 800842a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800842e:	4413      	add	r3, r2
 8008430:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800845a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 809d 	bne.w	80085a6 <USB_EPStartXfer+0x1244>
 800846c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800847a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008488:	b29b      	uxth	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008490:	4413      	add	r3, r2
 8008492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	011a      	lsls	r2, r3, #4
 80084a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084a8:	4413      	add	r3, r2
 80084aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084be:	b29a      	uxth	r2, r3
 80084c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084c4:	801a      	strh	r2, [r3, #0]
 80084c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b3e      	cmp	r3, #62	; 0x3e
 80084d4:	d92b      	bls.n	800852e <USB_EPStartXfer+0x11cc>
 80084d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	f003 031f 	and.w	r3, r3, #31
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <USB_EPStartXfer+0x11a4>
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008500:	3b01      	subs	r3, #1
 8008502:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008506:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29a      	uxth	r2, r3
 800850e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008512:	b29b      	uxth	r3, r3
 8008514:	029b      	lsls	r3, r3, #10
 8008516:	b29b      	uxth	r3, r3
 8008518:	4313      	orrs	r3, r2
 800851a:	b29b      	uxth	r3, r3
 800851c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008524:	b29a      	uxth	r2, r3
 8008526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800852a:	801a      	strh	r2, [r3, #0]
 800852c:	e069      	b.n	8008602 <USB_EPStartXfer+0x12a0>
 800852e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <USB_EPStartXfer+0x11f6>
 800853e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008554:	801a      	strh	r2, [r3, #0]
 8008556:	e054      	b.n	8008602 <USB_EPStartXfer+0x12a0>
 8008558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	085b      	lsrs	r3, r3, #1
 8008566:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800856a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <USB_EPStartXfer+0x1226>
 800857e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008582:	3301      	adds	r3, #1
 8008584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	b29a      	uxth	r2, r3
 8008590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008594:	b29b      	uxth	r3, r3
 8008596:	029b      	lsls	r3, r3, #10
 8008598:	b29b      	uxth	r3, r3
 800859a:	4313      	orrs	r3, r2
 800859c:	b29a      	uxth	r2, r3
 800859e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085a2:	801a      	strh	r2, [r3, #0]
 80085a4:	e02d      	b.n	8008602 <USB_EPStartXfer+0x12a0>
 80085a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d125      	bne.n	8008602 <USB_EPStartXfer+0x12a0>
 80085b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085cc:	4413      	add	r3, r2
 80085ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80085d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	011a      	lsls	r2, r3, #4
 80085e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085e4:	4413      	add	r3, r2
 80085e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008600:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8218 	beq.w	8008a44 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008634:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <USB_EPStartXfer+0x12ea>
 8008640:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10d      	bne.n	8008668 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800864c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008654:	2b00      	cmp	r3, #0
 8008656:	f040 81f5 	bne.w	8008a44 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800865a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	f040 81ee 	bne.w	8008a44 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800868a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80086b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	8013      	strh	r3, [r2, #0]
 80086c4:	e1be      	b.n	8008a44 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	78db      	ldrb	r3, [r3, #3]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	f040 81b4 	bne.w	8008a40 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80086d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d917      	bls.n	8008724 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80086f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699a      	ldr	r2, [r3, #24]
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008714:	1ad2      	subs	r2, r2, r3
 8008716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	619a      	str	r2, [r3, #24]
 8008722:	e00e      	b.n	8008742 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2200      	movs	r2, #0
 8008740:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	785b      	ldrb	r3, [r3, #1]
 800874e:	2b00      	cmp	r3, #0
 8008750:	f040 8085 	bne.w	800885e <USB_EPStartXfer+0x14fc>
 8008754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008770:	b29b      	uxth	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008778:	4413      	add	r3, r2
 800877a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	011a      	lsls	r2, r3, #4
 800878c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008790:	4413      	add	r3, r2
 8008792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800879a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b2:	2b3e      	cmp	r3, #62	; 0x3e
 80087b4:	d923      	bls.n	80087fe <USB_EPStartXfer+0x149c>
 80087b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c4:	f003 031f 	and.w	r3, r3, #31
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d104      	bne.n	80087d6 <USB_EPStartXfer+0x1474>
 80087cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d0:	3b01      	subs	r3, #1
 80087d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	b29a      	uxth	r2, r3
 80087de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	029b      	lsls	r3, r3, #10
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	e060      	b.n	80088c0 <USB_EPStartXfer+0x155e>
 80087fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10c      	bne.n	8008820 <USB_EPStartXfer+0x14be>
 8008806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29b      	uxth	r3, r3
 800880e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008816:	b29a      	uxth	r2, r3
 8008818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800881c:	801a      	strh	r2, [r3, #0]
 800881e:	e04f      	b.n	80088c0 <USB_EPStartXfer+0x155e>
 8008820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800882a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <USB_EPStartXfer+0x14de>
 8008836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800883a:	3301      	adds	r3, #1
 800883c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29a      	uxth	r2, r3
 8008848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800884c:	b29b      	uxth	r3, r3
 800884e:	029b      	lsls	r3, r3, #10
 8008850:	b29b      	uxth	r3, r3
 8008852:	4313      	orrs	r3, r2
 8008854:	b29a      	uxth	r2, r3
 8008856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	e030      	b.n	80088c0 <USB_EPStartXfer+0x155e>
 800885e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d128      	bne.n	80088c0 <USB_EPStartXfer+0x155e>
 800886e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800887c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888a:	b29b      	uxth	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008892:	4413      	add	r3, r2
 8008894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	011a      	lsls	r2, r3, #4
 80088a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088aa:	4413      	add	r3, r2
 80088ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80088be:	801a      	strh	r2, [r3, #0]
 80088c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 8085 	bne.w	80089ea <USB_EPStartXfer+0x1688>
 80088e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80088ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008904:	4413      	add	r3, r2
 8008906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800890a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	011a      	lsls	r2, r3, #4
 8008918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800891c:	4413      	add	r3, r2
 800891e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008932:	b29a      	uxth	r2, r3
 8008934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800893e:	2b3e      	cmp	r3, #62	; 0x3e
 8008940:	d923      	bls.n	800898a <USB_EPStartXfer+0x1628>
 8008942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008946:	095b      	lsrs	r3, r3, #5
 8008948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800894c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008950:	f003 031f 	and.w	r3, r3, #31
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <USB_EPStartXfer+0x1600>
 8008958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800895c:	3b01      	subs	r3, #1
 800895e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b29a      	uxth	r2, r3
 800896a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800896e:	b29b      	uxth	r3, r3
 8008970:	029b      	lsls	r3, r3, #10
 8008972:	b29b      	uxth	r3, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	b29b      	uxth	r3, r3
 8008978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800897c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008980:	b29a      	uxth	r2, r3
 8008982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	e05c      	b.n	8008a44 <USB_EPStartXfer+0x16e2>
 800898a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10c      	bne.n	80089ac <USB_EPStartXfer+0x164a>
 8008992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	e04b      	b.n	8008a44 <USB_EPStartXfer+0x16e2>
 80089ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b0:	085b      	lsrs	r3, r3, #1
 80089b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <USB_EPStartXfer+0x166a>
 80089c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089c6:	3301      	adds	r3, #1
 80089c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089d8:	b29b      	uxth	r3, r3
 80089da:	029b      	lsls	r3, r3, #10
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089e6:	801a      	strh	r2, [r3, #0]
 80089e8:	e02c      	b.n	8008a44 <USB_EPStartXfer+0x16e2>
 80089ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	785b      	ldrb	r3, [r3, #1]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d124      	bne.n	8008a44 <USB_EPStartXfer+0x16e2>
 80089fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a10:	4413      	add	r3, r2
 8008a12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	011a      	lsls	r2, r3, #4
 8008a24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a28:	4413      	add	r3, r2
 8008a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a3c:	801a      	strh	r2, [r3, #0]
 8008a3e:	e001      	b.n	8008a44 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e03a      	b.n	8008aba <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a76:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a7a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a82:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	441a      	add	r2, r3
 8008aa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d020      	beq.n	8008b18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aec:	81bb      	strh	r3, [r7, #12]
 8008aee:	89bb      	ldrh	r3, [r7, #12]
 8008af0:	f083 0310 	eor.w	r3, r3, #16
 8008af4:	81bb      	strh	r3, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	441a      	add	r2, r3
 8008b00:	89bb      	ldrh	r3, [r7, #12]
 8008b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	8013      	strh	r3, [r2, #0]
 8008b16:	e01f      	b.n	8008b58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2e:	81fb      	strh	r3, [r7, #14]
 8008b30:	89fb      	ldrh	r3, [r7, #14]
 8008b32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b36:	81fb      	strh	r3, [r7, #14]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	441a      	add	r2, r3
 8008b42:	89fb      	ldrh	r3, [r7, #14]
 8008b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b087      	sub	sp, #28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	7b1b      	ldrb	r3, [r3, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f040 809d 	bne.w	8008cb4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04c      	beq.n	8008c1c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	823b      	strh	r3, [r7, #16]
 8008b90:	8a3b      	ldrh	r3, [r7, #16]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01b      	beq.n	8008bd2 <USB_EPClearStall+0x6c>
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb0:	81fb      	strh	r3, [r7, #14]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	441a      	add	r2, r3
 8008bbc:	89fb      	ldrh	r3, [r7, #14]
 8008bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	78db      	ldrb	r3, [r3, #3]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d06c      	beq.n	8008cb4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bf0:	81bb      	strh	r3, [r7, #12]
 8008bf2:	89bb      	ldrh	r3, [r7, #12]
 8008bf4:	f083 0320 	eor.w	r3, r3, #32
 8008bf8:	81bb      	strh	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	441a      	add	r2, r3
 8008c04:	89bb      	ldrh	r3, [r7, #12]
 8008c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	8013      	strh	r3, [r2, #0]
 8008c1a:	e04b      	b.n	8008cb4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	82fb      	strh	r3, [r7, #22]
 8008c2a:	8afb      	ldrh	r3, [r7, #22]
 8008c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01b      	beq.n	8008c6c <USB_EPClearStall+0x106>
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4a:	82bb      	strh	r3, [r7, #20]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	441a      	add	r2, r3
 8008c56:	8abb      	ldrh	r3, [r7, #20]
 8008c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c82:	827b      	strh	r3, [r7, #18]
 8008c84:	8a7b      	ldrh	r3, [r7, #18]
 8008c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c8a:	827b      	strh	r3, [r7, #18]
 8008c8c:	8a7b      	ldrh	r3, [r7, #18]
 8008c8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c92:	827b      	strh	r3, [r7, #18]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	8a7b      	ldrh	r3, [r7, #18]
 8008ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d103      	bne.n	8008cdc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2280      	movs	r2, #128	; 0x80
 8008cd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d12:	68fb      	ldr	r3, [r7, #12]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b08b      	sub	sp, #44	; 0x2c
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	460b      	mov	r3, r1
 8008d30:	80fb      	strh	r3, [r7, #6]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d36:	88bb      	ldrh	r3, [r7, #4]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	085b      	lsrs	r3, r3, #1
 8008d3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	005a      	lsls	r2, r3, #1
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
 8008d58:	e01e      	b.n	8008d98 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	3301      	adds	r3, #1
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	b21a      	sxth	r2, r3
 8008d6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	b21b      	sxth	r3, r3
 8008d72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	8a7a      	ldrh	r2, [r7, #18]
 8008d78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	3302      	adds	r3, #2
 8008d84:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	3b01      	subs	r3, #1
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1dd      	bne.n	8008d5a <USB_WritePMA+0x3a>
  }
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	372c      	adds	r7, #44	; 0x2c
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b08b      	sub	sp, #44	; 0x2c
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4611      	mov	r1, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	460b      	mov	r3, r1
 8008dbc:	80fb      	strh	r3, [r7, #6]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008dc2:	88bb      	ldrh	r3, [r7, #4]
 8008dc4:	085b      	lsrs	r3, r3, #1
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dd2:	88fb      	ldrh	r3, [r7, #6]
 8008dd4:	005a      	lsls	r2, r3, #1
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dde:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
 8008de4:	e01b      	b.n	8008e1e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	3302      	adds	r3, #2
 8008df2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	0a1b      	lsrs	r3, r3, #8
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	3302      	adds	r3, #2
 8008e16:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e0      	bne.n	8008de6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008e24:	88bb      	ldrh	r3, [r7, #4]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d007      	beq.n	8008e40 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	701a      	strb	r2, [r3, #0]
  }
}
 8008e40:	bf00      	nop
 8008e42:	372c      	adds	r7, #44	; 0x2c
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7c1b      	ldrb	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d115      	bne.n	8008e90 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e68:	2202      	movs	r2, #2
 8008e6a:	2181      	movs	r1, #129	; 0x81
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 feb8 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	2101      	movs	r1, #1
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 feae 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008e8e:	e012      	b.n	8008eb6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e90:	2340      	movs	r3, #64	; 0x40
 8008e92:	2202      	movs	r2, #2
 8008e94:	2181      	movs	r1, #129	; 0x81
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fea3 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ea2:	2340      	movs	r3, #64	; 0x40
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 fe9a 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	2203      	movs	r2, #3
 8008eba:	2182      	movs	r1, #130	; 0x82
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fe90 	bl	800abe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ec8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ecc:	f001 ffb2 	bl	800ae34 <USBD_static_malloc>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d102      	bne.n	8008ee8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	73fb      	strb	r3, [r7, #15]
 8008ee6:	e026      	b.n	8008f36 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7c1b      	ldrb	r3, [r3, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 ff51 	bl	800adc6 <USBD_LL_PrepareReceive>
 8008f24:	e007      	b.n	8008f36 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f2c:	2340      	movs	r3, #64	; 0x40
 8008f2e:	2101      	movs	r1, #1
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 ff48 	bl	800adc6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f50:	2181      	movs	r1, #129	; 0x81
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f001 fe6b 	bl	800ac2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008f5e:	2101      	movs	r1, #1
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 fe64 	bl	800ac2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f6e:	2182      	movs	r1, #130	; 0x82
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 fe5c 	bl	800ac2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00e      	beq.n	8008fa4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 ff5a 	bl	800ae50 <USBD_static_free>
    pdev->pClassData = NULL;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fbe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d039      	beq.n	800904c <USBD_CDC_Setup+0x9e>
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d17f      	bne.n	80090dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	88db      	ldrh	r3, [r3, #6]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d029      	beq.n	8009038 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	b25b      	sxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	da11      	bge.n	8009012 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008ffa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	88d2      	ldrh	r2, [r2, #6]
 8009000:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009002:	6939      	ldr	r1, [r7, #16]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	88db      	ldrh	r3, [r3, #6]
 8009008:	461a      	mov	r2, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 fa13 	bl	800a436 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009010:	e06b      	b.n	80090ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	785a      	ldrb	r2, [r3, #1]
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	88db      	ldrh	r3, [r3, #6]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009028:	6939      	ldr	r1, [r7, #16]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	88db      	ldrh	r3, [r3, #6]
 800902e:	461a      	mov	r2, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fa2e 	bl	800a492 <USBD_CtlPrepareRx>
      break;
 8009036:	e058      	b.n	80090ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	7850      	ldrb	r0, [r2, #1]
 8009044:	2200      	movs	r2, #0
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	4798      	blx	r3
      break;
 800904a:	e04e      	b.n	80090ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	2b0b      	cmp	r3, #11
 8009052:	d02e      	beq.n	80090b2 <USBD_CDC_Setup+0x104>
 8009054:	2b0b      	cmp	r3, #11
 8009056:	dc38      	bgt.n	80090ca <USBD_CDC_Setup+0x11c>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <USBD_CDC_Setup+0xb4>
 800905c:	2b0a      	cmp	r3, #10
 800905e:	d014      	beq.n	800908a <USBD_CDC_Setup+0xdc>
 8009060:	e033      	b.n	80090ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	2b03      	cmp	r3, #3
 800906a:	d107      	bne.n	800907c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800906c:	f107 030c 	add.w	r3, r7, #12
 8009070:	2202      	movs	r2, #2
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f9de 	bl	800a436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800907a:	e02e      	b.n	80090da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 f96e 	bl	800a360 <USBD_CtlError>
            ret = USBD_FAIL;
 8009084:	2302      	movs	r3, #2
 8009086:	75fb      	strb	r3, [r7, #23]
          break;
 8009088:	e027      	b.n	80090da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009090:	2b03      	cmp	r3, #3
 8009092:	d107      	bne.n	80090a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009094:	f107 030f 	add.w	r3, r7, #15
 8009098:	2201      	movs	r2, #1
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f9ca 	bl	800a436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090a2:	e01a      	b.n	80090da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 f95a 	bl	800a360 <USBD_CtlError>
            ret = USBD_FAIL;
 80090ac:	2302      	movs	r3, #2
 80090ae:	75fb      	strb	r3, [r7, #23]
          break;
 80090b0:	e013      	b.n	80090da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d00d      	beq.n	80090d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 f94e 	bl	800a360 <USBD_CtlError>
            ret = USBD_FAIL;
 80090c4:	2302      	movs	r3, #2
 80090c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090c8:	e006      	b.n	80090d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 f947 	bl	800a360 <USBD_CtlError>
          ret = USBD_FAIL;
 80090d2:	2302      	movs	r3, #2
 80090d4:	75fb      	strb	r3, [r7, #23]
          break;
 80090d6:	e000      	b.n	80090da <USBD_CDC_Setup+0x12c>
          break;
 80090d8:	bf00      	nop
      }
      break;
 80090da:	e006      	b.n	80090ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 f93e 	bl	800a360 <USBD_CtlError>
      ret = USBD_FAIL;
 80090e4:	2302      	movs	r3, #2
 80090e6:	75fb      	strb	r3, [r7, #23]
      break;
 80090e8:	bf00      	nop
  }

  return ret;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009106:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800910e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009116:	2b00      	cmp	r3, #0
 8009118:	d03a      	beq.n	8009190 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	440b      	add	r3, r1
 8009128:	331c      	adds	r3, #28
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d029      	beq.n	8009184 <USBD_CDC_DataIn+0x90>
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	331c      	adds	r3, #28
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	78f9      	ldrb	r1, [r7, #3]
 8009144:	68b8      	ldr	r0, [r7, #8]
 8009146:	460b      	mov	r3, r1
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	440b      	add	r3, r1
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	4403      	add	r3, r0
 8009150:	3338      	adds	r3, #56	; 0x38
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	fbb2 f1f3 	udiv	r1, r2, r3
 8009158:	fb01 f303 	mul.w	r3, r1, r3
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d110      	bne.n	8009184 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	331c      	adds	r3, #28
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009176:	78f9      	ldrb	r1, [r7, #3]
 8009178:	2300      	movs	r3, #0
 800917a:	2200      	movs	r2, #0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fdff 	bl	800ad80 <USBD_LL_Transmit>
 8009182:	e003      	b.n	800918c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	e000      	b.n	8009192 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009190:	2302      	movs	r3, #2
  }
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 fe2a 	bl	800ae0c <USBD_LL_GetRxDataSize>
 80091b8:	4602      	mov	r2, r0
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091de:	4611      	mov	r1, r2
 80091e0:	4798      	blx	r3

    return USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	e000      	b.n	80091e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80091e6:	2302      	movs	r3, #2
  }
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009206:	2b00      	cmp	r3, #0
 8009208:	d015      	beq.n	8009236 <USBD_CDC_EP0_RxReady+0x46>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009210:	2bff      	cmp	r3, #255	; 0xff
 8009212:	d010      	beq.n	8009236 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009222:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800922a:	b292      	uxth	r2, r2
 800922c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	22ff      	movs	r2, #255	; 0xff
 8009232:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2243      	movs	r2, #67	; 0x43
 800924c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800924e:	4b03      	ldr	r3, [pc, #12]	; (800925c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	20000098 	.word	0x20000098

08009260 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2243      	movs	r2, #67	; 0x43
 800926c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800926e:	4b03      	ldr	r3, [pc, #12]	; (800927c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	20000054 	.word	0x20000054

08009280 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2243      	movs	r2, #67	; 0x43
 800928c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800928e:	4b03      	ldr	r3, [pc, #12]	; (800929c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	200000dc 	.word	0x200000dc

080092a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	220a      	movs	r2, #10
 80092ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80092ae:	4b03      	ldr	r3, [pc, #12]	; (80092bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	20000010 	.word	0x20000010

080092c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80092ca:	2302      	movs	r3, #2
 80092cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b087      	sub	sp, #28
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	4613      	mov	r3, r2
 80092fa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009302:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800930c:	88fa      	ldrh	r2, [r7, #6]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	371c      	adds	r7, #28
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009332:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009358:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01c      	beq.n	800939e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800936a:	2b00      	cmp	r3, #0
 800936c:	d115      	bne.n	800939a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2201      	movs	r2, #1
 8009372:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800938c:	b29b      	uxth	r3, r3
 800938e:	2181      	movs	r1, #129	; 0x81
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 fcf5 	bl	800ad80 <USBD_LL_Transmit>

      return USBD_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	e002      	b.n	80093a0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800939e:	2302      	movs	r3, #2
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d017      	beq.n	80093f2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7c1b      	ldrb	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d109      	bne.n	80093de <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093d4:	2101      	movs	r1, #1
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fcf5 	bl	800adc6 <USBD_LL_PrepareReceive>
 80093dc:	e007      	b.n	80093ee <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093e4:	2340      	movs	r3, #64	; 0x40
 80093e6:	2101      	movs	r1, #1
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 fcec 	bl	800adc6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	e000      	b.n	80093f4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80093f2:	2302      	movs	r3, #2
  }
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009410:	2302      	movs	r3, #2
 8009412:	e01a      	b.n	800944a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	79fa      	ldrb	r2, [r7, #7]
 8009440:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f001 fb58 	bl	800aaf8 <USBD_LL_Init>

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d006      	beq.n	8009474 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]
 8009472:	e001      	b.n	8009478 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009474:	2302      	movs	r3, #2
 8009476:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009478:	7bfb      	ldrb	r3, [r7, #15]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fb8c 	bl	800abac <USBD_LL_Start>

  return USBD_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094c0:	2302      	movs	r3, #2
 80094c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00c      	beq.n	80094e8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4611      	mov	r1, r2
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	4798      	blx	r3
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	460b      	mov	r3, r1
 80094fc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	4611      	mov	r1, r2
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	4798      	blx	r3

  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fedb 	bl	800a2e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800953e:	461a      	mov	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	2b02      	cmp	r3, #2
 8009552:	d016      	beq.n	8009582 <USBD_LL_SetupStage+0x6a>
 8009554:	2b02      	cmp	r3, #2
 8009556:	d81c      	bhi.n	8009592 <USBD_LL_SetupStage+0x7a>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <USBD_LL_SetupStage+0x4a>
 800955c:	2b01      	cmp	r3, #1
 800955e:	d008      	beq.n	8009572 <USBD_LL_SetupStage+0x5a>
 8009560:	e017      	b.n	8009592 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f9ce 	bl	800990c <USBD_StdDevReq>
      break;
 8009570:	e01a      	b.n	80095a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fa30 	bl	80099e0 <USBD_StdItfReq>
      break;
 8009580:	e012      	b.n	80095a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa70 	bl	8009a70 <USBD_StdEPReq>
      break;
 8009590:	e00a      	b.n	80095a8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800959c:	b2db      	uxtb	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fb63 	bl	800ac6c <USBD_LL_StallEP>
      break;
 80095a6:	bf00      	nop
  }

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	460b      	mov	r3, r1
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d14b      	bne.n	800965e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d134      	bne.n	8009642 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d919      	bls.n	8009618 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	68da      	ldr	r2, [r3, #12]
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	1ad2      	subs	r2, r2, r3
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d203      	bcs.n	8009606 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009602:	b29b      	uxth	r3, r3
 8009604:	e002      	b.n	800960c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800960a:	b29b      	uxth	r3, r3
 800960c:	461a      	mov	r2, r3
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 ff5c 	bl	800a4ce <USBD_CtlContinueRx>
 8009616:	e038      	b.n	800968a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00a      	beq.n	800963a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800962a:	2b03      	cmp	r3, #3
 800962c:	d105      	bne.n	800963a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 ff59 	bl	800a4f2 <USBD_CtlSendStatus>
 8009640:	e023      	b.n	800968a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009648:	2b05      	cmp	r3, #5
 800964a:	d11e      	bne.n	800968a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009654:	2100      	movs	r1, #0
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f001 fb08 	bl	800ac6c <USBD_LL_StallEP>
 800965c:	e015      	b.n	800968a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00d      	beq.n	8009686 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009670:	2b03      	cmp	r3, #3
 8009672:	d108      	bne.n	8009686 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	7afa      	ldrb	r2, [r7, #11]
 800967e:	4611      	mov	r1, r2
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	4798      	blx	r3
 8009684:	e001      	b.n	800968a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009686:	2302      	movs	r3, #2
 8009688:	e000      	b.n	800968c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	460b      	mov	r3, r1
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096a2:	7afb      	ldrb	r3, [r7, #11]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d17f      	bne.n	80097a8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3314      	adds	r3, #20
 80096ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d15c      	bne.n	8009772 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d915      	bls.n	80096f0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	1ad2      	subs	r2, r2, r3
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	461a      	mov	r2, r3
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 fec6 	bl	800a46e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096e2:	2300      	movs	r3, #0
 80096e4:	2200      	movs	r2, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f001 fb6c 	bl	800adc6 <USBD_LL_PrepareReceive>
 80096ee:	e04e      	b.n	800978e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	6912      	ldr	r2, [r2, #16]
 80096f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80096fc:	fb01 f202 	mul.w	r2, r1, r2
 8009700:	1a9b      	subs	r3, r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d11c      	bne.n	8009740 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800970e:	429a      	cmp	r2, r3
 8009710:	d316      	bcc.n	8009740 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800971c:	429a      	cmp	r2, r3
 800971e:	d20f      	bcs.n	8009740 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009720:	2200      	movs	r2, #0
 8009722:	2100      	movs	r1, #0
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 fea2 	bl	800a46e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009732:	2300      	movs	r3, #0
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f001 fb44 	bl	800adc6 <USBD_LL_PrepareReceive>
 800973e:	e026      	b.n	800978e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009752:	2b03      	cmp	r3, #3
 8009754:	d105      	bne.n	8009762 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009762:	2180      	movs	r1, #128	; 0x80
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f001 fa81 	bl	800ac6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fed4 	bl	800a518 <USBD_CtlReceiveStatus>
 8009770:	e00d      	b.n	800978e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009778:	2b04      	cmp	r3, #4
 800977a:	d004      	beq.n	8009786 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009782:	2b00      	cmp	r3, #0
 8009784:	d103      	bne.n	800978e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009786:	2180      	movs	r1, #128	; 0x80
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f001 fa6f 	bl	800ac6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009794:	2b01      	cmp	r3, #1
 8009796:	d11d      	bne.n	80097d4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fe80 	bl	800949e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097a6:	e015      	b.n	80097d4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00d      	beq.n	80097d0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d108      	bne.n	80097d0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	7afa      	ldrb	r2, [r7, #11]
 80097c8:	4611      	mov	r1, r2
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	4798      	blx	r3
 80097ce:	e001      	b.n	80097d4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097d0:	2302      	movs	r3, #2
 80097d2:	e000      	b.n	80097d6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097e6:	2340      	movs	r3, #64	; 0x40
 80097e8:	2200      	movs	r2, #0
 80097ea:	2100      	movs	r1, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 f9f8 	bl	800abe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2240      	movs	r2, #64	; 0x40
 80097fe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009802:	2340      	movs	r3, #64	; 0x40
 8009804:	2200      	movs	r2, #0
 8009806:	2180      	movs	r1, #128	; 0x80
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f001 f9ea 	bl	800abe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2240      	movs	r2, #64	; 0x40
 8009818:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d009      	beq.n	8009856 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6852      	ldr	r2, [r2, #4]
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	4611      	mov	r1, r2
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
  }

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	78fa      	ldrb	r2, [r7, #3]
 8009870:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2204      	movs	r2, #4
 8009898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d105      	bne.n	80098c8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d10b      	bne.n	8009900 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009922:	2b40      	cmp	r3, #64	; 0x40
 8009924:	d005      	beq.n	8009932 <USBD_StdDevReq+0x26>
 8009926:	2b40      	cmp	r3, #64	; 0x40
 8009928:	d84f      	bhi.n	80099ca <USBD_StdDevReq+0xbe>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <USBD_StdDevReq+0x36>
 800992e:	2b20      	cmp	r3, #32
 8009930:	d14b      	bne.n	80099ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
      break;
 8009940:	e048      	b.n	80099d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	2b09      	cmp	r3, #9
 8009948:	d839      	bhi.n	80099be <USBD_StdDevReq+0xb2>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <USBD_StdDevReq+0x44>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099b5 	.word	0x080099b5
 8009958:	080099bf 	.word	0x080099bf
 800995c:	080099ab 	.word	0x080099ab
 8009960:	080099bf 	.word	0x080099bf
 8009964:	08009983 	.word	0x08009983
 8009968:	08009979 	.word	0x08009979
 800996c:	080099bf 	.word	0x080099bf
 8009970:	08009997 	.word	0x08009997
 8009974:	0800998d 	.word	0x0800998d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9dc 	bl	8009d38 <USBD_GetDescriptor>
          break;
 8009980:	e022      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fb3f 	bl	800a008 <USBD_SetAddress>
          break;
 800998a:	e01d      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fb7e 	bl	800a090 <USBD_SetConfig>
          break;
 8009994:	e018      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc07 	bl	800a1ac <USBD_GetConfig>
          break;
 800999e:	e013      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fc37 	bl	800a216 <USBD_GetStatus>
          break;
 80099a8:	e00e      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc65 	bl	800a27c <USBD_SetFeature>
          break;
 80099b2:	e009      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fc74 	bl	800a2a4 <USBD_ClrFeature>
          break;
 80099bc:	e004      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fccd 	bl	800a360 <USBD_CtlError>
          break;
 80099c6:	bf00      	nop
      }
      break;
 80099c8:	e004      	b.n	80099d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fcc7 	bl	800a360 <USBD_CtlError>
      break;
 80099d2:	bf00      	nop
  }

  return ret;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop

080099e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d005      	beq.n	8009a06 <USBD_StdItfReq+0x26>
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d82e      	bhi.n	8009a5c <USBD_StdItfReq+0x7c>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <USBD_StdItfReq+0x26>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d12a      	bne.n	8009a5c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d81d      	bhi.n	8009a4e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	889b      	ldrh	r3, [r3, #4]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d813      	bhi.n	8009a44 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	4798      	blx	r3
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	88db      	ldrh	r3, [r3, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d110      	bne.n	8009a58 <USBD_StdItfReq+0x78>
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10d      	bne.n	8009a58 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fd58 	bl	800a4f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a42:	e009      	b.n	8009a58 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fc8a 	bl	800a360 <USBD_CtlError>
          break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fc85 	bl	800a360 <USBD_CtlError>
          break;
 8009a56:	e000      	b.n	8009a5a <USBD_StdItfReq+0x7a>
          break;
 8009a58:	bf00      	nop
      }
      break;
 8009a5a:	e004      	b.n	8009a66 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fc7e 	bl	800a360 <USBD_CtlError>
      break;
 8009a64:	bf00      	nop
  }

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	889b      	ldrh	r3, [r3, #4]
 8009a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d007      	beq.n	8009aa0 <USBD_StdEPReq+0x30>
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	f200 8146 	bhi.w	8009d22 <USBD_StdEPReq+0x2b2>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <USBD_StdEPReq+0x40>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	f040 8141 	bne.w	8009d22 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
      break;
 8009aae:	e13d      	b.n	8009d2c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d10a      	bne.n	8009ad2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	e12d      	b.n	8009d2e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d007      	beq.n	8009aea <USBD_StdEPReq+0x7a>
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	f300 811b 	bgt.w	8009d16 <USBD_StdEPReq+0x2a6>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d072      	beq.n	8009bca <USBD_StdEPReq+0x15a>
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d03a      	beq.n	8009b5e <USBD_StdEPReq+0xee>
 8009ae8:	e115      	b.n	8009d16 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d002      	beq.n	8009afa <USBD_StdEPReq+0x8a>
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d015      	beq.n	8009b24 <USBD_StdEPReq+0xb4>
 8009af8:	e02b      	b.n	8009b52 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00c      	beq.n	8009b1a <USBD_StdEPReq+0xaa>
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	2b80      	cmp	r3, #128	; 0x80
 8009b04:	d009      	beq.n	8009b1a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 f8ae 	bl	800ac6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b10:	2180      	movs	r1, #128	; 0x80
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 f8aa 	bl	800ac6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b18:	e020      	b.n	8009b5c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fc1f 	bl	800a360 <USBD_CtlError>
              break;
 8009b22:	e01b      	b.n	8009b5c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	885b      	ldrh	r3, [r3, #2]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10e      	bne.n	8009b4a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <USBD_StdEPReq+0xda>
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d008      	beq.n	8009b4a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	88db      	ldrh	r3, [r3, #6]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d104      	bne.n	8009b4a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 f891 	bl	800ac6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fcd1 	bl	800a4f2 <USBD_CtlSendStatus>

              break;
 8009b50:	e004      	b.n	8009b5c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fc03 	bl	800a360 <USBD_CtlError>
              break;
 8009b5a:	bf00      	nop
          }
          break;
 8009b5c:	e0e0      	b.n	8009d20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d002      	beq.n	8009b6e <USBD_StdEPReq+0xfe>
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d015      	beq.n	8009b98 <USBD_StdEPReq+0x128>
 8009b6c:	e026      	b.n	8009bbc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <USBD_StdEPReq+0x11e>
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b80      	cmp	r3, #128	; 0x80
 8009b78:	d009      	beq.n	8009b8e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 f874 	bl	800ac6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b84:	2180      	movs	r1, #128	; 0x80
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 f870 	bl	800ac6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b8c:	e01c      	b.n	8009bc8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fbe5 	bl	800a360 <USBD_CtlError>
              break;
 8009b96:	e017      	b.n	8009bc8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	885b      	ldrh	r3, [r3, #2]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d112      	bne.n	8009bc6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d004      	beq.n	8009bb4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 f87b 	bl	800acaa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fc9c 	bl	800a4f2 <USBD_CtlSendStatus>
              }
              break;
 8009bba:	e004      	b.n	8009bc6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fbce 	bl	800a360 <USBD_CtlError>
              break;
 8009bc4:	e000      	b.n	8009bc8 <USBD_StdEPReq+0x158>
              break;
 8009bc6:	bf00      	nop
          }
          break;
 8009bc8:	e0aa      	b.n	8009d20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d002      	beq.n	8009bda <USBD_StdEPReq+0x16a>
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d032      	beq.n	8009c3e <USBD_StdEPReq+0x1ce>
 8009bd8:	e097      	b.n	8009d0a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <USBD_StdEPReq+0x180>
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b80      	cmp	r3, #128	; 0x80
 8009be4:	d004      	beq.n	8009bf0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fbb9 	bl	800a360 <USBD_CtlError>
                break;
 8009bee:	e091      	b.n	8009d14 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	da0b      	bge.n	8009c10 <USBD_StdEPReq+0x1a0>
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	3310      	adds	r3, #16
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	e00b      	b.n	8009c28 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c16:	4613      	mov	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	3304      	adds	r3, #4
 8009c28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2202      	movs	r2, #2
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fbfd 	bl	800a436 <USBD_CtlSendData>
              break;
 8009c3c:	e06a      	b.n	8009d14 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da11      	bge.n	8009c6a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	3318      	adds	r3, #24
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d117      	bne.n	8009c90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fb7c 	bl	800a360 <USBD_CtlError>
                  break;
 8009c68:	e054      	b.n	8009d14 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fb69 	bl	800a360 <USBD_CtlError>
                  break;
 8009c8e:	e041      	b.n	8009d14 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da0b      	bge.n	8009cb0 <USBD_StdEPReq+0x240>
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4413      	add	r3, r2
 8009cac:	3304      	adds	r3, #4
 8009cae:	e00b      	b.n	8009cc8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <USBD_StdEPReq+0x266>
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	d103      	bne.n	8009cde <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	e00e      	b.n	8009cfc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 f800 	bl	800ace8 <USBD_LL_IsStallEP>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e002      	b.n	8009cfc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fb97 	bl	800a436 <USBD_CtlSendData>
              break;
 8009d08:	e004      	b.n	8009d14 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb27 	bl	800a360 <USBD_CtlError>
              break;
 8009d12:	bf00      	nop
          }
          break;
 8009d14:	e004      	b.n	8009d20 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb21 	bl	800a360 <USBD_CtlError>
          break;
 8009d1e:	bf00      	nop
      }
      break;
 8009d20:	e004      	b.n	8009d2c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb1b 	bl	800a360 <USBD_CtlError>
      break;
 8009d2a:	bf00      	nop
  }

  return ret;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	2b06      	cmp	r3, #6
 8009d5a:	f200 8128 	bhi.w	8009fae <USBD_GetDescriptor+0x276>
 8009d5e:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <USBD_GetDescriptor+0x2c>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d99 	.word	0x08009d99
 8009d6c:	08009dd9 	.word	0x08009dd9
 8009d70:	08009faf 	.word	0x08009faf
 8009d74:	08009faf 	.word	0x08009faf
 8009d78:	08009f4f 	.word	0x08009f4f
 8009d7c:	08009f7b 	.word	0x08009f7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
      break;
 8009d96:	e112      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7c1b      	ldrb	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10d      	bne.n	8009dbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	f107 0208 	add.w	r2, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	2202      	movs	r2, #2
 8009db8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dba:	e100      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	f107 0208 	add.w	r2, r7, #8
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	e0f2      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	885b      	ldrh	r3, [r3, #2]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	f200 80ac 	bhi.w	8009f3c <USBD_GetDescriptor+0x204>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <USBD_GetDescriptor+0xb4>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e39 	.word	0x08009e39
 8009df4:	08009e6d 	.word	0x08009e6d
 8009df8:	08009ea1 	.word	0x08009ea1
 8009dfc:	08009ed5 	.word	0x08009ed5
 8009e00:	08009f09 	.word	0x08009f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	7c12      	ldrb	r2, [r2, #16]
 8009e1c:	f107 0108 	add.w	r1, r7, #8
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e26:	e091      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa98 	bl	800a360 <USBD_CtlError>
            err++;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	3301      	adds	r3, #1
 8009e34:	72fb      	strb	r3, [r7, #11]
          break;
 8009e36:	e089      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7c12      	ldrb	r2, [r2, #16]
 8009e50:	f107 0108 	add.w	r1, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5a:	e077      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa7e 	bl	800a360 <USBD_CtlError>
            err++;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	3301      	adds	r3, #1
 8009e68:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6a:	e06f      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8e:	e05d      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa64 	bl	800a360 <USBD_CtlError>
            err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9e:	e055      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	f107 0108 	add.w	r1, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec2:	e043      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa4a 	bl	800a360 <USBD_CtlError>
            err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed2:	e03b      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7c12      	ldrb	r2, [r2, #16]
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef6:	e029      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa30 	bl	800a360 <USBD_CtlError>
            err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
          break;
 8009f06:	e021      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e00f      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa16 	bl	800a360 <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e007      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa0e 	bl	800a360 <USBD_CtlError>
          err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f4a:	e038      	b.n	8009fbe <USBD_GetDescriptor+0x286>
 8009f4c:	e037      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7c1b      	ldrb	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	f107 0208 	add.w	r2, r7, #8
 8009f62:	4610      	mov	r0, r2
 8009f64:	4798      	blx	r3
 8009f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f68:	e029      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f9f7 	bl	800a360 <USBD_CtlError>
        err++;
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	3301      	adds	r3, #1
 8009f76:	72fb      	strb	r3, [r7, #11]
      break;
 8009f78:	e021      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	7c1b      	ldrb	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10d      	bne.n	8009f9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	f107 0208 	add.w	r2, r7, #8
 8009f8e:	4610      	mov	r0, r2
 8009f90:	4798      	blx	r3
 8009f92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3301      	adds	r3, #1
 8009f98:	2207      	movs	r2, #7
 8009f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f9c:	e00f      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9dd 	bl	800a360 <USBD_CtlError>
        err++;
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	72fb      	strb	r3, [r7, #11]
      break;
 8009fac:	e007      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9d5 	bl	800a360 <USBD_CtlError>
      err++;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbc:	bf00      	nop
  }

  if (err != 0U)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11c      	bne.n	8009ffe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009fc4:	893b      	ldrh	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <USBD_GetDescriptor+0x2b6>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	88db      	ldrh	r3, [r3, #6]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00d      	beq.n	8009fee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88da      	ldrh	r2, [r3, #6]
 8009fd6:	893b      	ldrh	r3, [r7, #8]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	bf28      	it	cs
 8009fdc:	4613      	movcs	r3, r2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fe2:	893b      	ldrh	r3, [r7, #8]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa24 	bl	800a436 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	88db      	ldrh	r3, [r3, #6]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d104      	bne.n	800a000 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa7b 	bl	800a4f2 <USBD_CtlSendStatus>
 8009ffc:	e000      	b.n	800a000 <USBD_GetDescriptor+0x2c8>
    return;
 8009ffe:	bf00      	nop
    }
  }
}
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop

0800a008 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	889b      	ldrh	r3, [r3, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d130      	bne.n	800a07c <USBD_SetAddress+0x74>
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	88db      	ldrh	r3, [r3, #6]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d12c      	bne.n	800a07c <USBD_SetAddress+0x74>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	2b7f      	cmp	r3, #127	; 0x7f
 800a028:	d828      	bhi.n	800a07c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	885b      	ldrh	r3, [r3, #2]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a034:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d104      	bne.n	800a04a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f98c 	bl	800a360 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a048:	e01d      	b.n	800a086 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7bfa      	ldrb	r2, [r7, #15]
 800a04e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fe73 	bl	800ad42 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fa48 	bl	800a4f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2202      	movs	r2, #2
 800a06c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a070:	e009      	b.n	800a086 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	e004      	b.n	800a086 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f96e 	bl	800a360 <USBD_CtlError>
  }
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	885b      	ldrh	r3, [r3, #2]
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	4b41      	ldr	r3, [pc, #260]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0a4:	4b40      	ldr	r3, [pc, #256]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d904      	bls.n	800a0b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f956 	bl	800a360 <USBD_CtlError>
 800a0b4:	e075      	b.n	800a1a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d002      	beq.n	800a0c6 <USBD_SetConfig+0x36>
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d023      	beq.n	800a10c <USBD_SetConfig+0x7c>
 800a0c4:	e062      	b.n	800a18c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0c6:	4b38      	ldr	r3, [pc, #224]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01a      	beq.n	800a104 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0ce:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0e0:	4b31      	ldr	r3, [pc, #196]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff f9e4 	bl	80094b4 <USBD_SetClassConfig>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d104      	bne.n	800a0fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f933 	bl	800a360 <USBD_CtlError>
            return;
 800a0fa:	e052      	b.n	800a1a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f9f8 	bl	800a4f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a102:	e04e      	b.n	800a1a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9f4 	bl	800a4f2 <USBD_CtlSendStatus>
        break;
 800a10a:	e04a      	b.n	800a1a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a10c:	4b26      	ldr	r3, [pc, #152]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d112      	bne.n	800a13a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a11c:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a126:	4b20      	ldr	r3, [pc, #128]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff f9e0 	bl	80094f2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f9dd 	bl	800a4f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a138:	e033      	b.n	800a1a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a13a:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d01d      	beq.n	800a184 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff f9ce 	bl	80094f2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a160:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff f9a4 	bl	80094b4 <USBD_SetClassConfig>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d104      	bne.n	800a17c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f8f3 	bl	800a360 <USBD_CtlError>
            return;
 800a17a:	e012      	b.n	800a1a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f9b8 	bl	800a4f2 <USBD_CtlSendStatus>
        break;
 800a182:	e00e      	b.n	800a1a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f9b4 	bl	800a4f2 <USBD_CtlSendStatus>
        break;
 800a18a:	e00a      	b.n	800a1a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f8e6 	bl	800a360 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a194:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff f9a9 	bl	80094f2 <USBD_ClrClassConfig>
        break;
 800a1a0:	bf00      	nop
    }
  }
}
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	200005e8 	.word	0x200005e8

0800a1ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	88db      	ldrh	r3, [r3, #6]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d004      	beq.n	800a1c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f8cd 	bl	800a360 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1c6:	e022      	b.n	800a20e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	dc02      	bgt.n	800a1d8 <USBD_GetConfig+0x2c>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dc03      	bgt.n	800a1de <USBD_GetConfig+0x32>
 800a1d6:	e015      	b.n	800a204 <USBD_GetConfig+0x58>
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d00b      	beq.n	800a1f4 <USBD_GetConfig+0x48>
 800a1dc:	e012      	b.n	800a204 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f922 	bl	800a436 <USBD_CtlSendData>
        break;
 800a1f2:	e00c      	b.n	800a20e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f91a 	bl	800a436 <USBD_CtlSendData>
        break;
 800a202:	e004      	b.n	800a20e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f8aa 	bl	800a360 <USBD_CtlError>
        break;
 800a20c:	bf00      	nop
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a226:	3b01      	subs	r3, #1
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d81e      	bhi.n	800a26a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	88db      	ldrh	r3, [r3, #6]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d004      	beq.n	800a23e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f892 	bl	800a360 <USBD_CtlError>
        break;
 800a23c:	e01a      	b.n	800a274 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d005      	beq.n	800a25a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f043 0202 	orr.w	r2, r3, #2
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	330c      	adds	r3, #12
 800a25e:	2202      	movs	r2, #2
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f8e7 	bl	800a436 <USBD_CtlSendData>
      break;
 800a268:	e004      	b.n	800a274 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f877 	bl	800a360 <USBD_CtlError>
      break;
 800a272:	bf00      	nop
  }
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	885b      	ldrh	r3, [r3, #2]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d106      	bne.n	800a29c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f92b 	bl	800a4f2 <USBD_CtlSendStatus>
  }
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d80b      	bhi.n	800a2d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	885b      	ldrh	r3, [r3, #2]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10c      	bne.n	800a2dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f911 	bl	800a4f2 <USBD_CtlSendStatus>
      }
      break;
 800a2d0:	e004      	b.n	800a2dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f843 	bl	800a360 <USBD_CtlError>
      break;
 800a2da:	e000      	b.n	800a2de <USBD_ClrFeature+0x3a>
      break;
 800a2dc:	bf00      	nop
  }
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	785a      	ldrb	r2, [r3, #1]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	3302      	adds	r3, #2
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	b29a      	uxth	r2, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	3303      	adds	r3, #3
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	021b      	lsls	r3, r3, #8
 800a312:	b29b      	uxth	r3, r3
 800a314:	4413      	add	r3, r2
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	3304      	adds	r3, #4
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b29a      	uxth	r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	3305      	adds	r3, #5
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	b29b      	uxth	r3, r3
 800a330:	4413      	add	r3, r2
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	3306      	adds	r3, #6
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29a      	uxth	r2, r3
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	3307      	adds	r3, #7
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b29b      	uxth	r3, r3
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	b29a      	uxth	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	80da      	strh	r2, [r3, #6]

}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a36a:	2180      	movs	r1, #128	; 0x80
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fc7d 	bl	800ac6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a372:	2100      	movs	r1, #0
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fc79 	bl	800ac6c <USBD_LL_StallEP>
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b086      	sub	sp, #24
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d032      	beq.n	800a3fe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f834 	bl	800a406 <USBD_GetLen>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	1c5a      	adds	r2, r3, #1
 800a3b0:	75fa      	strb	r2, [r7, #23]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	75fa      	strb	r2, [r7, #23]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3ce:	e012      	b.n	800a3f6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	60fa      	str	r2, [r7, #12]
 800a3d6:	7dfa      	ldrb	r2, [r7, #23]
 800a3d8:	1c51      	adds	r1, r2, #1
 800a3da:	75f9      	strb	r1, [r7, #23]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	440a      	add	r2, r1
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	75fa      	strb	r2, [r7, #23]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e8      	bne.n	800a3d0 <USBD_GetString+0x4e>
    }
  }
}
 800a3fe:	bf00      	nop
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a406:	b480      	push	{r7}
 800a408:	b085      	sub	sp, #20
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a412:	e005      	b.n	800a420 <USBD_GetLen+0x1a>
  {
    len++;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	3301      	adds	r3, #1
 800a418:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3301      	adds	r3, #1
 800a41e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1f5      	bne.n	800a414 <USBD_GetLen+0xe>
  }

  return len;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60f8      	str	r0, [r7, #12]
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	4613      	mov	r3, r2
 800a442:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2202      	movs	r2, #2
 800a448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a44c:	88fa      	ldrh	r2, [r7, #6]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a452:	88fa      	ldrh	r2, [r7, #6]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	2100      	movs	r1, #0
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 fc8e 	bl	800ad80 <USBD_LL_Transmit>

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	4613      	mov	r3, r2
 800a47a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a47c:	88fb      	ldrh	r3, [r7, #6]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	2100      	movs	r1, #0
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fc7c 	bl	800ad80 <USBD_LL_Transmit>

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	4613      	mov	r3, r2
 800a49e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4a8:	88fa      	ldrh	r2, [r7, #6]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4b0:	88fa      	ldrh	r2, [r7, #6]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4b8:	88fb      	ldrh	r3, [r7, #6]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fc81 	bl	800adc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 fc6f 	bl	800adc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2204      	movs	r2, #4
 800a4fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a502:	2300      	movs	r3, #0
 800a504:	2200      	movs	r2, #0
 800a506:	2100      	movs	r1, #0
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fc39 	bl	800ad80 <USBD_LL_Transmit>

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2205      	movs	r2, #5
 800a524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a528:	2300      	movs	r3, #0
 800a52a:	2200      	movs	r2, #0
 800a52c:	2100      	movs	r1, #0
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fc49 	bl	800adc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a544:	2200      	movs	r2, #0
 800a546:	4912      	ldr	r1, [pc, #72]	; (800a590 <MX_USB_DEVICE_Init+0x50>)
 800a548:	4812      	ldr	r0, [pc, #72]	; (800a594 <MX_USB_DEVICE_Init+0x54>)
 800a54a:	f7fe ff57 	bl	80093fc <USBD_Init>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a554:	f7f6 f97e 	bl	8000854 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a558:	490f      	ldr	r1, [pc, #60]	; (800a598 <MX_USB_DEVICE_Init+0x58>)
 800a55a:	480e      	ldr	r0, [pc, #56]	; (800a594 <MX_USB_DEVICE_Init+0x54>)
 800a55c:	f7fe ff79 	bl	8009452 <USBD_RegisterClass>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a566:	f7f6 f975 	bl	8000854 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a56a:	490c      	ldr	r1, [pc, #48]	; (800a59c <MX_USB_DEVICE_Init+0x5c>)
 800a56c:	4809      	ldr	r0, [pc, #36]	; (800a594 <MX_USB_DEVICE_Init+0x54>)
 800a56e:	f7fe fea7 	bl	80092c0 <USBD_CDC_RegisterInterface>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a578:	f7f6 f96c 	bl	8000854 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a57c:	4805      	ldr	r0, [pc, #20]	; (800a594 <MX_USB_DEVICE_Init+0x54>)
 800a57e:	f7fe ff82 	bl	8009486 <USBD_Start>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a588:	f7f6 f964 	bl	8000854 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a58c:	bf00      	nop
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000130 	.word	0x20000130
 800a594:	200005ec 	.word	0x200005ec
 800a598:	2000001c 	.word	0x2000001c
 800a59c:	20000120 	.word	0x20000120

0800a5a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4905      	ldr	r1, [pc, #20]	; (800a5bc <CDC_Init_FS+0x1c>)
 800a5a8:	4805      	ldr	r0, [pc, #20]	; (800a5c0 <CDC_Init_FS+0x20>)
 800a5aa:	f7fe fea0 	bl	80092ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5ae:	4905      	ldr	r1, [pc, #20]	; (800a5c4 <CDC_Init_FS+0x24>)
 800a5b0:	4803      	ldr	r0, [pc, #12]	; (800a5c0 <CDC_Init_FS+0x20>)
 800a5b2:	f7fe feb6 	bl	8009322 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000cb0 	.word	0x20000cb0
 800a5c0:	200005ec 	.word	0x200005ec
 800a5c4:	200008b0 	.word	0x200008b0

0800a5c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	71fb      	strb	r3, [r7, #7]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	2b23      	cmp	r3, #35	; 0x23
 800a5ec:	d84a      	bhi.n	800a684 <CDC_Control_FS+0xac>
 800a5ee:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <CDC_Control_FS+0x1c>)
 800a5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f4:	0800a685 	.word	0x0800a685
 800a5f8:	0800a685 	.word	0x0800a685
 800a5fc:	0800a685 	.word	0x0800a685
 800a600:	0800a685 	.word	0x0800a685
 800a604:	0800a685 	.word	0x0800a685
 800a608:	0800a685 	.word	0x0800a685
 800a60c:	0800a685 	.word	0x0800a685
 800a610:	0800a685 	.word	0x0800a685
 800a614:	0800a685 	.word	0x0800a685
 800a618:	0800a685 	.word	0x0800a685
 800a61c:	0800a685 	.word	0x0800a685
 800a620:	0800a685 	.word	0x0800a685
 800a624:	0800a685 	.word	0x0800a685
 800a628:	0800a685 	.word	0x0800a685
 800a62c:	0800a685 	.word	0x0800a685
 800a630:	0800a685 	.word	0x0800a685
 800a634:	0800a685 	.word	0x0800a685
 800a638:	0800a685 	.word	0x0800a685
 800a63c:	0800a685 	.word	0x0800a685
 800a640:	0800a685 	.word	0x0800a685
 800a644:	0800a685 	.word	0x0800a685
 800a648:	0800a685 	.word	0x0800a685
 800a64c:	0800a685 	.word	0x0800a685
 800a650:	0800a685 	.word	0x0800a685
 800a654:	0800a685 	.word	0x0800a685
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	0800a685 	.word	0x0800a685
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a685 	.word	0x0800a685
 800a668:	0800a685 	.word	0x0800a685
 800a66c:	0800a685 	.word	0x0800a685
 800a670:	0800a685 	.word	0x0800a685
 800a674:	0800a685 	.word	0x0800a685
 800a678:	0800a685 	.word	0x0800a685
 800a67c:	0800a685 	.word	0x0800a685
 800a680:	0800a685 	.word	0x0800a685
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a684:	bf00      	nop
  }

  return (USBD_OK);
 800a686:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	4805      	ldr	r0, [pc, #20]	; (800a6b8 <CDC_Receive_FS+0x24>)
 800a6a2:	f7fe fe3e 	bl	8009322 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6a6:	4804      	ldr	r0, [pc, #16]	; (800a6b8 <CDC_Receive_FS+0x24>)
 800a6a8:	f7fe fe7e 	bl	80093a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	200005ec 	.word	0x200005ec

0800a6bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a6cc:	4b0d      	ldr	r3, [pc, #52]	; (800a704 <CDC_Transmit_FS+0x48>)
 800a6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e00b      	b.n	800a6fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6e2:	887b      	ldrh	r3, [r7, #2]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	4806      	ldr	r0, [pc, #24]	; (800a704 <CDC_Transmit_FS+0x48>)
 800a6ea:	f7fe fe00 	bl	80092ee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a6ee:	4805      	ldr	r0, [pc, #20]	; (800a704 <CDC_Transmit_FS+0x48>)
 800a6f0:	f7fe fe2b 	bl	800934a <USBD_CDC_TransmitPacket>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	200005ec 	.word	0x200005ec

0800a708 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	2212      	movs	r2, #18
 800a718:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a71a:	4b03      	ldr	r3, [pc, #12]	; (800a728 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	2000014c 	.word	0x2000014c

0800a72c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2204      	movs	r2, #4
 800a73c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a73e:	4b03      	ldr	r3, [pc, #12]	; (800a74c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	20000160 	.word	0x20000160

0800a750 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	6039      	str	r1, [r7, #0]
 800a75a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d105      	bne.n	800a76e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	4907      	ldr	r1, [pc, #28]	; (800a784 <USBD_FS_ProductStrDescriptor+0x34>)
 800a766:	4808      	ldr	r0, [pc, #32]	; (800a788 <USBD_FS_ProductStrDescriptor+0x38>)
 800a768:	f7ff fe0b 	bl	800a382 <USBD_GetString>
 800a76c:	e004      	b.n	800a778 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	4904      	ldr	r1, [pc, #16]	; (800a784 <USBD_FS_ProductStrDescriptor+0x34>)
 800a772:	4805      	ldr	r0, [pc, #20]	; (800a788 <USBD_FS_ProductStrDescriptor+0x38>)
 800a774:	f7ff fe05 	bl	800a382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	200010b0 	.word	0x200010b0
 800a788:	0800b838 	.word	0x0800b838

0800a78c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	4904      	ldr	r1, [pc, #16]	; (800a7ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a79c:	4804      	ldr	r0, [pc, #16]	; (800a7b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a79e:	f7ff fdf0 	bl	800a382 <USBD_GetString>
  return USBD_StrDesc;
 800a7a2:	4b02      	ldr	r3, [pc, #8]	; (800a7ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	200010b0 	.word	0x200010b0
 800a7b0:	0800b850 	.word	0x0800b850

0800a7b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	221a      	movs	r2, #26
 800a7c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7c6:	f000 f843 	bl	800a850 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7ca:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20000164 	.word	0x20000164

0800a7d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	6039      	str	r1, [r7, #0]
 800a7e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	4907      	ldr	r1, [pc, #28]	; (800a80c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ee:	4808      	ldr	r0, [pc, #32]	; (800a810 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7f0:	f7ff fdc7 	bl	800a382 <USBD_GetString>
 800a7f4:	e004      	b.n	800a800 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	4904      	ldr	r1, [pc, #16]	; (800a80c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7fa:	4805      	ldr	r0, [pc, #20]	; (800a810 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7fc:	f7ff fdc1 	bl	800a382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a800:	4b02      	ldr	r3, [pc, #8]	; (800a80c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	200010b0 	.word	0x200010b0
 800a810:	0800b864 	.word	0x0800b864

0800a814 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	6039      	str	r1, [r7, #0]
 800a81e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d105      	bne.n	800a832 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	4907      	ldr	r1, [pc, #28]	; (800a848 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a82a:	4808      	ldr	r0, [pc, #32]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a82c:	f7ff fda9 	bl	800a382 <USBD_GetString>
 800a830:	e004      	b.n	800a83c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4904      	ldr	r1, [pc, #16]	; (800a848 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a836:	4805      	ldr	r0, [pc, #20]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a838:	f7ff fda3 	bl	800a382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a83c:	4b02      	ldr	r3, [pc, #8]	; (800a848 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200010b0 	.word	0x200010b0
 800a84c:	0800b870 	.word	0x0800b870

0800a850 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a856:	4b0f      	ldr	r3, [pc, #60]	; (800a894 <Get_SerialNum+0x44>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a85c:	4b0e      	ldr	r3, [pc, #56]	; (800a898 <Get_SerialNum+0x48>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <Get_SerialNum+0x4c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a876:	2208      	movs	r2, #8
 800a878:	4909      	ldr	r1, [pc, #36]	; (800a8a0 <Get_SerialNum+0x50>)
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 f814 	bl	800a8a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a880:	2204      	movs	r2, #4
 800a882:	4908      	ldr	r1, [pc, #32]	; (800a8a4 <Get_SerialNum+0x54>)
 800a884:	68b8      	ldr	r0, [r7, #8]
 800a886:	f000 f80f 	bl	800a8a8 <IntToUnicode>
  }
}
 800a88a:	bf00      	nop
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	1ffff7ac 	.word	0x1ffff7ac
 800a898:	1ffff7b0 	.word	0x1ffff7b0
 800a89c:	1ffff7b4 	.word	0x1ffff7b4
 800a8a0:	20000166 	.word	0x20000166
 800a8a4:	20000176 	.word	0x20000176

0800a8a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	75fb      	strb	r3, [r7, #23]
 800a8be:	e027      	b.n	800a910 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	0f1b      	lsrs	r3, r3, #28
 800a8c4:	2b09      	cmp	r3, #9
 800a8c6:	d80b      	bhi.n	800a8e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	0f1b      	lsrs	r3, r3, #28
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	005b      	lsls	r3, r3, #1
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3230      	adds	r2, #48	; 0x30
 800a8da:	b2d2      	uxtb	r2, r2
 800a8dc:	701a      	strb	r2, [r3, #0]
 800a8de:	e00a      	b.n	800a8f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	0f1b      	lsrs	r3, r3, #28
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3237      	adds	r2, #55	; 0x37
 800a8f2:	b2d2      	uxtb	r2, r2
 800a8f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	011b      	lsls	r3, r3, #4
 800a8fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	3301      	adds	r3, #1
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	4413      	add	r3, r2
 800a906:	2200      	movs	r2, #0
 800a908:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	3301      	adds	r3, #1
 800a90e:	75fb      	strb	r3, [r7, #23]
 800a910:	7dfa      	ldrb	r2, [r7, #23]
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	429a      	cmp	r2, r3
 800a916:	d3d3      	bcc.n	800a8c0 <IntToUnicode+0x18>
  }
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
	...

0800a928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08a      	sub	sp, #40	; 0x28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a930:	f107 0314 	add.w	r3, r7, #20
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	605a      	str	r2, [r3, #4]
 800a93a:	609a      	str	r2, [r3, #8]
 800a93c:	60da      	str	r2, [r3, #12]
 800a93e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a1c      	ldr	r2, [pc, #112]	; (800a9b8 <HAL_PCD_MspInit+0x90>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d131      	bne.n	800a9ae <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a94a:	4b1c      	ldr	r3, [pc, #112]	; (800a9bc <HAL_PCD_MspInit+0x94>)
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	4a1b      	ldr	r2, [pc, #108]	; (800a9bc <HAL_PCD_MspInit+0x94>)
 800a950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a954:	6153      	str	r3, [r2, #20]
 800a956:	4b19      	ldr	r3, [pc, #100]	; (800a9bc <HAL_PCD_MspInit+0x94>)
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a95e:	613b      	str	r3, [r7, #16]
 800a960:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800a962:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a968:	2302      	movs	r3, #2
 800a96a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a96c:	2300      	movs	r3, #0
 800a96e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a970:	2303      	movs	r3, #3
 800a972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800a974:	230e      	movs	r3, #14
 800a976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	4619      	mov	r1, r3
 800a97e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a982:	f7f7 fe89 	bl	8002698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a986:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <HAL_PCD_MspInit+0x94>)
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	4a0c      	ldr	r2, [pc, #48]	; (800a9bc <HAL_PCD_MspInit+0x94>)
 800a98c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a990:	61d3      	str	r3, [r2, #28]
 800a992:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <HAL_PCD_MspInit+0x94>)
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	2014      	movs	r0, #20
 800a9a4:	f7f7 fc55 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800a9a8:	2014      	movs	r0, #20
 800a9aa:	f7f7 fc6e 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9ae:	bf00      	nop
 800a9b0:	3728      	adds	r7, #40	; 0x28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40005c00 	.word	0x40005c00
 800a9bc:	40021000 	.word	0x40021000

0800a9c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fe fd9e 	bl	8009518 <USBD_LL_SetupStage>
}
 800a9dc:	bf00      	nop
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a9f6:	78fa      	ldrb	r2, [r7, #3]
 800a9f8:	6879      	ldr	r1, [r7, #4]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	440b      	add	r3, r1
 800aa04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	78fb      	ldrb	r3, [r7, #3]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	f7fe fdd0 	bl	80095b2 <USBD_LL_DataOutStage>
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	440b      	add	r3, r1
 800aa3a:	333c      	adds	r3, #60	; 0x3c
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	4619      	mov	r1, r3
 800aa42:	f7fe fe27 	bl	8009694 <USBD_LL_DataInStage>
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe ff3a 	bl	80098d6 <USBD_LL_SOF>
}
 800aa62:	bf00      	nop
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa72:	2301      	movs	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d001      	beq.n	800aa82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa7e:	f7f5 fee9 	bl	8000854 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa88:	7bfa      	ldrb	r2, [r7, #15]
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fee7 	bl	8009860 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe fea0 	bl	80097de <USBD_LL_Reset>
}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fee2 	bl	8009880 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aac4:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <HAL_PCD_SuspendCallback+0x30>)
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	4a03      	ldr	r2, [pc, #12]	; (800aad8 <HAL_PCD_SuspendCallback+0x30>)
 800aaca:	f043 0306 	orr.w	r3, r3, #6
 800aace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	e000ed00 	.word	0xe000ed00

0800aadc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fedd 	bl	80098aa <USBD_LL_Resume>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab00:	4a28      	ldr	r2, [pc, #160]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a26      	ldr	r2, [pc, #152]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab10:	4b24      	ldr	r3, [pc, #144]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab12:	4a25      	ldr	r2, [pc, #148]	; (800aba8 <USBD_LL_Init+0xb0>)
 800ab14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab16:	4b23      	ldr	r3, [pc, #140]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab18:	2208      	movs	r2, #8
 800ab1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab1c:	4b21      	ldr	r3, [pc, #132]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab1e:	2202      	movs	r2, #2
 800ab20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab22:	4b20      	ldr	r3, [pc, #128]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab24:	2202      	movs	r2, #2
 800ab26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab28:	4b1e      	ldr	r3, [pc, #120]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab2e:	4b1d      	ldr	r3, [pc, #116]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab34:	481b      	ldr	r0, [pc, #108]	; (800aba4 <USBD_LL_Init+0xac>)
 800ab36:	f7f8 f897 	bl	8002c68 <HAL_PCD_Init>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab40:	f7f5 fe88 	bl	8000854 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab4a:	2318      	movs	r3, #24
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	f7f9 fd20 	bl	8004594 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab5a:	2358      	movs	r3, #88	; 0x58
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2180      	movs	r1, #128	; 0x80
 800ab60:	f7f9 fd18 	bl	8004594 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab6a:	23c0      	movs	r3, #192	; 0xc0
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2181      	movs	r1, #129	; 0x81
 800ab70:	f7f9 fd10 	bl	8004594 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2101      	movs	r1, #1
 800ab82:	f7f9 fd07 	bl	8004594 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab90:	2200      	movs	r2, #0
 800ab92:	2182      	movs	r1, #130	; 0x82
 800ab94:	f7f9 fcfe 	bl	8004594 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	200012b0 	.word	0x200012b0
 800aba8:	40005c00 	.word	0x40005c00

0800abac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f8 f922 	bl	8002e0c <HAL_PCD_Start>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f954 	bl	800ae7c <USBD_Get_USB_Status>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	4608      	mov	r0, r1
 800abec:	4611      	mov	r1, r2
 800abee:	461a      	mov	r2, r3
 800abf0:	4603      	mov	r3, r0
 800abf2:	70fb      	strb	r3, [r7, #3]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70bb      	strb	r3, [r7, #2]
 800abf8:	4613      	mov	r3, r2
 800abfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac0a:	78bb      	ldrb	r3, [r7, #2]
 800ac0c:	883a      	ldrh	r2, [r7, #0]
 800ac0e:	78f9      	ldrb	r1, [r7, #3]
 800ac10:	f7f8 fa1b 	bl	800304a <HAL_PCD_EP_Open>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 f92e 	bl	800ae7c <USBD_Get_USB_Status>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac48:	78fa      	ldrb	r2, [r7, #3]
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f8 fa59 	bl	8003104 <HAL_PCD_EP_Close>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 f90f 	bl	800ae7c <USBD_Get_USB_Status>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac86:	78fa      	ldrb	r2, [r7, #3]
 800ac88:	4611      	mov	r1, r2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f8 fb02 	bl	8003294 <HAL_PCD_EP_SetStall>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f8f0 	bl	800ae7c <USBD_Get_USB_Status>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	4611      	mov	r1, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	f7f8 fb35 	bl	8003338 <HAL_PCD_EP_ClrStall>
 800acce:	4603      	mov	r3, r0
 800acd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 f8d1 	bl	800ae7c <USBD_Get_USB_Status>
 800acda:	4603      	mov	r3, r0
 800acdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	da0c      	bge.n	800ad1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	440b      	add	r3, r1
 800ad18:	3302      	adds	r3, #2
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	e00b      	b.n	800ad36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad24:	68f9      	ldr	r1, [r7, #12]
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	00db      	lsls	r3, r3, #3
 800ad2e:	440b      	add	r3, r1
 800ad30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ad34:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad5c:	78fa      	ldrb	r2, [r7, #3]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7f8 f94d 	bl	8003000 <HAL_PCD_SetAddress>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 f885 	bl	800ae7c <USBD_Get_USB_Status>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	607a      	str	r2, [r7, #4]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	72fb      	strb	r3, [r7, #11]
 800ad90:	4613      	mov	r3, r2
 800ad92:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ada2:	893b      	ldrh	r3, [r7, #8]
 800ada4:	7af9      	ldrb	r1, [r7, #11]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	f7f8 fa3d 	bl	8003226 <HAL_PCD_EP_Transmit>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f862 	bl	800ae7c <USBD_Get_USB_Status>
 800adb8:	4603      	mov	r3, r0
 800adba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adbc:	7dbb      	ldrb	r3, [r7, #22]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b086      	sub	sp, #24
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	461a      	mov	r2, r3
 800add2:	460b      	mov	r3, r1
 800add4:	72fb      	strb	r3, [r7, #11]
 800add6:	4613      	mov	r3, r2
 800add8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ade8:	893b      	ldrh	r3, [r7, #8]
 800adea:	7af9      	ldrb	r1, [r7, #11]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	f7f8 f9d1 	bl	8003194 <HAL_PCD_EP_Receive>
 800adf2:	4603      	mov	r3, r0
 800adf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 f83f 	bl	800ae7c <USBD_Get_USB_Status>
 800adfe:	4603      	mov	r3, r0
 800ae00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae02:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3718      	adds	r7, #24
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae1e:	78fa      	ldrb	r2, [r7, #3]
 800ae20:	4611      	mov	r1, r2
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7f8 f9e7 	bl	80031f6 <HAL_PCD_EP_GetRxCount>
 800ae28:	4603      	mov	r3, r0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae3c:	4b03      	ldr	r3, [pc, #12]	; (800ae4c <USBD_static_malloc+0x18>)
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	2000159c 	.word	0x2000159c

0800ae50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]

}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	4603      	mov	r3, r0
 800ae84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae8a:	79fb      	ldrb	r3, [r7, #7]
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d817      	bhi.n	800aec0 <USBD_Get_USB_Status+0x44>
 800ae90:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <USBD_Get_USB_Status+0x1c>)
 800ae92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae96:	bf00      	nop
 800ae98:	0800aea9 	.word	0x0800aea9
 800ae9c:	0800aeaf 	.word	0x0800aeaf
 800aea0:	0800aeb5 	.word	0x0800aeb5
 800aea4:	0800aebb 	.word	0x0800aebb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	73fb      	strb	r3, [r7, #15]
    break;
 800aeac:	e00b      	b.n	800aec6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb2:	e008      	b.n	800aec6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb8:	e005      	b.n	800aec6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aeba:	2302      	movs	r3, #2
 800aebc:	73fb      	strb	r3, [r7, #15]
    break;
 800aebe:	e002      	b.n	800aec6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aec0:	2302      	movs	r3, #2
 800aec2:	73fb      	strb	r3, [r7, #15]
    break;
 800aec4:	bf00      	nop
  }
  return usb_status;
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <siprintf>:
 800aed4:	b40e      	push	{r1, r2, r3}
 800aed6:	b500      	push	{lr}
 800aed8:	b09c      	sub	sp, #112	; 0x70
 800aeda:	ab1d      	add	r3, sp, #116	; 0x74
 800aedc:	9002      	str	r0, [sp, #8]
 800aede:	9006      	str	r0, [sp, #24]
 800aee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aee4:	4809      	ldr	r0, [pc, #36]	; (800af0c <siprintf+0x38>)
 800aee6:	9107      	str	r1, [sp, #28]
 800aee8:	9104      	str	r1, [sp, #16]
 800aeea:	4909      	ldr	r1, [pc, #36]	; (800af10 <siprintf+0x3c>)
 800aeec:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef0:	9105      	str	r1, [sp, #20]
 800aef2:	6800      	ldr	r0, [r0, #0]
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	a902      	add	r1, sp, #8
 800aef8:	f000 f992 	bl	800b220 <_svfiprintf_r>
 800aefc:	9b02      	ldr	r3, [sp, #8]
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	b01c      	add	sp, #112	; 0x70
 800af04:	f85d eb04 	ldr.w	lr, [sp], #4
 800af08:	b003      	add	sp, #12
 800af0a:	4770      	bx	lr
 800af0c:	200001cc 	.word	0x200001cc
 800af10:	ffff0208 	.word	0xffff0208

0800af14 <memset>:
 800af14:	4402      	add	r2, r0
 800af16:	4603      	mov	r3, r0
 800af18:	4293      	cmp	r3, r2
 800af1a:	d100      	bne.n	800af1e <memset+0xa>
 800af1c:	4770      	bx	lr
 800af1e:	f803 1b01 	strb.w	r1, [r3], #1
 800af22:	e7f9      	b.n	800af18 <memset+0x4>

0800af24 <__errno>:
 800af24:	4b01      	ldr	r3, [pc, #4]	; (800af2c <__errno+0x8>)
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	200001cc 	.word	0x200001cc

0800af30 <__libc_init_array>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	4d0d      	ldr	r5, [pc, #52]	; (800af68 <__libc_init_array+0x38>)
 800af34:	4c0d      	ldr	r4, [pc, #52]	; (800af6c <__libc_init_array+0x3c>)
 800af36:	1b64      	subs	r4, r4, r5
 800af38:	10a4      	asrs	r4, r4, #2
 800af3a:	2600      	movs	r6, #0
 800af3c:	42a6      	cmp	r6, r4
 800af3e:	d109      	bne.n	800af54 <__libc_init_array+0x24>
 800af40:	4d0b      	ldr	r5, [pc, #44]	; (800af70 <__libc_init_array+0x40>)
 800af42:	4c0c      	ldr	r4, [pc, #48]	; (800af74 <__libc_init_array+0x44>)
 800af44:	f000 fc6a 	bl	800b81c <_init>
 800af48:	1b64      	subs	r4, r4, r5
 800af4a:	10a4      	asrs	r4, r4, #2
 800af4c:	2600      	movs	r6, #0
 800af4e:	42a6      	cmp	r6, r4
 800af50:	d105      	bne.n	800af5e <__libc_init_array+0x2e>
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	f855 3b04 	ldr.w	r3, [r5], #4
 800af58:	4798      	blx	r3
 800af5a:	3601      	adds	r6, #1
 800af5c:	e7ee      	b.n	800af3c <__libc_init_array+0xc>
 800af5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af62:	4798      	blx	r3
 800af64:	3601      	adds	r6, #1
 800af66:	e7f2      	b.n	800af4e <__libc_init_array+0x1e>
 800af68:	0800b8e4 	.word	0x0800b8e4
 800af6c:	0800b8e4 	.word	0x0800b8e4
 800af70:	0800b8e4 	.word	0x0800b8e4
 800af74:	0800b8e8 	.word	0x0800b8e8

0800af78 <__retarget_lock_acquire_recursive>:
 800af78:	4770      	bx	lr

0800af7a <__retarget_lock_release_recursive>:
 800af7a:	4770      	bx	lr

0800af7c <_free_r>:
 800af7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af7e:	2900      	cmp	r1, #0
 800af80:	d044      	beq.n	800b00c <_free_r+0x90>
 800af82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af86:	9001      	str	r0, [sp, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f1a1 0404 	sub.w	r4, r1, #4
 800af8e:	bfb8      	it	lt
 800af90:	18e4      	addlt	r4, r4, r3
 800af92:	f000 f8df 	bl	800b154 <__malloc_lock>
 800af96:	4a1e      	ldr	r2, [pc, #120]	; (800b010 <_free_r+0x94>)
 800af98:	9801      	ldr	r0, [sp, #4]
 800af9a:	6813      	ldr	r3, [r2, #0]
 800af9c:	b933      	cbnz	r3, 800afac <_free_r+0x30>
 800af9e:	6063      	str	r3, [r4, #4]
 800afa0:	6014      	str	r4, [r2, #0]
 800afa2:	b003      	add	sp, #12
 800afa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afa8:	f000 b8da 	b.w	800b160 <__malloc_unlock>
 800afac:	42a3      	cmp	r3, r4
 800afae:	d908      	bls.n	800afc2 <_free_r+0x46>
 800afb0:	6825      	ldr	r5, [r4, #0]
 800afb2:	1961      	adds	r1, r4, r5
 800afb4:	428b      	cmp	r3, r1
 800afb6:	bf01      	itttt	eq
 800afb8:	6819      	ldreq	r1, [r3, #0]
 800afba:	685b      	ldreq	r3, [r3, #4]
 800afbc:	1949      	addeq	r1, r1, r5
 800afbe:	6021      	streq	r1, [r4, #0]
 800afc0:	e7ed      	b.n	800af9e <_free_r+0x22>
 800afc2:	461a      	mov	r2, r3
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	b10b      	cbz	r3, 800afcc <_free_r+0x50>
 800afc8:	42a3      	cmp	r3, r4
 800afca:	d9fa      	bls.n	800afc2 <_free_r+0x46>
 800afcc:	6811      	ldr	r1, [r2, #0]
 800afce:	1855      	adds	r5, r2, r1
 800afd0:	42a5      	cmp	r5, r4
 800afd2:	d10b      	bne.n	800afec <_free_r+0x70>
 800afd4:	6824      	ldr	r4, [r4, #0]
 800afd6:	4421      	add	r1, r4
 800afd8:	1854      	adds	r4, r2, r1
 800afda:	42a3      	cmp	r3, r4
 800afdc:	6011      	str	r1, [r2, #0]
 800afde:	d1e0      	bne.n	800afa2 <_free_r+0x26>
 800afe0:	681c      	ldr	r4, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	6053      	str	r3, [r2, #4]
 800afe6:	440c      	add	r4, r1
 800afe8:	6014      	str	r4, [r2, #0]
 800afea:	e7da      	b.n	800afa2 <_free_r+0x26>
 800afec:	d902      	bls.n	800aff4 <_free_r+0x78>
 800afee:	230c      	movs	r3, #12
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	e7d6      	b.n	800afa2 <_free_r+0x26>
 800aff4:	6825      	ldr	r5, [r4, #0]
 800aff6:	1961      	adds	r1, r4, r5
 800aff8:	428b      	cmp	r3, r1
 800affa:	bf04      	itt	eq
 800affc:	6819      	ldreq	r1, [r3, #0]
 800affe:	685b      	ldreq	r3, [r3, #4]
 800b000:	6063      	str	r3, [r4, #4]
 800b002:	bf04      	itt	eq
 800b004:	1949      	addeq	r1, r1, r5
 800b006:	6021      	streq	r1, [r4, #0]
 800b008:	6054      	str	r4, [r2, #4]
 800b00a:	e7ca      	b.n	800afa2 <_free_r+0x26>
 800b00c:	b003      	add	sp, #12
 800b00e:	bd30      	pop	{r4, r5, pc}
 800b010:	200018fc 	.word	0x200018fc

0800b014 <sbrk_aligned>:
 800b014:	b570      	push	{r4, r5, r6, lr}
 800b016:	4e0e      	ldr	r6, [pc, #56]	; (800b050 <sbrk_aligned+0x3c>)
 800b018:	460c      	mov	r4, r1
 800b01a:	6831      	ldr	r1, [r6, #0]
 800b01c:	4605      	mov	r5, r0
 800b01e:	b911      	cbnz	r1, 800b026 <sbrk_aligned+0x12>
 800b020:	f000 fba6 	bl	800b770 <_sbrk_r>
 800b024:	6030      	str	r0, [r6, #0]
 800b026:	4621      	mov	r1, r4
 800b028:	4628      	mov	r0, r5
 800b02a:	f000 fba1 	bl	800b770 <_sbrk_r>
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	d00a      	beq.n	800b048 <sbrk_aligned+0x34>
 800b032:	1cc4      	adds	r4, r0, #3
 800b034:	f024 0403 	bic.w	r4, r4, #3
 800b038:	42a0      	cmp	r0, r4
 800b03a:	d007      	beq.n	800b04c <sbrk_aligned+0x38>
 800b03c:	1a21      	subs	r1, r4, r0
 800b03e:	4628      	mov	r0, r5
 800b040:	f000 fb96 	bl	800b770 <_sbrk_r>
 800b044:	3001      	adds	r0, #1
 800b046:	d101      	bne.n	800b04c <sbrk_aligned+0x38>
 800b048:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b04c:	4620      	mov	r0, r4
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	20001900 	.word	0x20001900

0800b054 <_malloc_r>:
 800b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b058:	1ccd      	adds	r5, r1, #3
 800b05a:	f025 0503 	bic.w	r5, r5, #3
 800b05e:	3508      	adds	r5, #8
 800b060:	2d0c      	cmp	r5, #12
 800b062:	bf38      	it	cc
 800b064:	250c      	movcc	r5, #12
 800b066:	2d00      	cmp	r5, #0
 800b068:	4607      	mov	r7, r0
 800b06a:	db01      	blt.n	800b070 <_malloc_r+0x1c>
 800b06c:	42a9      	cmp	r1, r5
 800b06e:	d905      	bls.n	800b07c <_malloc_r+0x28>
 800b070:	230c      	movs	r3, #12
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	2600      	movs	r6, #0
 800b076:	4630      	mov	r0, r6
 800b078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b07c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b150 <_malloc_r+0xfc>
 800b080:	f000 f868 	bl	800b154 <__malloc_lock>
 800b084:	f8d8 3000 	ldr.w	r3, [r8]
 800b088:	461c      	mov	r4, r3
 800b08a:	bb5c      	cbnz	r4, 800b0e4 <_malloc_r+0x90>
 800b08c:	4629      	mov	r1, r5
 800b08e:	4638      	mov	r0, r7
 800b090:	f7ff ffc0 	bl	800b014 <sbrk_aligned>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	4604      	mov	r4, r0
 800b098:	d155      	bne.n	800b146 <_malloc_r+0xf2>
 800b09a:	f8d8 4000 	ldr.w	r4, [r8]
 800b09e:	4626      	mov	r6, r4
 800b0a0:	2e00      	cmp	r6, #0
 800b0a2:	d145      	bne.n	800b130 <_malloc_r+0xdc>
 800b0a4:	2c00      	cmp	r4, #0
 800b0a6:	d048      	beq.n	800b13a <_malloc_r+0xe6>
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	eb04 0903 	add.w	r9, r4, r3
 800b0b2:	f000 fb5d 	bl	800b770 <_sbrk_r>
 800b0b6:	4581      	cmp	r9, r0
 800b0b8:	d13f      	bne.n	800b13a <_malloc_r+0xe6>
 800b0ba:	6821      	ldr	r1, [r4, #0]
 800b0bc:	1a6d      	subs	r5, r5, r1
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f7ff ffa7 	bl	800b014 <sbrk_aligned>
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d037      	beq.n	800b13a <_malloc_r+0xe6>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	442b      	add	r3, r5
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d038      	beq.n	800b14a <_malloc_r+0xf6>
 800b0d8:	685a      	ldr	r2, [r3, #4]
 800b0da:	42a2      	cmp	r2, r4
 800b0dc:	d12b      	bne.n	800b136 <_malloc_r+0xe2>
 800b0de:	2200      	movs	r2, #0
 800b0e0:	605a      	str	r2, [r3, #4]
 800b0e2:	e00f      	b.n	800b104 <_malloc_r+0xb0>
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	1b52      	subs	r2, r2, r5
 800b0e8:	d41f      	bmi.n	800b12a <_malloc_r+0xd6>
 800b0ea:	2a0b      	cmp	r2, #11
 800b0ec:	d917      	bls.n	800b11e <_malloc_r+0xca>
 800b0ee:	1961      	adds	r1, r4, r5
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	6025      	str	r5, [r4, #0]
 800b0f4:	bf18      	it	ne
 800b0f6:	6059      	strne	r1, [r3, #4]
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	bf08      	it	eq
 800b0fc:	f8c8 1000 	streq.w	r1, [r8]
 800b100:	5162      	str	r2, [r4, r5]
 800b102:	604b      	str	r3, [r1, #4]
 800b104:	4638      	mov	r0, r7
 800b106:	f104 060b 	add.w	r6, r4, #11
 800b10a:	f000 f829 	bl	800b160 <__malloc_unlock>
 800b10e:	f026 0607 	bic.w	r6, r6, #7
 800b112:	1d23      	adds	r3, r4, #4
 800b114:	1af2      	subs	r2, r6, r3
 800b116:	d0ae      	beq.n	800b076 <_malloc_r+0x22>
 800b118:	1b9b      	subs	r3, r3, r6
 800b11a:	50a3      	str	r3, [r4, r2]
 800b11c:	e7ab      	b.n	800b076 <_malloc_r+0x22>
 800b11e:	42a3      	cmp	r3, r4
 800b120:	6862      	ldr	r2, [r4, #4]
 800b122:	d1dd      	bne.n	800b0e0 <_malloc_r+0x8c>
 800b124:	f8c8 2000 	str.w	r2, [r8]
 800b128:	e7ec      	b.n	800b104 <_malloc_r+0xb0>
 800b12a:	4623      	mov	r3, r4
 800b12c:	6864      	ldr	r4, [r4, #4]
 800b12e:	e7ac      	b.n	800b08a <_malloc_r+0x36>
 800b130:	4634      	mov	r4, r6
 800b132:	6876      	ldr	r6, [r6, #4]
 800b134:	e7b4      	b.n	800b0a0 <_malloc_r+0x4c>
 800b136:	4613      	mov	r3, r2
 800b138:	e7cc      	b.n	800b0d4 <_malloc_r+0x80>
 800b13a:	230c      	movs	r3, #12
 800b13c:	603b      	str	r3, [r7, #0]
 800b13e:	4638      	mov	r0, r7
 800b140:	f000 f80e 	bl	800b160 <__malloc_unlock>
 800b144:	e797      	b.n	800b076 <_malloc_r+0x22>
 800b146:	6025      	str	r5, [r4, #0]
 800b148:	e7dc      	b.n	800b104 <_malloc_r+0xb0>
 800b14a:	605b      	str	r3, [r3, #4]
 800b14c:	deff      	udf	#255	; 0xff
 800b14e:	bf00      	nop
 800b150:	200018fc 	.word	0x200018fc

0800b154 <__malloc_lock>:
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <__malloc_lock+0x8>)
 800b156:	f7ff bf0f 	b.w	800af78 <__retarget_lock_acquire_recursive>
 800b15a:	bf00      	nop
 800b15c:	200018f8 	.word	0x200018f8

0800b160 <__malloc_unlock>:
 800b160:	4801      	ldr	r0, [pc, #4]	; (800b168 <__malloc_unlock+0x8>)
 800b162:	f7ff bf0a 	b.w	800af7a <__retarget_lock_release_recursive>
 800b166:	bf00      	nop
 800b168:	200018f8 	.word	0x200018f8

0800b16c <__ssputs_r>:
 800b16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b170:	688e      	ldr	r6, [r1, #8]
 800b172:	461f      	mov	r7, r3
 800b174:	42be      	cmp	r6, r7
 800b176:	680b      	ldr	r3, [r1, #0]
 800b178:	4682      	mov	sl, r0
 800b17a:	460c      	mov	r4, r1
 800b17c:	4690      	mov	r8, r2
 800b17e:	d82c      	bhi.n	800b1da <__ssputs_r+0x6e>
 800b180:	898a      	ldrh	r2, [r1, #12]
 800b182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b186:	d026      	beq.n	800b1d6 <__ssputs_r+0x6a>
 800b188:	6965      	ldr	r5, [r4, #20]
 800b18a:	6909      	ldr	r1, [r1, #16]
 800b18c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b190:	eba3 0901 	sub.w	r9, r3, r1
 800b194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b198:	1c7b      	adds	r3, r7, #1
 800b19a:	444b      	add	r3, r9
 800b19c:	106d      	asrs	r5, r5, #1
 800b19e:	429d      	cmp	r5, r3
 800b1a0:	bf38      	it	cc
 800b1a2:	461d      	movcc	r5, r3
 800b1a4:	0553      	lsls	r3, r2, #21
 800b1a6:	d527      	bpl.n	800b1f8 <__ssputs_r+0x8c>
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	f7ff ff53 	bl	800b054 <_malloc_r>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	b360      	cbz	r0, 800b20c <__ssputs_r+0xa0>
 800b1b2:	6921      	ldr	r1, [r4, #16]
 800b1b4:	464a      	mov	r2, r9
 800b1b6:	f000 faeb 	bl	800b790 <memcpy>
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	6126      	str	r6, [r4, #16]
 800b1c8:	6165      	str	r5, [r4, #20]
 800b1ca:	444e      	add	r6, r9
 800b1cc:	eba5 0509 	sub.w	r5, r5, r9
 800b1d0:	6026      	str	r6, [r4, #0]
 800b1d2:	60a5      	str	r5, [r4, #8]
 800b1d4:	463e      	mov	r6, r7
 800b1d6:	42be      	cmp	r6, r7
 800b1d8:	d900      	bls.n	800b1dc <__ssputs_r+0x70>
 800b1da:	463e      	mov	r6, r7
 800b1dc:	6820      	ldr	r0, [r4, #0]
 800b1de:	4632      	mov	r2, r6
 800b1e0:	4641      	mov	r1, r8
 800b1e2:	f000 faab 	bl	800b73c <memmove>
 800b1e6:	68a3      	ldr	r3, [r4, #8]
 800b1e8:	1b9b      	subs	r3, r3, r6
 800b1ea:	60a3      	str	r3, [r4, #8]
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	4433      	add	r3, r6
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f8:	462a      	mov	r2, r5
 800b1fa:	f000 fad7 	bl	800b7ac <_realloc_r>
 800b1fe:	4606      	mov	r6, r0
 800b200:	2800      	cmp	r0, #0
 800b202:	d1e0      	bne.n	800b1c6 <__ssputs_r+0x5a>
 800b204:	6921      	ldr	r1, [r4, #16]
 800b206:	4650      	mov	r0, sl
 800b208:	f7ff feb8 	bl	800af7c <_free_r>
 800b20c:	230c      	movs	r3, #12
 800b20e:	f8ca 3000 	str.w	r3, [sl]
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b21e:	e7e9      	b.n	800b1f4 <__ssputs_r+0x88>

0800b220 <_svfiprintf_r>:
 800b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	4698      	mov	r8, r3
 800b226:	898b      	ldrh	r3, [r1, #12]
 800b228:	061b      	lsls	r3, r3, #24
 800b22a:	b09d      	sub	sp, #116	; 0x74
 800b22c:	4607      	mov	r7, r0
 800b22e:	460d      	mov	r5, r1
 800b230:	4614      	mov	r4, r2
 800b232:	d50e      	bpl.n	800b252 <_svfiprintf_r+0x32>
 800b234:	690b      	ldr	r3, [r1, #16]
 800b236:	b963      	cbnz	r3, 800b252 <_svfiprintf_r+0x32>
 800b238:	2140      	movs	r1, #64	; 0x40
 800b23a:	f7ff ff0b 	bl	800b054 <_malloc_r>
 800b23e:	6028      	str	r0, [r5, #0]
 800b240:	6128      	str	r0, [r5, #16]
 800b242:	b920      	cbnz	r0, 800b24e <_svfiprintf_r+0x2e>
 800b244:	230c      	movs	r3, #12
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b24c:	e0d0      	b.n	800b3f0 <_svfiprintf_r+0x1d0>
 800b24e:	2340      	movs	r3, #64	; 0x40
 800b250:	616b      	str	r3, [r5, #20]
 800b252:	2300      	movs	r3, #0
 800b254:	9309      	str	r3, [sp, #36]	; 0x24
 800b256:	2320      	movs	r3, #32
 800b258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b25c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b260:	2330      	movs	r3, #48	; 0x30
 800b262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b408 <_svfiprintf_r+0x1e8>
 800b266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b26a:	f04f 0901 	mov.w	r9, #1
 800b26e:	4623      	mov	r3, r4
 800b270:	469a      	mov	sl, r3
 800b272:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b276:	b10a      	cbz	r2, 800b27c <_svfiprintf_r+0x5c>
 800b278:	2a25      	cmp	r2, #37	; 0x25
 800b27a:	d1f9      	bne.n	800b270 <_svfiprintf_r+0x50>
 800b27c:	ebba 0b04 	subs.w	fp, sl, r4
 800b280:	d00b      	beq.n	800b29a <_svfiprintf_r+0x7a>
 800b282:	465b      	mov	r3, fp
 800b284:	4622      	mov	r2, r4
 800b286:	4629      	mov	r1, r5
 800b288:	4638      	mov	r0, r7
 800b28a:	f7ff ff6f 	bl	800b16c <__ssputs_r>
 800b28e:	3001      	adds	r0, #1
 800b290:	f000 80a9 	beq.w	800b3e6 <_svfiprintf_r+0x1c6>
 800b294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b296:	445a      	add	r2, fp
 800b298:	9209      	str	r2, [sp, #36]	; 0x24
 800b29a:	f89a 3000 	ldrb.w	r3, [sl]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 80a1 	beq.w	800b3e6 <_svfiprintf_r+0x1c6>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ae:	f10a 0a01 	add.w	sl, sl, #1
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	9307      	str	r3, [sp, #28]
 800b2b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b2bc:	4654      	mov	r4, sl
 800b2be:	2205      	movs	r2, #5
 800b2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c4:	4850      	ldr	r0, [pc, #320]	; (800b408 <_svfiprintf_r+0x1e8>)
 800b2c6:	f7f4 ff83 	bl	80001d0 <memchr>
 800b2ca:	9a04      	ldr	r2, [sp, #16]
 800b2cc:	b9d8      	cbnz	r0, 800b306 <_svfiprintf_r+0xe6>
 800b2ce:	06d0      	lsls	r0, r2, #27
 800b2d0:	bf44      	itt	mi
 800b2d2:	2320      	movmi	r3, #32
 800b2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d8:	0711      	lsls	r1, r2, #28
 800b2da:	bf44      	itt	mi
 800b2dc:	232b      	movmi	r3, #43	; 0x2b
 800b2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e8:	d015      	beq.n	800b316 <_svfiprintf_r+0xf6>
 800b2ea:	9a07      	ldr	r2, [sp, #28]
 800b2ec:	4654      	mov	r4, sl
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	f04f 0c0a 	mov.w	ip, #10
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2fa:	3b30      	subs	r3, #48	; 0x30
 800b2fc:	2b09      	cmp	r3, #9
 800b2fe:	d94d      	bls.n	800b39c <_svfiprintf_r+0x17c>
 800b300:	b1b0      	cbz	r0, 800b330 <_svfiprintf_r+0x110>
 800b302:	9207      	str	r2, [sp, #28]
 800b304:	e014      	b.n	800b330 <_svfiprintf_r+0x110>
 800b306:	eba0 0308 	sub.w	r3, r0, r8
 800b30a:	fa09 f303 	lsl.w	r3, r9, r3
 800b30e:	4313      	orrs	r3, r2
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	46a2      	mov	sl, r4
 800b314:	e7d2      	b.n	800b2bc <_svfiprintf_r+0x9c>
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	1d19      	adds	r1, r3, #4
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	9103      	str	r1, [sp, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bfbb      	ittet	lt
 800b322:	425b      	neglt	r3, r3
 800b324:	f042 0202 	orrlt.w	r2, r2, #2
 800b328:	9307      	strge	r3, [sp, #28]
 800b32a:	9307      	strlt	r3, [sp, #28]
 800b32c:	bfb8      	it	lt
 800b32e:	9204      	strlt	r2, [sp, #16]
 800b330:	7823      	ldrb	r3, [r4, #0]
 800b332:	2b2e      	cmp	r3, #46	; 0x2e
 800b334:	d10c      	bne.n	800b350 <_svfiprintf_r+0x130>
 800b336:	7863      	ldrb	r3, [r4, #1]
 800b338:	2b2a      	cmp	r3, #42	; 0x2a
 800b33a:	d134      	bne.n	800b3a6 <_svfiprintf_r+0x186>
 800b33c:	9b03      	ldr	r3, [sp, #12]
 800b33e:	1d1a      	adds	r2, r3, #4
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	9203      	str	r2, [sp, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	bfb8      	it	lt
 800b348:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b34c:	3402      	adds	r4, #2
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b418 <_svfiprintf_r+0x1f8>
 800b354:	7821      	ldrb	r1, [r4, #0]
 800b356:	2203      	movs	r2, #3
 800b358:	4650      	mov	r0, sl
 800b35a:	f7f4 ff39 	bl	80001d0 <memchr>
 800b35e:	b138      	cbz	r0, 800b370 <_svfiprintf_r+0x150>
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	eba0 000a 	sub.w	r0, r0, sl
 800b366:	2240      	movs	r2, #64	; 0x40
 800b368:	4082      	lsls	r2, r0
 800b36a:	4313      	orrs	r3, r2
 800b36c:	3401      	adds	r4, #1
 800b36e:	9304      	str	r3, [sp, #16]
 800b370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b374:	4825      	ldr	r0, [pc, #148]	; (800b40c <_svfiprintf_r+0x1ec>)
 800b376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b37a:	2206      	movs	r2, #6
 800b37c:	f7f4 ff28 	bl	80001d0 <memchr>
 800b380:	2800      	cmp	r0, #0
 800b382:	d038      	beq.n	800b3f6 <_svfiprintf_r+0x1d6>
 800b384:	4b22      	ldr	r3, [pc, #136]	; (800b410 <_svfiprintf_r+0x1f0>)
 800b386:	bb1b      	cbnz	r3, 800b3d0 <_svfiprintf_r+0x1b0>
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	3307      	adds	r3, #7
 800b38c:	f023 0307 	bic.w	r3, r3, #7
 800b390:	3308      	adds	r3, #8
 800b392:	9303      	str	r3, [sp, #12]
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	4433      	add	r3, r6
 800b398:	9309      	str	r3, [sp, #36]	; 0x24
 800b39a:	e768      	b.n	800b26e <_svfiprintf_r+0x4e>
 800b39c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	e7a6      	b.n	800b2f4 <_svfiprintf_r+0xd4>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	3401      	adds	r4, #1
 800b3aa:	9305      	str	r3, [sp, #20]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f04f 0c0a 	mov.w	ip, #10
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b8:	3a30      	subs	r2, #48	; 0x30
 800b3ba:	2a09      	cmp	r2, #9
 800b3bc:	d903      	bls.n	800b3c6 <_svfiprintf_r+0x1a6>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0c6      	beq.n	800b350 <_svfiprintf_r+0x130>
 800b3c2:	9105      	str	r1, [sp, #20]
 800b3c4:	e7c4      	b.n	800b350 <_svfiprintf_r+0x130>
 800b3c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e7f0      	b.n	800b3b2 <_svfiprintf_r+0x192>
 800b3d0:	ab03      	add	r3, sp, #12
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <_svfiprintf_r+0x1f4>)
 800b3d8:	a904      	add	r1, sp, #16
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f3af 8000 	nop.w
 800b3e0:	1c42      	adds	r2, r0, #1
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	d1d6      	bne.n	800b394 <_svfiprintf_r+0x174>
 800b3e6:	89ab      	ldrh	r3, [r5, #12]
 800b3e8:	065b      	lsls	r3, r3, #25
 800b3ea:	f53f af2d 	bmi.w	800b248 <_svfiprintf_r+0x28>
 800b3ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3f0:	b01d      	add	sp, #116	; 0x74
 800b3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f6:	ab03      	add	r3, sp, #12
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <_svfiprintf_r+0x1f4>)
 800b3fe:	a904      	add	r1, sp, #16
 800b400:	4638      	mov	r0, r7
 800b402:	f000 f879 	bl	800b4f8 <_printf_i>
 800b406:	e7eb      	b.n	800b3e0 <_svfiprintf_r+0x1c0>
 800b408:	0800b8b0 	.word	0x0800b8b0
 800b40c:	0800b8ba 	.word	0x0800b8ba
 800b410:	00000000 	.word	0x00000000
 800b414:	0800b16d 	.word	0x0800b16d
 800b418:	0800b8b6 	.word	0x0800b8b6

0800b41c <_printf_common>:
 800b41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b420:	4616      	mov	r6, r2
 800b422:	4699      	mov	r9, r3
 800b424:	688a      	ldr	r2, [r1, #8]
 800b426:	690b      	ldr	r3, [r1, #16]
 800b428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b42c:	4293      	cmp	r3, r2
 800b42e:	bfb8      	it	lt
 800b430:	4613      	movlt	r3, r2
 800b432:	6033      	str	r3, [r6, #0]
 800b434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b438:	4607      	mov	r7, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b10a      	cbz	r2, 800b442 <_printf_common+0x26>
 800b43e:	3301      	adds	r3, #1
 800b440:	6033      	str	r3, [r6, #0]
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	0699      	lsls	r1, r3, #26
 800b446:	bf42      	ittt	mi
 800b448:	6833      	ldrmi	r3, [r6, #0]
 800b44a:	3302      	addmi	r3, #2
 800b44c:	6033      	strmi	r3, [r6, #0]
 800b44e:	6825      	ldr	r5, [r4, #0]
 800b450:	f015 0506 	ands.w	r5, r5, #6
 800b454:	d106      	bne.n	800b464 <_printf_common+0x48>
 800b456:	f104 0a19 	add.w	sl, r4, #25
 800b45a:	68e3      	ldr	r3, [r4, #12]
 800b45c:	6832      	ldr	r2, [r6, #0]
 800b45e:	1a9b      	subs	r3, r3, r2
 800b460:	42ab      	cmp	r3, r5
 800b462:	dc26      	bgt.n	800b4b2 <_printf_common+0x96>
 800b464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b468:	1e13      	subs	r3, r2, #0
 800b46a:	6822      	ldr	r2, [r4, #0]
 800b46c:	bf18      	it	ne
 800b46e:	2301      	movne	r3, #1
 800b470:	0692      	lsls	r2, r2, #26
 800b472:	d42b      	bmi.n	800b4cc <_printf_common+0xb0>
 800b474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b478:	4649      	mov	r1, r9
 800b47a:	4638      	mov	r0, r7
 800b47c:	47c0      	blx	r8
 800b47e:	3001      	adds	r0, #1
 800b480:	d01e      	beq.n	800b4c0 <_printf_common+0xa4>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	6922      	ldr	r2, [r4, #16]
 800b486:	f003 0306 	and.w	r3, r3, #6
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	bf02      	ittt	eq
 800b48e:	68e5      	ldreq	r5, [r4, #12]
 800b490:	6833      	ldreq	r3, [r6, #0]
 800b492:	1aed      	subeq	r5, r5, r3
 800b494:	68a3      	ldr	r3, [r4, #8]
 800b496:	bf0c      	ite	eq
 800b498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b49c:	2500      	movne	r5, #0
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	bfc4      	itt	gt
 800b4a2:	1a9b      	subgt	r3, r3, r2
 800b4a4:	18ed      	addgt	r5, r5, r3
 800b4a6:	2600      	movs	r6, #0
 800b4a8:	341a      	adds	r4, #26
 800b4aa:	42b5      	cmp	r5, r6
 800b4ac:	d11a      	bne.n	800b4e4 <_printf_common+0xc8>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e008      	b.n	800b4c4 <_printf_common+0xa8>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4652      	mov	r2, sl
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	47c0      	blx	r8
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d103      	bne.n	800b4c8 <_printf_common+0xac>
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	e7c6      	b.n	800b45a <_printf_common+0x3e>
 800b4cc:	18e1      	adds	r1, r4, r3
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	2030      	movs	r0, #48	; 0x30
 800b4d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4d6:	4422      	add	r2, r4
 800b4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4e0:	3302      	adds	r3, #2
 800b4e2:	e7c7      	b.n	800b474 <_printf_common+0x58>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c0      	blx	r8
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d0e6      	beq.n	800b4c0 <_printf_common+0xa4>
 800b4f2:	3601      	adds	r6, #1
 800b4f4:	e7d9      	b.n	800b4aa <_printf_common+0x8e>
	...

0800b4f8 <_printf_i>:
 800b4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fc:	7e0f      	ldrb	r7, [r1, #24]
 800b4fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b500:	2f78      	cmp	r7, #120	; 0x78
 800b502:	4691      	mov	r9, r2
 800b504:	4680      	mov	r8, r0
 800b506:	460c      	mov	r4, r1
 800b508:	469a      	mov	sl, r3
 800b50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b50e:	d807      	bhi.n	800b520 <_printf_i+0x28>
 800b510:	2f62      	cmp	r7, #98	; 0x62
 800b512:	d80a      	bhi.n	800b52a <_printf_i+0x32>
 800b514:	2f00      	cmp	r7, #0
 800b516:	f000 80d4 	beq.w	800b6c2 <_printf_i+0x1ca>
 800b51a:	2f58      	cmp	r7, #88	; 0x58
 800b51c:	f000 80c0 	beq.w	800b6a0 <_printf_i+0x1a8>
 800b520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b528:	e03a      	b.n	800b5a0 <_printf_i+0xa8>
 800b52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b52e:	2b15      	cmp	r3, #21
 800b530:	d8f6      	bhi.n	800b520 <_printf_i+0x28>
 800b532:	a101      	add	r1, pc, #4	; (adr r1, 800b538 <_printf_i+0x40>)
 800b534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b538:	0800b591 	.word	0x0800b591
 800b53c:	0800b5a5 	.word	0x0800b5a5
 800b540:	0800b521 	.word	0x0800b521
 800b544:	0800b521 	.word	0x0800b521
 800b548:	0800b521 	.word	0x0800b521
 800b54c:	0800b521 	.word	0x0800b521
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b521 	.word	0x0800b521
 800b558:	0800b521 	.word	0x0800b521
 800b55c:	0800b521 	.word	0x0800b521
 800b560:	0800b521 	.word	0x0800b521
 800b564:	0800b6a9 	.word	0x0800b6a9
 800b568:	0800b5d1 	.word	0x0800b5d1
 800b56c:	0800b663 	.word	0x0800b663
 800b570:	0800b521 	.word	0x0800b521
 800b574:	0800b521 	.word	0x0800b521
 800b578:	0800b6cb 	.word	0x0800b6cb
 800b57c:	0800b521 	.word	0x0800b521
 800b580:	0800b5d1 	.word	0x0800b5d1
 800b584:	0800b521 	.word	0x0800b521
 800b588:	0800b521 	.word	0x0800b521
 800b58c:	0800b66b 	.word	0x0800b66b
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	1d1a      	adds	r2, r3, #4
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	602a      	str	r2, [r5, #0]
 800b598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e09f      	b.n	800b6e4 <_printf_i+0x1ec>
 800b5a4:	6820      	ldr	r0, [r4, #0]
 800b5a6:	682b      	ldr	r3, [r5, #0]
 800b5a8:	0607      	lsls	r7, r0, #24
 800b5aa:	f103 0104 	add.w	r1, r3, #4
 800b5ae:	6029      	str	r1, [r5, #0]
 800b5b0:	d501      	bpl.n	800b5b6 <_printf_i+0xbe>
 800b5b2:	681e      	ldr	r6, [r3, #0]
 800b5b4:	e003      	b.n	800b5be <_printf_i+0xc6>
 800b5b6:	0646      	lsls	r6, r0, #25
 800b5b8:	d5fb      	bpl.n	800b5b2 <_printf_i+0xba>
 800b5ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b5be:	2e00      	cmp	r6, #0
 800b5c0:	da03      	bge.n	800b5ca <_printf_i+0xd2>
 800b5c2:	232d      	movs	r3, #45	; 0x2d
 800b5c4:	4276      	negs	r6, r6
 800b5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ca:	485a      	ldr	r0, [pc, #360]	; (800b734 <_printf_i+0x23c>)
 800b5cc:	230a      	movs	r3, #10
 800b5ce:	e012      	b.n	800b5f6 <_printf_i+0xfe>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	6820      	ldr	r0, [r4, #0]
 800b5d4:	1d19      	adds	r1, r3, #4
 800b5d6:	6029      	str	r1, [r5, #0]
 800b5d8:	0605      	lsls	r5, r0, #24
 800b5da:	d501      	bpl.n	800b5e0 <_printf_i+0xe8>
 800b5dc:	681e      	ldr	r6, [r3, #0]
 800b5de:	e002      	b.n	800b5e6 <_printf_i+0xee>
 800b5e0:	0641      	lsls	r1, r0, #25
 800b5e2:	d5fb      	bpl.n	800b5dc <_printf_i+0xe4>
 800b5e4:	881e      	ldrh	r6, [r3, #0]
 800b5e6:	4853      	ldr	r0, [pc, #332]	; (800b734 <_printf_i+0x23c>)
 800b5e8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ea:	bf0c      	ite	eq
 800b5ec:	2308      	moveq	r3, #8
 800b5ee:	230a      	movne	r3, #10
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5f6:	6865      	ldr	r5, [r4, #4]
 800b5f8:	60a5      	str	r5, [r4, #8]
 800b5fa:	2d00      	cmp	r5, #0
 800b5fc:	bfa2      	ittt	ge
 800b5fe:	6821      	ldrge	r1, [r4, #0]
 800b600:	f021 0104 	bicge.w	r1, r1, #4
 800b604:	6021      	strge	r1, [r4, #0]
 800b606:	b90e      	cbnz	r6, 800b60c <_printf_i+0x114>
 800b608:	2d00      	cmp	r5, #0
 800b60a:	d04b      	beq.n	800b6a4 <_printf_i+0x1ac>
 800b60c:	4615      	mov	r5, r2
 800b60e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b612:	fb03 6711 	mls	r7, r3, r1, r6
 800b616:	5dc7      	ldrb	r7, [r0, r7]
 800b618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b61c:	4637      	mov	r7, r6
 800b61e:	42bb      	cmp	r3, r7
 800b620:	460e      	mov	r6, r1
 800b622:	d9f4      	bls.n	800b60e <_printf_i+0x116>
 800b624:	2b08      	cmp	r3, #8
 800b626:	d10b      	bne.n	800b640 <_printf_i+0x148>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	07de      	lsls	r6, r3, #31
 800b62c:	d508      	bpl.n	800b640 <_printf_i+0x148>
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	6861      	ldr	r1, [r4, #4]
 800b632:	4299      	cmp	r1, r3
 800b634:	bfde      	ittt	le
 800b636:	2330      	movle	r3, #48	; 0x30
 800b638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b63c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b640:	1b52      	subs	r2, r2, r5
 800b642:	6122      	str	r2, [r4, #16]
 800b644:	f8cd a000 	str.w	sl, [sp]
 800b648:	464b      	mov	r3, r9
 800b64a:	aa03      	add	r2, sp, #12
 800b64c:	4621      	mov	r1, r4
 800b64e:	4640      	mov	r0, r8
 800b650:	f7ff fee4 	bl	800b41c <_printf_common>
 800b654:	3001      	adds	r0, #1
 800b656:	d14a      	bne.n	800b6ee <_printf_i+0x1f6>
 800b658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b65c:	b004      	add	sp, #16
 800b65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	f043 0320 	orr.w	r3, r3, #32
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	4833      	ldr	r0, [pc, #204]	; (800b738 <_printf_i+0x240>)
 800b66c:	2778      	movs	r7, #120	; 0x78
 800b66e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	6829      	ldr	r1, [r5, #0]
 800b676:	061f      	lsls	r7, r3, #24
 800b678:	f851 6b04 	ldr.w	r6, [r1], #4
 800b67c:	d402      	bmi.n	800b684 <_printf_i+0x18c>
 800b67e:	065f      	lsls	r7, r3, #25
 800b680:	bf48      	it	mi
 800b682:	b2b6      	uxthmi	r6, r6
 800b684:	07df      	lsls	r7, r3, #31
 800b686:	bf48      	it	mi
 800b688:	f043 0320 	orrmi.w	r3, r3, #32
 800b68c:	6029      	str	r1, [r5, #0]
 800b68e:	bf48      	it	mi
 800b690:	6023      	strmi	r3, [r4, #0]
 800b692:	b91e      	cbnz	r6, 800b69c <_printf_i+0x1a4>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	f023 0320 	bic.w	r3, r3, #32
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	2310      	movs	r3, #16
 800b69e:	e7a7      	b.n	800b5f0 <_printf_i+0xf8>
 800b6a0:	4824      	ldr	r0, [pc, #144]	; (800b734 <_printf_i+0x23c>)
 800b6a2:	e7e4      	b.n	800b66e <_printf_i+0x176>
 800b6a4:	4615      	mov	r5, r2
 800b6a6:	e7bd      	b.n	800b624 <_printf_i+0x12c>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	6826      	ldr	r6, [r4, #0]
 800b6ac:	6961      	ldr	r1, [r4, #20]
 800b6ae:	1d18      	adds	r0, r3, #4
 800b6b0:	6028      	str	r0, [r5, #0]
 800b6b2:	0635      	lsls	r5, r6, #24
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	d501      	bpl.n	800b6bc <_printf_i+0x1c4>
 800b6b8:	6019      	str	r1, [r3, #0]
 800b6ba:	e002      	b.n	800b6c2 <_printf_i+0x1ca>
 800b6bc:	0670      	lsls	r0, r6, #25
 800b6be:	d5fb      	bpl.n	800b6b8 <_printf_i+0x1c0>
 800b6c0:	8019      	strh	r1, [r3, #0]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6123      	str	r3, [r4, #16]
 800b6c6:	4615      	mov	r5, r2
 800b6c8:	e7bc      	b.n	800b644 <_printf_i+0x14c>
 800b6ca:	682b      	ldr	r3, [r5, #0]
 800b6cc:	1d1a      	adds	r2, r3, #4
 800b6ce:	602a      	str	r2, [r5, #0]
 800b6d0:	681d      	ldr	r5, [r3, #0]
 800b6d2:	6862      	ldr	r2, [r4, #4]
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7f4 fd7a 	bl	80001d0 <memchr>
 800b6dc:	b108      	cbz	r0, 800b6e2 <_printf_i+0x1ea>
 800b6de:	1b40      	subs	r0, r0, r5
 800b6e0:	6060      	str	r0, [r4, #4]
 800b6e2:	6863      	ldr	r3, [r4, #4]
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ec:	e7aa      	b.n	800b644 <_printf_i+0x14c>
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	47d0      	blx	sl
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	d0ad      	beq.n	800b658 <_printf_i+0x160>
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	079b      	lsls	r3, r3, #30
 800b700:	d413      	bmi.n	800b72a <_printf_i+0x232>
 800b702:	68e0      	ldr	r0, [r4, #12]
 800b704:	9b03      	ldr	r3, [sp, #12]
 800b706:	4298      	cmp	r0, r3
 800b708:	bfb8      	it	lt
 800b70a:	4618      	movlt	r0, r3
 800b70c:	e7a6      	b.n	800b65c <_printf_i+0x164>
 800b70e:	2301      	movs	r3, #1
 800b710:	4632      	mov	r2, r6
 800b712:	4649      	mov	r1, r9
 800b714:	4640      	mov	r0, r8
 800b716:	47d0      	blx	sl
 800b718:	3001      	adds	r0, #1
 800b71a:	d09d      	beq.n	800b658 <_printf_i+0x160>
 800b71c:	3501      	adds	r5, #1
 800b71e:	68e3      	ldr	r3, [r4, #12]
 800b720:	9903      	ldr	r1, [sp, #12]
 800b722:	1a5b      	subs	r3, r3, r1
 800b724:	42ab      	cmp	r3, r5
 800b726:	dcf2      	bgt.n	800b70e <_printf_i+0x216>
 800b728:	e7eb      	b.n	800b702 <_printf_i+0x20a>
 800b72a:	2500      	movs	r5, #0
 800b72c:	f104 0619 	add.w	r6, r4, #25
 800b730:	e7f5      	b.n	800b71e <_printf_i+0x226>
 800b732:	bf00      	nop
 800b734:	0800b8c1 	.word	0x0800b8c1
 800b738:	0800b8d2 	.word	0x0800b8d2

0800b73c <memmove>:
 800b73c:	4288      	cmp	r0, r1
 800b73e:	b510      	push	{r4, lr}
 800b740:	eb01 0402 	add.w	r4, r1, r2
 800b744:	d902      	bls.n	800b74c <memmove+0x10>
 800b746:	4284      	cmp	r4, r0
 800b748:	4623      	mov	r3, r4
 800b74a:	d807      	bhi.n	800b75c <memmove+0x20>
 800b74c:	1e43      	subs	r3, r0, #1
 800b74e:	42a1      	cmp	r1, r4
 800b750:	d008      	beq.n	800b764 <memmove+0x28>
 800b752:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b75a:	e7f8      	b.n	800b74e <memmove+0x12>
 800b75c:	4402      	add	r2, r0
 800b75e:	4601      	mov	r1, r0
 800b760:	428a      	cmp	r2, r1
 800b762:	d100      	bne.n	800b766 <memmove+0x2a>
 800b764:	bd10      	pop	{r4, pc}
 800b766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b76a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b76e:	e7f7      	b.n	800b760 <memmove+0x24>

0800b770 <_sbrk_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d06      	ldr	r5, [pc, #24]	; (800b78c <_sbrk_r+0x1c>)
 800b774:	2300      	movs	r3, #0
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	f7f5 f9ec 	bl	8000b58 <_sbrk>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d102      	bne.n	800b78a <_sbrk_r+0x1a>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	b103      	cbz	r3, 800b78a <_sbrk_r+0x1a>
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	200018f4 	.word	0x200018f4

0800b790 <memcpy>:
 800b790:	440a      	add	r2, r1
 800b792:	4291      	cmp	r1, r2
 800b794:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b798:	d100      	bne.n	800b79c <memcpy+0xc>
 800b79a:	4770      	bx	lr
 800b79c:	b510      	push	{r4, lr}
 800b79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7a6:	4291      	cmp	r1, r2
 800b7a8:	d1f9      	bne.n	800b79e <memcpy+0xe>
 800b7aa:	bd10      	pop	{r4, pc}

0800b7ac <_realloc_r>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	4614      	mov	r4, r2
 800b7b4:	460e      	mov	r6, r1
 800b7b6:	b921      	cbnz	r1, 800b7c2 <_realloc_r+0x16>
 800b7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7bc:	4611      	mov	r1, r2
 800b7be:	f7ff bc49 	b.w	800b054 <_malloc_r>
 800b7c2:	b92a      	cbnz	r2, 800b7d0 <_realloc_r+0x24>
 800b7c4:	f7ff fbda 	bl	800af7c <_free_r>
 800b7c8:	4625      	mov	r5, r4
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d0:	f000 f81b 	bl	800b80a <_malloc_usable_size_r>
 800b7d4:	4284      	cmp	r4, r0
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	d802      	bhi.n	800b7e0 <_realloc_r+0x34>
 800b7da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7de:	d812      	bhi.n	800b806 <_realloc_r+0x5a>
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f7ff fc36 	bl	800b054 <_malloc_r>
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0ed      	beq.n	800b7ca <_realloc_r+0x1e>
 800b7ee:	42bc      	cmp	r4, r7
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	bf28      	it	cs
 800b7f6:	463a      	movcs	r2, r7
 800b7f8:	f7ff ffca 	bl	800b790 <memcpy>
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	4640      	mov	r0, r8
 800b800:	f7ff fbbc 	bl	800af7c <_free_r>
 800b804:	e7e1      	b.n	800b7ca <_realloc_r+0x1e>
 800b806:	4635      	mov	r5, r6
 800b808:	e7df      	b.n	800b7ca <_realloc_r+0x1e>

0800b80a <_malloc_usable_size_r>:
 800b80a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b80e:	1f18      	subs	r0, r3, #4
 800b810:	2b00      	cmp	r3, #0
 800b812:	bfbc      	itt	lt
 800b814:	580b      	ldrlt	r3, [r1, r0]
 800b816:	18c0      	addlt	r0, r0, r3
 800b818:	4770      	bx	lr
	...

0800b81c <_init>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	bf00      	nop
 800b820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b822:	bc08      	pop	{r3}
 800b824:	469e      	mov	lr, r3
 800b826:	4770      	bx	lr

0800b828 <_fini>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	bf00      	nop
 800b82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82e:	bc08      	pop	{r3}
 800b830:	469e      	mov	lr, r3
 800b832:	4770      	bx	lr
